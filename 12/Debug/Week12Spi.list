
Week12Spi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000798c  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e8  08007b28  08007b28  00017b28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e10  08007e10  00020250  2**0
                  CONTENTS
  4 .ARM          00000008  08007e10  08007e10  00017e10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007e18  08007e18  00020250  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e18  08007e18  00017e18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007e1c  08007e1c  00017e1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000250  20000000  08007e20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000258  20000250  08008070  00020250  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200004a8  08008070  000204a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020250  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010b9a  00000000  00000000  00020280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021ee  00000000  00000000  00030e1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fc0  00000000  00000000  00033008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ef8  00000000  00000000  00033fc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017a8e  00000000  00000000  00034ec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010e08  00000000  00000000  0004c94e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b106  00000000  00000000  0005d756  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f885c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004770  00000000  00000000  000f88b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000250 	.word	0x20000250
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08007b0c 	.word	0x08007b0c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000254 	.word	0x20000254
 80001d4:	08007b0c 	.word	0x08007b0c

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_drsub>:
 80001e8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001ec:	e002      	b.n	80001f4 <__adddf3>
 80001ee:	bf00      	nop

080001f0 <__aeabi_dsub>:
 80001f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001f4 <__adddf3>:
 80001f4:	b530      	push	{r4, r5, lr}
 80001f6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001fe:	ea94 0f05 	teq	r4, r5
 8000202:	bf08      	it	eq
 8000204:	ea90 0f02 	teqeq	r0, r2
 8000208:	bf1f      	itttt	ne
 800020a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800020e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000212:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000216:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021a:	f000 80e2 	beq.w	80003e2 <__adddf3+0x1ee>
 800021e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000222:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000226:	bfb8      	it	lt
 8000228:	426d      	neglt	r5, r5
 800022a:	dd0c      	ble.n	8000246 <__adddf3+0x52>
 800022c:	442c      	add	r4, r5
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	ea82 0000 	eor.w	r0, r2, r0
 800023a:	ea83 0101 	eor.w	r1, r3, r1
 800023e:	ea80 0202 	eor.w	r2, r0, r2
 8000242:	ea81 0303 	eor.w	r3, r1, r3
 8000246:	2d36      	cmp	r5, #54	; 0x36
 8000248:	bf88      	it	hi
 800024a:	bd30      	pophi	{r4, r5, pc}
 800024c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000250:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000254:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000258:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800025c:	d002      	beq.n	8000264 <__adddf3+0x70>
 800025e:	4240      	negs	r0, r0
 8000260:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000264:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000268:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800026c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000270:	d002      	beq.n	8000278 <__adddf3+0x84>
 8000272:	4252      	negs	r2, r2
 8000274:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000278:	ea94 0f05 	teq	r4, r5
 800027c:	f000 80a7 	beq.w	80003ce <__adddf3+0x1da>
 8000280:	f1a4 0401 	sub.w	r4, r4, #1
 8000284:	f1d5 0e20 	rsbs	lr, r5, #32
 8000288:	db0d      	blt.n	80002a6 <__adddf3+0xb2>
 800028a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800028e:	fa22 f205 	lsr.w	r2, r2, r5
 8000292:	1880      	adds	r0, r0, r2
 8000294:	f141 0100 	adc.w	r1, r1, #0
 8000298:	fa03 f20e 	lsl.w	r2, r3, lr
 800029c:	1880      	adds	r0, r0, r2
 800029e:	fa43 f305 	asr.w	r3, r3, r5
 80002a2:	4159      	adcs	r1, r3
 80002a4:	e00e      	b.n	80002c4 <__adddf3+0xd0>
 80002a6:	f1a5 0520 	sub.w	r5, r5, #32
 80002aa:	f10e 0e20 	add.w	lr, lr, #32
 80002ae:	2a01      	cmp	r2, #1
 80002b0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b4:	bf28      	it	cs
 80002b6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ba:	fa43 f305 	asr.w	r3, r3, r5
 80002be:	18c0      	adds	r0, r0, r3
 80002c0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c8:	d507      	bpl.n	80002da <__adddf3+0xe6>
 80002ca:	f04f 0e00 	mov.w	lr, #0
 80002ce:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002d6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002da:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002de:	d31b      	bcc.n	8000318 <__adddf3+0x124>
 80002e0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002e4:	d30c      	bcc.n	8000300 <__adddf3+0x10c>
 80002e6:	0849      	lsrs	r1, r1, #1
 80002e8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002ec:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f0:	f104 0401 	add.w	r4, r4, #1
 80002f4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002fc:	f080 809a 	bcs.w	8000434 <__adddf3+0x240>
 8000300:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000304:	bf08      	it	eq
 8000306:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030a:	f150 0000 	adcs.w	r0, r0, #0
 800030e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000312:	ea41 0105 	orr.w	r1, r1, r5
 8000316:	bd30      	pop	{r4, r5, pc}
 8000318:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800031c:	4140      	adcs	r0, r0
 800031e:	eb41 0101 	adc.w	r1, r1, r1
 8000322:	3c01      	subs	r4, #1
 8000324:	bf28      	it	cs
 8000326:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800032a:	d2e9      	bcs.n	8000300 <__adddf3+0x10c>
 800032c:	f091 0f00 	teq	r1, #0
 8000330:	bf04      	itt	eq
 8000332:	4601      	moveq	r1, r0
 8000334:	2000      	moveq	r0, #0
 8000336:	fab1 f381 	clz	r3, r1
 800033a:	bf08      	it	eq
 800033c:	3320      	addeq	r3, #32
 800033e:	f1a3 030b 	sub.w	r3, r3, #11
 8000342:	f1b3 0220 	subs.w	r2, r3, #32
 8000346:	da0c      	bge.n	8000362 <__adddf3+0x16e>
 8000348:	320c      	adds	r2, #12
 800034a:	dd08      	ble.n	800035e <__adddf3+0x16a>
 800034c:	f102 0c14 	add.w	ip, r2, #20
 8000350:	f1c2 020c 	rsb	r2, r2, #12
 8000354:	fa01 f00c 	lsl.w	r0, r1, ip
 8000358:	fa21 f102 	lsr.w	r1, r1, r2
 800035c:	e00c      	b.n	8000378 <__adddf3+0x184>
 800035e:	f102 0214 	add.w	r2, r2, #20
 8000362:	bfd8      	it	le
 8000364:	f1c2 0c20 	rsble	ip, r2, #32
 8000368:	fa01 f102 	lsl.w	r1, r1, r2
 800036c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000370:	bfdc      	itt	le
 8000372:	ea41 010c 	orrle.w	r1, r1, ip
 8000376:	4090      	lslle	r0, r2
 8000378:	1ae4      	subs	r4, r4, r3
 800037a:	bfa2      	ittt	ge
 800037c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000380:	4329      	orrge	r1, r5
 8000382:	bd30      	popge	{r4, r5, pc}
 8000384:	ea6f 0404 	mvn.w	r4, r4
 8000388:	3c1f      	subs	r4, #31
 800038a:	da1c      	bge.n	80003c6 <__adddf3+0x1d2>
 800038c:	340c      	adds	r4, #12
 800038e:	dc0e      	bgt.n	80003ae <__adddf3+0x1ba>
 8000390:	f104 0414 	add.w	r4, r4, #20
 8000394:	f1c4 0220 	rsb	r2, r4, #32
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f302 	lsl.w	r3, r1, r2
 80003a0:	ea40 0003 	orr.w	r0, r0, r3
 80003a4:	fa21 f304 	lsr.w	r3, r1, r4
 80003a8:	ea45 0103 	orr.w	r1, r5, r3
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f1c4 040c 	rsb	r4, r4, #12
 80003b2:	f1c4 0220 	rsb	r2, r4, #32
 80003b6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ba:	fa01 f304 	lsl.w	r3, r1, r4
 80003be:	ea40 0003 	orr.w	r0, r0, r3
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f094 0f00 	teq	r4, #0
 80003d2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003d6:	bf06      	itte	eq
 80003d8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003dc:	3401      	addeq	r4, #1
 80003de:	3d01      	subne	r5, #1
 80003e0:	e74e      	b.n	8000280 <__adddf3+0x8c>
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf18      	it	ne
 80003e8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003ec:	d029      	beq.n	8000442 <__adddf3+0x24e>
 80003ee:	ea94 0f05 	teq	r4, r5
 80003f2:	bf08      	it	eq
 80003f4:	ea90 0f02 	teqeq	r0, r2
 80003f8:	d005      	beq.n	8000406 <__adddf3+0x212>
 80003fa:	ea54 0c00 	orrs.w	ip, r4, r0
 80003fe:	bf04      	itt	eq
 8000400:	4619      	moveq	r1, r3
 8000402:	4610      	moveq	r0, r2
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	ea91 0f03 	teq	r1, r3
 800040a:	bf1e      	ittt	ne
 800040c:	2100      	movne	r1, #0
 800040e:	2000      	movne	r0, #0
 8000410:	bd30      	popne	{r4, r5, pc}
 8000412:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000416:	d105      	bne.n	8000424 <__adddf3+0x230>
 8000418:	0040      	lsls	r0, r0, #1
 800041a:	4149      	adcs	r1, r1
 800041c:	bf28      	it	cs
 800041e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000422:	bd30      	pop	{r4, r5, pc}
 8000424:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000428:	bf3c      	itt	cc
 800042a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800042e:	bd30      	popcc	{r4, r5, pc}
 8000430:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000434:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000438:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800043c:	f04f 0000 	mov.w	r0, #0
 8000440:	bd30      	pop	{r4, r5, pc}
 8000442:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000446:	bf1a      	itte	ne
 8000448:	4619      	movne	r1, r3
 800044a:	4610      	movne	r0, r2
 800044c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000450:	bf1c      	itt	ne
 8000452:	460b      	movne	r3, r1
 8000454:	4602      	movne	r2, r0
 8000456:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045a:	bf06      	itte	eq
 800045c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000460:	ea91 0f03 	teqeq	r1, r3
 8000464:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	bf00      	nop

0800046c <__aeabi_ui2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f04f 0500 	mov.w	r5, #0
 8000484:	f04f 0100 	mov.w	r1, #0
 8000488:	e750      	b.n	800032c <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_i2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004a4:	bf48      	it	mi
 80004a6:	4240      	negmi	r0, r0
 80004a8:	f04f 0100 	mov.w	r1, #0
 80004ac:	e73e      	b.n	800032c <__adddf3+0x138>
 80004ae:	bf00      	nop

080004b0 <__aeabi_f2d>:
 80004b0:	0042      	lsls	r2, r0, #1
 80004b2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004b6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ba:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004be:	bf1f      	itttt	ne
 80004c0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004cc:	4770      	bxne	lr
 80004ce:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004d2:	bf08      	it	eq
 80004d4:	4770      	bxeq	lr
 80004d6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004da:	bf04      	itt	eq
 80004dc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e0:	4770      	bxeq	lr
 80004e2:	b530      	push	{r4, r5, lr}
 80004e4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f0:	e71c      	b.n	800032c <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_ul2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f04f 0500 	mov.w	r5, #0
 8000502:	e00a      	b.n	800051a <__aeabi_l2d+0x16>

08000504 <__aeabi_l2d>:
 8000504:	ea50 0201 	orrs.w	r2, r0, r1
 8000508:	bf08      	it	eq
 800050a:	4770      	bxeq	lr
 800050c:	b530      	push	{r4, r5, lr}
 800050e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000512:	d502      	bpl.n	800051a <__aeabi_l2d+0x16>
 8000514:	4240      	negs	r0, r0
 8000516:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800051e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000522:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000526:	f43f aed8 	beq.w	80002da <__adddf3+0xe6>
 800052a:	f04f 0203 	mov.w	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000542:	f1c2 0320 	rsb	r3, r2, #32
 8000546:	fa00 fc03 	lsl.w	ip, r0, r3
 800054a:	fa20 f002 	lsr.w	r0, r0, r2
 800054e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000552:	ea40 000e 	orr.w	r0, r0, lr
 8000556:	fa21 f102 	lsr.w	r1, r1, r2
 800055a:	4414      	add	r4, r2
 800055c:	e6bd      	b.n	80002da <__adddf3+0xe6>
 800055e:	bf00      	nop

08000560 <__aeabi_dmul>:
 8000560:	b570      	push	{r4, r5, r6, lr}
 8000562:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000566:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800056a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800056e:	bf1d      	ittte	ne
 8000570:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000574:	ea94 0f0c 	teqne	r4, ip
 8000578:	ea95 0f0c 	teqne	r5, ip
 800057c:	f000 f8de 	bleq	800073c <__aeabi_dmul+0x1dc>
 8000580:	442c      	add	r4, r5
 8000582:	ea81 0603 	eor.w	r6, r1, r3
 8000586:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800058a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800058e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000592:	bf18      	it	ne
 8000594:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a0:	d038      	beq.n	8000614 <__aeabi_dmul+0xb4>
 80005a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005b6:	f04f 0600 	mov.w	r6, #0
 80005ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005be:	f09c 0f00 	teq	ip, #0
 80005c2:	bf18      	it	ne
 80005c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005cc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005d4:	d204      	bcs.n	80005e0 <__aeabi_dmul+0x80>
 80005d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005da:	416d      	adcs	r5, r5
 80005dc:	eb46 0606 	adc.w	r6, r6, r6
 80005e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f8:	bf88      	it	hi
 80005fa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005fe:	d81e      	bhi.n	800063e <__aeabi_dmul+0xde>
 8000600:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000604:	bf08      	it	eq
 8000606:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800060a:	f150 0000 	adcs.w	r0, r0, #0
 800060e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000612:	bd70      	pop	{r4, r5, r6, pc}
 8000614:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000618:	ea46 0101 	orr.w	r1, r6, r1
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	ea81 0103 	eor.w	r1, r1, r3
 8000624:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000628:	bfc2      	ittt	gt
 800062a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800062e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000632:	bd70      	popgt	{r4, r5, r6, pc}
 8000634:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000638:	f04f 0e00 	mov.w	lr, #0
 800063c:	3c01      	subs	r4, #1
 800063e:	f300 80ab 	bgt.w	8000798 <__aeabi_dmul+0x238>
 8000642:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000646:	bfde      	ittt	le
 8000648:	2000      	movle	r0, #0
 800064a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800064e:	bd70      	pople	{r4, r5, r6, pc}
 8000650:	f1c4 0400 	rsb	r4, r4, #0
 8000654:	3c20      	subs	r4, #32
 8000656:	da35      	bge.n	80006c4 <__aeabi_dmul+0x164>
 8000658:	340c      	adds	r4, #12
 800065a:	dc1b      	bgt.n	8000694 <__aeabi_dmul+0x134>
 800065c:	f104 0414 	add.w	r4, r4, #20
 8000660:	f1c4 0520 	rsb	r5, r4, #32
 8000664:	fa00 f305 	lsl.w	r3, r0, r5
 8000668:	fa20 f004 	lsr.w	r0, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea40 0002 	orr.w	r0, r0, r2
 8000674:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000678:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800067c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000680:	fa21 f604 	lsr.w	r6, r1, r4
 8000684:	eb42 0106 	adc.w	r1, r2, r6
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f1c4 040c 	rsb	r4, r4, #12
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f304 	lsl.w	r3, r0, r4
 80006a0:	fa20 f005 	lsr.w	r0, r0, r5
 80006a4:	fa01 f204 	lsl.w	r2, r1, r4
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b4:	f141 0100 	adc.w	r1, r1, #0
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 0520 	rsb	r5, r4, #32
 80006c8:	fa00 f205 	lsl.w	r2, r0, r5
 80006cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d0:	fa20 f304 	lsr.w	r3, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea43 0302 	orr.w	r3, r3, r2
 80006dc:	fa21 f004 	lsr.w	r0, r1, r4
 80006e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e4:	fa21 f204 	lsr.w	r2, r1, r4
 80006e8:	ea20 0002 	bic.w	r0, r0, r2
 80006ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f094 0f00 	teq	r4, #0
 8000700:	d10f      	bne.n	8000722 <__aeabi_dmul+0x1c2>
 8000702:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000706:	0040      	lsls	r0, r0, #1
 8000708:	eb41 0101 	adc.w	r1, r1, r1
 800070c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3c01      	subeq	r4, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1a6>
 8000716:	ea41 0106 	orr.w	r1, r1, r6
 800071a:	f095 0f00 	teq	r5, #0
 800071e:	bf18      	it	ne
 8000720:	4770      	bxne	lr
 8000722:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000726:	0052      	lsls	r2, r2, #1
 8000728:	eb43 0303 	adc.w	r3, r3, r3
 800072c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3d01      	subeq	r5, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1c6>
 8000736:	ea43 0306 	orr.w	r3, r3, r6
 800073a:	4770      	bx	lr
 800073c:	ea94 0f0c 	teq	r4, ip
 8000740:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000744:	bf18      	it	ne
 8000746:	ea95 0f0c 	teqne	r5, ip
 800074a:	d00c      	beq.n	8000766 <__aeabi_dmul+0x206>
 800074c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000750:	bf18      	it	ne
 8000752:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000756:	d1d1      	bne.n	80006fc <__aeabi_dmul+0x19c>
 8000758:	ea81 0103 	eor.w	r1, r1, r3
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000760:	f04f 0000 	mov.w	r0, #0
 8000764:	bd70      	pop	{r4, r5, r6, pc}
 8000766:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076a:	bf06      	itte	eq
 800076c:	4610      	moveq	r0, r2
 800076e:	4619      	moveq	r1, r3
 8000770:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000774:	d019      	beq.n	80007aa <__aeabi_dmul+0x24a>
 8000776:	ea94 0f0c 	teq	r4, ip
 800077a:	d102      	bne.n	8000782 <__aeabi_dmul+0x222>
 800077c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000780:	d113      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000782:	ea95 0f0c 	teq	r5, ip
 8000786:	d105      	bne.n	8000794 <__aeabi_dmul+0x234>
 8000788:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800078c:	bf1c      	itt	ne
 800078e:	4610      	movne	r0, r2
 8000790:	4619      	movne	r1, r3
 8000792:	d10a      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000794:	ea81 0103 	eor.w	r1, r1, r3
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007a4:	f04f 0000 	mov.w	r0, #0
 80007a8:	bd70      	pop	{r4, r5, r6, pc}
 80007aa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007b2:	bd70      	pop	{r4, r5, r6, pc}

080007b4 <__aeabi_ddiv>:
 80007b4:	b570      	push	{r4, r5, r6, lr}
 80007b6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007be:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007c2:	bf1d      	ittte	ne
 80007c4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c8:	ea94 0f0c 	teqne	r4, ip
 80007cc:	ea95 0f0c 	teqne	r5, ip
 80007d0:	f000 f8a7 	bleq	8000922 <__aeabi_ddiv+0x16e>
 80007d4:	eba4 0405 	sub.w	r4, r4, r5
 80007d8:	ea81 0e03 	eor.w	lr, r1, r3
 80007dc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e4:	f000 8088 	beq.w	80008f8 <__aeabi_ddiv+0x144>
 80007e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007ec:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007fc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000800:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000804:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000808:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800080c:	429d      	cmp	r5, r3
 800080e:	bf08      	it	eq
 8000810:	4296      	cmpeq	r6, r2
 8000812:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000816:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800081a:	d202      	bcs.n	8000822 <__aeabi_ddiv+0x6e>
 800081c:	085b      	lsrs	r3, r3, #1
 800081e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000822:	1ab6      	subs	r6, r6, r2
 8000824:	eb65 0503 	sbc.w	r5, r5, r3
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000832:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 000c 	orrcs.w	r0, r0, ip
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000890:	ea55 0e06 	orrs.w	lr, r5, r6
 8000894:	d018      	beq.n	80008c8 <__aeabi_ddiv+0x114>
 8000896:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800089a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800089e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008a2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008a6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008aa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ae:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008b2:	d1c0      	bne.n	8000836 <__aeabi_ddiv+0x82>
 80008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b8:	d10b      	bne.n	80008d2 <__aeabi_ddiv+0x11e>
 80008ba:	ea41 0100 	orr.w	r1, r1, r0
 80008be:	f04f 0000 	mov.w	r0, #0
 80008c2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008c6:	e7b6      	b.n	8000836 <__aeabi_ddiv+0x82>
 80008c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008cc:	bf04      	itt	eq
 80008ce:	4301      	orreq	r1, r0
 80008d0:	2000      	moveq	r0, #0
 80008d2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008d6:	bf88      	it	hi
 80008d8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008dc:	f63f aeaf 	bhi.w	800063e <__aeabi_dmul+0xde>
 80008e0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e4:	bf04      	itt	eq
 80008e6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ee:	f150 0000 	adcs.w	r0, r0, #0
 80008f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	pop	{r4, r5, r6, pc}
 80008f8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008fc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000900:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000904:	bfc2      	ittt	gt
 8000906:	ebd4 050c 	rsbsgt	r5, r4, ip
 800090a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800090e:	bd70      	popgt	{r4, r5, r6, pc}
 8000910:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000914:	f04f 0e00 	mov.w	lr, #0
 8000918:	3c01      	subs	r4, #1
 800091a:	e690      	b.n	800063e <__aeabi_dmul+0xde>
 800091c:	ea45 0e06 	orr.w	lr, r5, r6
 8000920:	e68d      	b.n	800063e <__aeabi_dmul+0xde>
 8000922:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000926:	ea94 0f0c 	teq	r4, ip
 800092a:	bf08      	it	eq
 800092c:	ea95 0f0c 	teqeq	r5, ip
 8000930:	f43f af3b 	beq.w	80007aa <__aeabi_dmul+0x24a>
 8000934:	ea94 0f0c 	teq	r4, ip
 8000938:	d10a      	bne.n	8000950 <__aeabi_ddiv+0x19c>
 800093a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800093e:	f47f af34 	bne.w	80007aa <__aeabi_dmul+0x24a>
 8000942:	ea95 0f0c 	teq	r5, ip
 8000946:	f47f af25 	bne.w	8000794 <__aeabi_dmul+0x234>
 800094a:	4610      	mov	r0, r2
 800094c:	4619      	mov	r1, r3
 800094e:	e72c      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000950:	ea95 0f0c 	teq	r5, ip
 8000954:	d106      	bne.n	8000964 <__aeabi_ddiv+0x1b0>
 8000956:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800095a:	f43f aefd 	beq.w	8000758 <__aeabi_dmul+0x1f8>
 800095e:	4610      	mov	r0, r2
 8000960:	4619      	mov	r1, r3
 8000962:	e722      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000964:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000968:	bf18      	it	ne
 800096a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800096e:	f47f aec5 	bne.w	80006fc <__aeabi_dmul+0x19c>
 8000972:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000976:	f47f af0d 	bne.w	8000794 <__aeabi_dmul+0x234>
 800097a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800097e:	f47f aeeb 	bne.w	8000758 <__aeabi_dmul+0x1f8>
 8000982:	e712      	b.n	80007aa <__aeabi_dmul+0x24a>

08000984 <__gedf2>:
 8000984:	f04f 3cff 	mov.w	ip, #4294967295
 8000988:	e006      	b.n	8000998 <__cmpdf2+0x4>
 800098a:	bf00      	nop

0800098c <__ledf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	e002      	b.n	8000998 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__cmpdf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	f84d cd04 	str.w	ip, [sp, #-4]!
 800099c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ae:	d01b      	beq.n	80009e8 <__cmpdf2+0x54>
 80009b0:	b001      	add	sp, #4
 80009b2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009b6:	bf0c      	ite	eq
 80009b8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009bc:	ea91 0f03 	teqne	r1, r3
 80009c0:	bf02      	ittt	eq
 80009c2:	ea90 0f02 	teqeq	r0, r2
 80009c6:	2000      	moveq	r0, #0
 80009c8:	4770      	bxeq	lr
 80009ca:	f110 0f00 	cmn.w	r0, #0
 80009ce:	ea91 0f03 	teq	r1, r3
 80009d2:	bf58      	it	pl
 80009d4:	4299      	cmppl	r1, r3
 80009d6:	bf08      	it	eq
 80009d8:	4290      	cmpeq	r0, r2
 80009da:	bf2c      	ite	cs
 80009dc:	17d8      	asrcs	r0, r3, #31
 80009de:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009e2:	f040 0001 	orr.w	r0, r0, #1
 80009e6:	4770      	bx	lr
 80009e8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d102      	bne.n	80009f8 <__cmpdf2+0x64>
 80009f2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009f6:	d107      	bne.n	8000a08 <__cmpdf2+0x74>
 80009f8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a00:	d1d6      	bne.n	80009b0 <__cmpdf2+0x1c>
 8000a02:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a06:	d0d3      	beq.n	80009b0 <__cmpdf2+0x1c>
 8000a08:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdrcmple>:
 8000a10:	4684      	mov	ip, r0
 8000a12:	4610      	mov	r0, r2
 8000a14:	4662      	mov	r2, ip
 8000a16:	468c      	mov	ip, r1
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4663      	mov	r3, ip
 8000a1c:	e000      	b.n	8000a20 <__aeabi_cdcmpeq>
 8000a1e:	bf00      	nop

08000a20 <__aeabi_cdcmpeq>:
 8000a20:	b501      	push	{r0, lr}
 8000a22:	f7ff ffb7 	bl	8000994 <__cmpdf2>
 8000a26:	2800      	cmp	r0, #0
 8000a28:	bf48      	it	mi
 8000a2a:	f110 0f00 	cmnmi.w	r0, #0
 8000a2e:	bd01      	pop	{r0, pc}

08000a30 <__aeabi_dcmpeq>:
 8000a30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a34:	f7ff fff4 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a38:	bf0c      	ite	eq
 8000a3a:	2001      	moveq	r0, #1
 8000a3c:	2000      	movne	r0, #0
 8000a3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a42:	bf00      	nop

08000a44 <__aeabi_dcmplt>:
 8000a44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a48:	f7ff ffea 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a4c:	bf34      	ite	cc
 8000a4e:	2001      	movcc	r0, #1
 8000a50:	2000      	movcs	r0, #0
 8000a52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a56:	bf00      	nop

08000a58 <__aeabi_dcmple>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff ffe0 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a60:	bf94      	ite	ls
 8000a62:	2001      	movls	r0, #1
 8000a64:	2000      	movhi	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_dcmpge>:
 8000a6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a70:	f7ff ffce 	bl	8000a10 <__aeabi_cdrcmple>
 8000a74:	bf94      	ite	ls
 8000a76:	2001      	movls	r0, #1
 8000a78:	2000      	movhi	r0, #0
 8000a7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7e:	bf00      	nop

08000a80 <__aeabi_dcmpgt>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff ffc4 	bl	8000a10 <__aeabi_cdrcmple>
 8000a88:	bf34      	ite	cc
 8000a8a:	2001      	movcc	r0, #1
 8000a8c:	2000      	movcs	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_d2iz>:
 8000a94:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a98:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a9c:	d215      	bcs.n	8000aca <__aeabi_d2iz+0x36>
 8000a9e:	d511      	bpl.n	8000ac4 <__aeabi_d2iz+0x30>
 8000aa0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aa4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000aa8:	d912      	bls.n	8000ad0 <__aeabi_d2iz+0x3c>
 8000aaa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ab2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ab6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aba:	fa23 f002 	lsr.w	r0, r3, r2
 8000abe:	bf18      	it	ne
 8000ac0:	4240      	negne	r0, r0
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ace:	d105      	bne.n	8000adc <__aeabi_d2iz+0x48>
 8000ad0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ad4:	bf08      	it	eq
 8000ad6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ada:	4770      	bx	lr
 8000adc:	f04f 0000 	mov.w	r0, #0
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_d2f>:
 8000ae4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000aec:	bf24      	itt	cs
 8000aee:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000af2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000af6:	d90d      	bls.n	8000b14 <__aeabi_d2f+0x30>
 8000af8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000afc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b00:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b04:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b08:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b0c:	bf08      	it	eq
 8000b0e:	f020 0001 	biceq.w	r0, r0, #1
 8000b12:	4770      	bx	lr
 8000b14:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b18:	d121      	bne.n	8000b5e <__aeabi_d2f+0x7a>
 8000b1a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b1e:	bfbc      	itt	lt
 8000b20:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b24:	4770      	bxlt	lr
 8000b26:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b2a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b2e:	f1c2 0218 	rsb	r2, r2, #24
 8000b32:	f1c2 0c20 	rsb	ip, r2, #32
 8000b36:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b3a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b3e:	bf18      	it	ne
 8000b40:	f040 0001 	orrne.w	r0, r0, #1
 8000b44:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b48:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b4c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b50:	ea40 000c 	orr.w	r0, r0, ip
 8000b54:	fa23 f302 	lsr.w	r3, r3, r2
 8000b58:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b5c:	e7cc      	b.n	8000af8 <__aeabi_d2f+0x14>
 8000b5e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b62:	d107      	bne.n	8000b74 <__aeabi_d2f+0x90>
 8000b64:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b68:	bf1e      	ittt	ne
 8000b6a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b6e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b72:	4770      	bxne	lr
 8000b74:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b78:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b7c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop

08000b84 <__aeabi_frsub>:
 8000b84:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b88:	e002      	b.n	8000b90 <__addsf3>
 8000b8a:	bf00      	nop

08000b8c <__aeabi_fsub>:
 8000b8c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b90 <__addsf3>:
 8000b90:	0042      	lsls	r2, r0, #1
 8000b92:	bf1f      	itttt	ne
 8000b94:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b98:	ea92 0f03 	teqne	r2, r3
 8000b9c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ba0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ba4:	d06a      	beq.n	8000c7c <__addsf3+0xec>
 8000ba6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000baa:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bae:	bfc1      	itttt	gt
 8000bb0:	18d2      	addgt	r2, r2, r3
 8000bb2:	4041      	eorgt	r1, r0
 8000bb4:	4048      	eorgt	r0, r1
 8000bb6:	4041      	eorgt	r1, r0
 8000bb8:	bfb8      	it	lt
 8000bba:	425b      	neglt	r3, r3
 8000bbc:	2b19      	cmp	r3, #25
 8000bbe:	bf88      	it	hi
 8000bc0:	4770      	bxhi	lr
 8000bc2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bc6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bca:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bce:	bf18      	it	ne
 8000bd0:	4240      	negne	r0, r0
 8000bd2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bd6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bda:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bde:	bf18      	it	ne
 8000be0:	4249      	negne	r1, r1
 8000be2:	ea92 0f03 	teq	r2, r3
 8000be6:	d03f      	beq.n	8000c68 <__addsf3+0xd8>
 8000be8:	f1a2 0201 	sub.w	r2, r2, #1
 8000bec:	fa41 fc03 	asr.w	ip, r1, r3
 8000bf0:	eb10 000c 	adds.w	r0, r0, ip
 8000bf4:	f1c3 0320 	rsb	r3, r3, #32
 8000bf8:	fa01 f103 	lsl.w	r1, r1, r3
 8000bfc:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	d502      	bpl.n	8000c08 <__addsf3+0x78>
 8000c02:	4249      	negs	r1, r1
 8000c04:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c08:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c0c:	d313      	bcc.n	8000c36 <__addsf3+0xa6>
 8000c0e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c12:	d306      	bcc.n	8000c22 <__addsf3+0x92>
 8000c14:	0840      	lsrs	r0, r0, #1
 8000c16:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c1a:	f102 0201 	add.w	r2, r2, #1
 8000c1e:	2afe      	cmp	r2, #254	; 0xfe
 8000c20:	d251      	bcs.n	8000cc6 <__addsf3+0x136>
 8000c22:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c26:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c2a:	bf08      	it	eq
 8000c2c:	f020 0001 	biceq.w	r0, r0, #1
 8000c30:	ea40 0003 	orr.w	r0, r0, r3
 8000c34:	4770      	bx	lr
 8000c36:	0049      	lsls	r1, r1, #1
 8000c38:	eb40 0000 	adc.w	r0, r0, r0
 8000c3c:	3a01      	subs	r2, #1
 8000c3e:	bf28      	it	cs
 8000c40:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c44:	d2ed      	bcs.n	8000c22 <__addsf3+0x92>
 8000c46:	fab0 fc80 	clz	ip, r0
 8000c4a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c4e:	ebb2 020c 	subs.w	r2, r2, ip
 8000c52:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c56:	bfaa      	itet	ge
 8000c58:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c5c:	4252      	neglt	r2, r2
 8000c5e:	4318      	orrge	r0, r3
 8000c60:	bfbc      	itt	lt
 8000c62:	40d0      	lsrlt	r0, r2
 8000c64:	4318      	orrlt	r0, r3
 8000c66:	4770      	bx	lr
 8000c68:	f092 0f00 	teq	r2, #0
 8000c6c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c70:	bf06      	itte	eq
 8000c72:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c76:	3201      	addeq	r2, #1
 8000c78:	3b01      	subne	r3, #1
 8000c7a:	e7b5      	b.n	8000be8 <__addsf3+0x58>
 8000c7c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c80:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c84:	bf18      	it	ne
 8000c86:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c8a:	d021      	beq.n	8000cd0 <__addsf3+0x140>
 8000c8c:	ea92 0f03 	teq	r2, r3
 8000c90:	d004      	beq.n	8000c9c <__addsf3+0x10c>
 8000c92:	f092 0f00 	teq	r2, #0
 8000c96:	bf08      	it	eq
 8000c98:	4608      	moveq	r0, r1
 8000c9a:	4770      	bx	lr
 8000c9c:	ea90 0f01 	teq	r0, r1
 8000ca0:	bf1c      	itt	ne
 8000ca2:	2000      	movne	r0, #0
 8000ca4:	4770      	bxne	lr
 8000ca6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000caa:	d104      	bne.n	8000cb6 <__addsf3+0x126>
 8000cac:	0040      	lsls	r0, r0, #1
 8000cae:	bf28      	it	cs
 8000cb0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cb4:	4770      	bx	lr
 8000cb6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cba:	bf3c      	itt	cc
 8000cbc:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cc0:	4770      	bxcc	lr
 8000cc2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cc6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cce:	4770      	bx	lr
 8000cd0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cd4:	bf16      	itet	ne
 8000cd6:	4608      	movne	r0, r1
 8000cd8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cdc:	4601      	movne	r1, r0
 8000cde:	0242      	lsls	r2, r0, #9
 8000ce0:	bf06      	itte	eq
 8000ce2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000ce6:	ea90 0f01 	teqeq	r0, r1
 8000cea:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cee:	4770      	bx	lr

08000cf0 <__aeabi_ui2f>:
 8000cf0:	f04f 0300 	mov.w	r3, #0
 8000cf4:	e004      	b.n	8000d00 <__aeabi_i2f+0x8>
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_i2f>:
 8000cf8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cfc:	bf48      	it	mi
 8000cfe:	4240      	negmi	r0, r0
 8000d00:	ea5f 0c00 	movs.w	ip, r0
 8000d04:	bf08      	it	eq
 8000d06:	4770      	bxeq	lr
 8000d08:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d0c:	4601      	mov	r1, r0
 8000d0e:	f04f 0000 	mov.w	r0, #0
 8000d12:	e01c      	b.n	8000d4e <__aeabi_l2f+0x2a>

08000d14 <__aeabi_ul2f>:
 8000d14:	ea50 0201 	orrs.w	r2, r0, r1
 8000d18:	bf08      	it	eq
 8000d1a:	4770      	bxeq	lr
 8000d1c:	f04f 0300 	mov.w	r3, #0
 8000d20:	e00a      	b.n	8000d38 <__aeabi_l2f+0x14>
 8000d22:	bf00      	nop

08000d24 <__aeabi_l2f>:
 8000d24:	ea50 0201 	orrs.w	r2, r0, r1
 8000d28:	bf08      	it	eq
 8000d2a:	4770      	bxeq	lr
 8000d2c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d30:	d502      	bpl.n	8000d38 <__aeabi_l2f+0x14>
 8000d32:	4240      	negs	r0, r0
 8000d34:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d38:	ea5f 0c01 	movs.w	ip, r1
 8000d3c:	bf02      	ittt	eq
 8000d3e:	4684      	moveq	ip, r0
 8000d40:	4601      	moveq	r1, r0
 8000d42:	2000      	moveq	r0, #0
 8000d44:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d48:	bf08      	it	eq
 8000d4a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d4e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d52:	fabc f28c 	clz	r2, ip
 8000d56:	3a08      	subs	r2, #8
 8000d58:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d5c:	db10      	blt.n	8000d80 <__aeabi_l2f+0x5c>
 8000d5e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d62:	4463      	add	r3, ip
 8000d64:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d68:	f1c2 0220 	rsb	r2, r2, #32
 8000d6c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d70:	fa20 f202 	lsr.w	r2, r0, r2
 8000d74:	eb43 0002 	adc.w	r0, r3, r2
 8000d78:	bf08      	it	eq
 8000d7a:	f020 0001 	biceq.w	r0, r0, #1
 8000d7e:	4770      	bx	lr
 8000d80:	f102 0220 	add.w	r2, r2, #32
 8000d84:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d88:	f1c2 0220 	rsb	r2, r2, #32
 8000d8c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d90:	fa21 f202 	lsr.w	r2, r1, r2
 8000d94:	eb43 0002 	adc.w	r0, r3, r2
 8000d98:	bf08      	it	eq
 8000d9a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d9e:	4770      	bx	lr

08000da0 <__aeabi_uldivmod>:
 8000da0:	b953      	cbnz	r3, 8000db8 <__aeabi_uldivmod+0x18>
 8000da2:	b94a      	cbnz	r2, 8000db8 <__aeabi_uldivmod+0x18>
 8000da4:	2900      	cmp	r1, #0
 8000da6:	bf08      	it	eq
 8000da8:	2800      	cmpeq	r0, #0
 8000daa:	bf1c      	itt	ne
 8000dac:	f04f 31ff 	movne.w	r1, #4294967295
 8000db0:	f04f 30ff 	movne.w	r0, #4294967295
 8000db4:	f000 b96e 	b.w	8001094 <__aeabi_idiv0>
 8000db8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000dbc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000dc0:	f000 f806 	bl	8000dd0 <__udivmoddi4>
 8000dc4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000dc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000dcc:	b004      	add	sp, #16
 8000dce:	4770      	bx	lr

08000dd0 <__udivmoddi4>:
 8000dd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dd4:	9d08      	ldr	r5, [sp, #32]
 8000dd6:	4604      	mov	r4, r0
 8000dd8:	468c      	mov	ip, r1
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	f040 8083 	bne.w	8000ee6 <__udivmoddi4+0x116>
 8000de0:	428a      	cmp	r2, r1
 8000de2:	4617      	mov	r7, r2
 8000de4:	d947      	bls.n	8000e76 <__udivmoddi4+0xa6>
 8000de6:	fab2 f282 	clz	r2, r2
 8000dea:	b142      	cbz	r2, 8000dfe <__udivmoddi4+0x2e>
 8000dec:	f1c2 0020 	rsb	r0, r2, #32
 8000df0:	fa24 f000 	lsr.w	r0, r4, r0
 8000df4:	4091      	lsls	r1, r2
 8000df6:	4097      	lsls	r7, r2
 8000df8:	ea40 0c01 	orr.w	ip, r0, r1
 8000dfc:	4094      	lsls	r4, r2
 8000dfe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000e02:	0c23      	lsrs	r3, r4, #16
 8000e04:	fbbc f6f8 	udiv	r6, ip, r8
 8000e08:	fa1f fe87 	uxth.w	lr, r7
 8000e0c:	fb08 c116 	mls	r1, r8, r6, ip
 8000e10:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e14:	fb06 f10e 	mul.w	r1, r6, lr
 8000e18:	4299      	cmp	r1, r3
 8000e1a:	d909      	bls.n	8000e30 <__udivmoddi4+0x60>
 8000e1c:	18fb      	adds	r3, r7, r3
 8000e1e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e22:	f080 8119 	bcs.w	8001058 <__udivmoddi4+0x288>
 8000e26:	4299      	cmp	r1, r3
 8000e28:	f240 8116 	bls.w	8001058 <__udivmoddi4+0x288>
 8000e2c:	3e02      	subs	r6, #2
 8000e2e:	443b      	add	r3, r7
 8000e30:	1a5b      	subs	r3, r3, r1
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e38:	fb08 3310 	mls	r3, r8, r0, r3
 8000e3c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e44:	45a6      	cmp	lr, r4
 8000e46:	d909      	bls.n	8000e5c <__udivmoddi4+0x8c>
 8000e48:	193c      	adds	r4, r7, r4
 8000e4a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e4e:	f080 8105 	bcs.w	800105c <__udivmoddi4+0x28c>
 8000e52:	45a6      	cmp	lr, r4
 8000e54:	f240 8102 	bls.w	800105c <__udivmoddi4+0x28c>
 8000e58:	3802      	subs	r0, #2
 8000e5a:	443c      	add	r4, r7
 8000e5c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e60:	eba4 040e 	sub.w	r4, r4, lr
 8000e64:	2600      	movs	r6, #0
 8000e66:	b11d      	cbz	r5, 8000e70 <__udivmoddi4+0xa0>
 8000e68:	40d4      	lsrs	r4, r2
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	e9c5 4300 	strd	r4, r3, [r5]
 8000e70:	4631      	mov	r1, r6
 8000e72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e76:	b902      	cbnz	r2, 8000e7a <__udivmoddi4+0xaa>
 8000e78:	deff      	udf	#255	; 0xff
 8000e7a:	fab2 f282 	clz	r2, r2
 8000e7e:	2a00      	cmp	r2, #0
 8000e80:	d150      	bne.n	8000f24 <__udivmoddi4+0x154>
 8000e82:	1bcb      	subs	r3, r1, r7
 8000e84:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e88:	fa1f f887 	uxth.w	r8, r7
 8000e8c:	2601      	movs	r6, #1
 8000e8e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e92:	0c21      	lsrs	r1, r4, #16
 8000e94:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e98:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e9c:	fb08 f30c 	mul.w	r3, r8, ip
 8000ea0:	428b      	cmp	r3, r1
 8000ea2:	d907      	bls.n	8000eb4 <__udivmoddi4+0xe4>
 8000ea4:	1879      	adds	r1, r7, r1
 8000ea6:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000eaa:	d202      	bcs.n	8000eb2 <__udivmoddi4+0xe2>
 8000eac:	428b      	cmp	r3, r1
 8000eae:	f200 80e9 	bhi.w	8001084 <__udivmoddi4+0x2b4>
 8000eb2:	4684      	mov	ip, r0
 8000eb4:	1ac9      	subs	r1, r1, r3
 8000eb6:	b2a3      	uxth	r3, r4
 8000eb8:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ebc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ec0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ec4:	fb08 f800 	mul.w	r8, r8, r0
 8000ec8:	45a0      	cmp	r8, r4
 8000eca:	d907      	bls.n	8000edc <__udivmoddi4+0x10c>
 8000ecc:	193c      	adds	r4, r7, r4
 8000ece:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ed2:	d202      	bcs.n	8000eda <__udivmoddi4+0x10a>
 8000ed4:	45a0      	cmp	r8, r4
 8000ed6:	f200 80d9 	bhi.w	800108c <__udivmoddi4+0x2bc>
 8000eda:	4618      	mov	r0, r3
 8000edc:	eba4 0408 	sub.w	r4, r4, r8
 8000ee0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ee4:	e7bf      	b.n	8000e66 <__udivmoddi4+0x96>
 8000ee6:	428b      	cmp	r3, r1
 8000ee8:	d909      	bls.n	8000efe <__udivmoddi4+0x12e>
 8000eea:	2d00      	cmp	r5, #0
 8000eec:	f000 80b1 	beq.w	8001052 <__udivmoddi4+0x282>
 8000ef0:	2600      	movs	r6, #0
 8000ef2:	e9c5 0100 	strd	r0, r1, [r5]
 8000ef6:	4630      	mov	r0, r6
 8000ef8:	4631      	mov	r1, r6
 8000efa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000efe:	fab3 f683 	clz	r6, r3
 8000f02:	2e00      	cmp	r6, #0
 8000f04:	d14a      	bne.n	8000f9c <__udivmoddi4+0x1cc>
 8000f06:	428b      	cmp	r3, r1
 8000f08:	d302      	bcc.n	8000f10 <__udivmoddi4+0x140>
 8000f0a:	4282      	cmp	r2, r0
 8000f0c:	f200 80b8 	bhi.w	8001080 <__udivmoddi4+0x2b0>
 8000f10:	1a84      	subs	r4, r0, r2
 8000f12:	eb61 0103 	sbc.w	r1, r1, r3
 8000f16:	2001      	movs	r0, #1
 8000f18:	468c      	mov	ip, r1
 8000f1a:	2d00      	cmp	r5, #0
 8000f1c:	d0a8      	beq.n	8000e70 <__udivmoddi4+0xa0>
 8000f1e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000f22:	e7a5      	b.n	8000e70 <__udivmoddi4+0xa0>
 8000f24:	f1c2 0320 	rsb	r3, r2, #32
 8000f28:	fa20 f603 	lsr.w	r6, r0, r3
 8000f2c:	4097      	lsls	r7, r2
 8000f2e:	fa01 f002 	lsl.w	r0, r1, r2
 8000f32:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f36:	40d9      	lsrs	r1, r3
 8000f38:	4330      	orrs	r0, r6
 8000f3a:	0c03      	lsrs	r3, r0, #16
 8000f3c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000f40:	fa1f f887 	uxth.w	r8, r7
 8000f44:	fb0e 1116 	mls	r1, lr, r6, r1
 8000f48:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f4c:	fb06 f108 	mul.w	r1, r6, r8
 8000f50:	4299      	cmp	r1, r3
 8000f52:	fa04 f402 	lsl.w	r4, r4, r2
 8000f56:	d909      	bls.n	8000f6c <__udivmoddi4+0x19c>
 8000f58:	18fb      	adds	r3, r7, r3
 8000f5a:	f106 3cff 	add.w	ip, r6, #4294967295
 8000f5e:	f080 808d 	bcs.w	800107c <__udivmoddi4+0x2ac>
 8000f62:	4299      	cmp	r1, r3
 8000f64:	f240 808a 	bls.w	800107c <__udivmoddi4+0x2ac>
 8000f68:	3e02      	subs	r6, #2
 8000f6a:	443b      	add	r3, r7
 8000f6c:	1a5b      	subs	r3, r3, r1
 8000f6e:	b281      	uxth	r1, r0
 8000f70:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f74:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f78:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f7c:	fb00 f308 	mul.w	r3, r0, r8
 8000f80:	428b      	cmp	r3, r1
 8000f82:	d907      	bls.n	8000f94 <__udivmoddi4+0x1c4>
 8000f84:	1879      	adds	r1, r7, r1
 8000f86:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f8a:	d273      	bcs.n	8001074 <__udivmoddi4+0x2a4>
 8000f8c:	428b      	cmp	r3, r1
 8000f8e:	d971      	bls.n	8001074 <__udivmoddi4+0x2a4>
 8000f90:	3802      	subs	r0, #2
 8000f92:	4439      	add	r1, r7
 8000f94:	1acb      	subs	r3, r1, r3
 8000f96:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f9a:	e778      	b.n	8000e8e <__udivmoddi4+0xbe>
 8000f9c:	f1c6 0c20 	rsb	ip, r6, #32
 8000fa0:	fa03 f406 	lsl.w	r4, r3, r6
 8000fa4:	fa22 f30c 	lsr.w	r3, r2, ip
 8000fa8:	431c      	orrs	r4, r3
 8000faa:	fa20 f70c 	lsr.w	r7, r0, ip
 8000fae:	fa01 f306 	lsl.w	r3, r1, r6
 8000fb2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000fb6:	fa21 f10c 	lsr.w	r1, r1, ip
 8000fba:	431f      	orrs	r7, r3
 8000fbc:	0c3b      	lsrs	r3, r7, #16
 8000fbe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fc2:	fa1f f884 	uxth.w	r8, r4
 8000fc6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000fce:	fb09 fa08 	mul.w	sl, r9, r8
 8000fd2:	458a      	cmp	sl, r1
 8000fd4:	fa02 f206 	lsl.w	r2, r2, r6
 8000fd8:	fa00 f306 	lsl.w	r3, r0, r6
 8000fdc:	d908      	bls.n	8000ff0 <__udivmoddi4+0x220>
 8000fde:	1861      	adds	r1, r4, r1
 8000fe0:	f109 30ff 	add.w	r0, r9, #4294967295
 8000fe4:	d248      	bcs.n	8001078 <__udivmoddi4+0x2a8>
 8000fe6:	458a      	cmp	sl, r1
 8000fe8:	d946      	bls.n	8001078 <__udivmoddi4+0x2a8>
 8000fea:	f1a9 0902 	sub.w	r9, r9, #2
 8000fee:	4421      	add	r1, r4
 8000ff0:	eba1 010a 	sub.w	r1, r1, sl
 8000ff4:	b2bf      	uxth	r7, r7
 8000ff6:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ffa:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ffe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8001002:	fb00 f808 	mul.w	r8, r0, r8
 8001006:	45b8      	cmp	r8, r7
 8001008:	d907      	bls.n	800101a <__udivmoddi4+0x24a>
 800100a:	19e7      	adds	r7, r4, r7
 800100c:	f100 31ff 	add.w	r1, r0, #4294967295
 8001010:	d22e      	bcs.n	8001070 <__udivmoddi4+0x2a0>
 8001012:	45b8      	cmp	r8, r7
 8001014:	d92c      	bls.n	8001070 <__udivmoddi4+0x2a0>
 8001016:	3802      	subs	r0, #2
 8001018:	4427      	add	r7, r4
 800101a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800101e:	eba7 0708 	sub.w	r7, r7, r8
 8001022:	fba0 8902 	umull	r8, r9, r0, r2
 8001026:	454f      	cmp	r7, r9
 8001028:	46c6      	mov	lr, r8
 800102a:	4649      	mov	r1, r9
 800102c:	d31a      	bcc.n	8001064 <__udivmoddi4+0x294>
 800102e:	d017      	beq.n	8001060 <__udivmoddi4+0x290>
 8001030:	b15d      	cbz	r5, 800104a <__udivmoddi4+0x27a>
 8001032:	ebb3 020e 	subs.w	r2, r3, lr
 8001036:	eb67 0701 	sbc.w	r7, r7, r1
 800103a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800103e:	40f2      	lsrs	r2, r6
 8001040:	ea4c 0202 	orr.w	r2, ip, r2
 8001044:	40f7      	lsrs	r7, r6
 8001046:	e9c5 2700 	strd	r2, r7, [r5]
 800104a:	2600      	movs	r6, #0
 800104c:	4631      	mov	r1, r6
 800104e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001052:	462e      	mov	r6, r5
 8001054:	4628      	mov	r0, r5
 8001056:	e70b      	b.n	8000e70 <__udivmoddi4+0xa0>
 8001058:	4606      	mov	r6, r0
 800105a:	e6e9      	b.n	8000e30 <__udivmoddi4+0x60>
 800105c:	4618      	mov	r0, r3
 800105e:	e6fd      	b.n	8000e5c <__udivmoddi4+0x8c>
 8001060:	4543      	cmp	r3, r8
 8001062:	d2e5      	bcs.n	8001030 <__udivmoddi4+0x260>
 8001064:	ebb8 0e02 	subs.w	lr, r8, r2
 8001068:	eb69 0104 	sbc.w	r1, r9, r4
 800106c:	3801      	subs	r0, #1
 800106e:	e7df      	b.n	8001030 <__udivmoddi4+0x260>
 8001070:	4608      	mov	r0, r1
 8001072:	e7d2      	b.n	800101a <__udivmoddi4+0x24a>
 8001074:	4660      	mov	r0, ip
 8001076:	e78d      	b.n	8000f94 <__udivmoddi4+0x1c4>
 8001078:	4681      	mov	r9, r0
 800107a:	e7b9      	b.n	8000ff0 <__udivmoddi4+0x220>
 800107c:	4666      	mov	r6, ip
 800107e:	e775      	b.n	8000f6c <__udivmoddi4+0x19c>
 8001080:	4630      	mov	r0, r6
 8001082:	e74a      	b.n	8000f1a <__udivmoddi4+0x14a>
 8001084:	f1ac 0c02 	sub.w	ip, ip, #2
 8001088:	4439      	add	r1, r7
 800108a:	e713      	b.n	8000eb4 <__udivmoddi4+0xe4>
 800108c:	3802      	subs	r0, #2
 800108e:	443c      	add	r4, r7
 8001090:	e724      	b.n	8000edc <__udivmoddi4+0x10c>
 8001092:	bf00      	nop

08001094 <__aeabi_idiv0>:
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop

08001098 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001098:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800109c:	ed2d 8b02 	vpush	{d8}
 80010a0:	b09a      	sub	sp, #104	; 0x68
 80010a2:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80010a4:	f001 fd18 	bl	8002ad8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80010a8:	f000 ffde 	bl	8002068 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80010ac:	f001 f9b0 	bl	8002410 <MX_GPIO_Init>
	MX_DMA_Init();
 80010b0:	f001 f98e 	bl	80023d0 <MX_DMA_Init>
	MX_USART2_UART_Init();
 80010b4:	f001 f962 	bl	800237c <MX_USART2_UART_Init>
	MX_SPI3_Init();
 80010b8:	f001 f890 	bl	80021dc <MX_SPI3_Init>
	MX_ADC1_Init();
 80010bc:	f001 f83c 	bl	8002138 <MX_ADC1_Init>
	MX_TIM3_Init();
 80010c0:	f001 f910 	bl	80022e4 <MX_TIM3_Init>
	MX_TIM2_Init();
 80010c4:	f001 f8c2 	bl	800224c <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim3);
 80010c8:	48a5      	ldr	r0, [pc, #660]	; (8001360 <main+0x2c8>)
 80010ca:	f004 f9ff 	bl	80054cc <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim2);
 80010ce:	48a5      	ldr	r0, [pc, #660]	; (8001364 <main+0x2cc>)
 80010d0:	f004 fa56 	bl	8005580 <HAL_TIM_Base_Start_IT>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &ADCin, 1);
 80010d4:	2201      	movs	r2, #1
 80010d6:	49a4      	ldr	r1, [pc, #656]	; (8001368 <main+0x2d0>)
 80010d8:	48a4      	ldr	r0, [pc, #656]	; (800136c <main+0x2d4>)
 80010da:	f001 fef3 	bl	8002ec4 <HAL_ADC_Start_DMA>

	HAL_GPIO_WritePin(LOAD_GPIO_Port, LOAD_Pin, GPIO_PIN_RESET); // SET DAC low , A
 80010de:	2200      	movs	r2, #0
 80010e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010e4:	48a2      	ldr	r0, [pc, #648]	; (8001370 <main+0x2d8>)
 80010e6:	f003 f96f 	bl	80043c8 <HAL_GPIO_WritePin>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		HAL_UART_Receive_IT(&huart2, (uint8_t*) RxDataBuffer, 32);
 80010ea:	2220      	movs	r2, #32
 80010ec:	49a1      	ldr	r1, [pc, #644]	; (8001374 <main+0x2dc>)
 80010ee:	48a2      	ldr	r0, [pc, #648]	; (8001378 <main+0x2e0>)
 80010f0:	f004 ff17 	bl	8005f22 <HAL_UART_Receive_IT>
		inputchar = UARTRecieveIT();
 80010f4:	f001 fa2c 	bl	8002550 <UARTRecieveIT>
 80010f8:	4603      	mov	r3, r0
 80010fa:	4aa0      	ldr	r2, [pc, #640]	; (800137c <main+0x2e4>)
 80010fc:	8013      	strh	r3, [r2, #0]
//		static uint64_t timestamp = 0;
		switch (State) {
 80010fe:	4ba0      	ldr	r3, [pc, #640]	; (8001380 <main+0x2e8>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	2b09      	cmp	r3, #9
 8001104:	f200 8474 	bhi.w	80019f0 <main+0x958>
 8001108:	a201      	add	r2, pc, #4	; (adr r2, 8001110 <main+0x78>)
 800110a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800110e:	bf00      	nop
 8001110:	08001139 	.word	0x08001139
 8001114:	08001157 	.word	0x08001157
 8001118:	0800120b 	.word	0x0800120b
 800111c:	080013b5 	.word	0x080013b5
 8001120:	080014d1 	.word	0x080014d1
 8001124:	08001613 	.word	0x08001613
 8001128:	080016fb 	.word	0x080016fb
 800112c:	080017e3 	.word	0x080017e3
 8001130:	080018cb 	.word	0x080018cb
 8001134:	08001941 	.word	0x08001941
		case 0:
			HAL_UART_Transmit(&huart2, (uint8_t*) Menu_Start1,
					strlen(Menu_Start1), 10);
 8001138:	4892      	ldr	r0, [pc, #584]	; (8001384 <main+0x2ec>)
 800113a:	f7ff f84d 	bl	80001d8 <strlen>
 800113e:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart2, (uint8_t*) Menu_Start1,
 8001140:	b29a      	uxth	r2, r3
 8001142:	230a      	movs	r3, #10
 8001144:	498f      	ldr	r1, [pc, #572]	; (8001384 <main+0x2ec>)
 8001146:	488c      	ldr	r0, [pc, #560]	; (8001378 <main+0x2e0>)
 8001148:	f004 fe59 	bl	8005dfe <HAL_UART_Transmit>
			State = Select_waveform;
 800114c:	4a8c      	ldr	r2, [pc, #560]	; (8001380 <main+0x2e8>)
 800114e:	2301      	movs	r3, #1
 8001150:	6013      	str	r3, [r2, #0]
			break;
 8001152:	f000 bc4d 	b.w	80019f0 <main+0x958>
		case Select_waveform:
			if (inputchar == '0') {
 8001156:	4b89      	ldr	r3, [pc, #548]	; (800137c <main+0x2e4>)
 8001158:	f9b3 3000 	ldrsh.w	r3, [r3]
 800115c:	2b30      	cmp	r3, #48	; 0x30
 800115e:	d10e      	bne.n	800117e <main+0xe6>
				HAL_UART_Transmit(&huart2, (uint8_t*) saw_tooth,
						strlen(saw_tooth), 10);
 8001160:	4889      	ldr	r0, [pc, #548]	; (8001388 <main+0x2f0>)
 8001162:	f7ff f839 	bl	80001d8 <strlen>
 8001166:	4603      	mov	r3, r0
				HAL_UART_Transmit(&huart2, (uint8_t*) saw_tooth,
 8001168:	b29a      	uxth	r2, r3
 800116a:	230a      	movs	r3, #10
 800116c:	4986      	ldr	r1, [pc, #536]	; (8001388 <main+0x2f0>)
 800116e:	4882      	ldr	r0, [pc, #520]	; (8001378 <main+0x2e0>)
 8001170:	f004 fe45 	bl	8005dfe <HAL_UART_Transmit>
				State = Saw_tooth;
 8001174:	4a82      	ldr	r2, [pc, #520]	; (8001380 <main+0x2e8>)
 8001176:	2302      	movs	r3, #2
 8001178:	6013      	str	r3, [r2, #0]
			} else if (inputchar != -1
					&& (inputchar != '0' || inputchar != '1' || inputchar != '2')) {
				HAL_UART_Transmit(&huart2, (uint8_t*) "Error\r\n",
						strlen("Error\r\n"), 10);
			}
			break;
 800117a:	f000 bc2c 	b.w	80019d6 <main+0x93e>
			} else if (inputchar == '1') {
 800117e:	4b7f      	ldr	r3, [pc, #508]	; (800137c <main+0x2e4>)
 8001180:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001184:	2b31      	cmp	r3, #49	; 0x31
 8001186:	d10e      	bne.n	80011a6 <main+0x10e>
						strlen(sin_wave), 10);
 8001188:	4880      	ldr	r0, [pc, #512]	; (800138c <main+0x2f4>)
 800118a:	f7ff f825 	bl	80001d8 <strlen>
 800118e:	4603      	mov	r3, r0
				HAL_UART_Transmit(&huart2, (uint8_t*) sin_wave,
 8001190:	b29a      	uxth	r2, r3
 8001192:	230a      	movs	r3, #10
 8001194:	497d      	ldr	r1, [pc, #500]	; (800138c <main+0x2f4>)
 8001196:	4878      	ldr	r0, [pc, #480]	; (8001378 <main+0x2e0>)
 8001198:	f004 fe31 	bl	8005dfe <HAL_UART_Transmit>
				State = Sine_wave;
 800119c:	4a78      	ldr	r2, [pc, #480]	; (8001380 <main+0x2e8>)
 800119e:	2303      	movs	r3, #3
 80011a0:	6013      	str	r3, [r2, #0]
			break;
 80011a2:	f000 bc18 	b.w	80019d6 <main+0x93e>
			} else if (inputchar == '2') {
 80011a6:	4b75      	ldr	r3, [pc, #468]	; (800137c <main+0x2e4>)
 80011a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011ac:	2b32      	cmp	r3, #50	; 0x32
 80011ae:	d10e      	bne.n	80011ce <main+0x136>
						strlen(sqaure_wave), 10);
 80011b0:	4877      	ldr	r0, [pc, #476]	; (8001390 <main+0x2f8>)
 80011b2:	f7ff f811 	bl	80001d8 <strlen>
 80011b6:	4603      	mov	r3, r0
				HAL_UART_Transmit(&huart2, (uint8_t*) sqaure_wave,
 80011b8:	b29a      	uxth	r2, r3
 80011ba:	230a      	movs	r3, #10
 80011bc:	4974      	ldr	r1, [pc, #464]	; (8001390 <main+0x2f8>)
 80011be:	486e      	ldr	r0, [pc, #440]	; (8001378 <main+0x2e0>)
 80011c0:	f004 fe1d 	bl	8005dfe <HAL_UART_Transmit>
				State = Square_wave;
 80011c4:	4a6e      	ldr	r2, [pc, #440]	; (8001380 <main+0x2e8>)
 80011c6:	2304      	movs	r3, #4
 80011c8:	6013      	str	r3, [r2, #0]
			break;
 80011ca:	f000 bc04 	b.w	80019d6 <main+0x93e>
			} else if (inputchar != -1
 80011ce:	4b6b      	ldr	r3, [pc, #428]	; (800137c <main+0x2e4>)
 80011d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011d8:	f000 83fd 	beq.w	80019d6 <main+0x93e>
					&& (inputchar != '0' || inputchar != '1' || inputchar != '2')) {
 80011dc:	4b67      	ldr	r3, [pc, #412]	; (800137c <main+0x2e4>)
 80011de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011e2:	2b30      	cmp	r3, #48	; 0x30
 80011e4:	d10a      	bne.n	80011fc <main+0x164>
 80011e6:	4b65      	ldr	r3, [pc, #404]	; (800137c <main+0x2e4>)
 80011e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011ec:	2b31      	cmp	r3, #49	; 0x31
 80011ee:	d105      	bne.n	80011fc <main+0x164>
 80011f0:	4b62      	ldr	r3, [pc, #392]	; (800137c <main+0x2e4>)
 80011f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011f6:	2b32      	cmp	r3, #50	; 0x32
 80011f8:	f000 83ed 	beq.w	80019d6 <main+0x93e>
				HAL_UART_Transmit(&huart2, (uint8_t*) "Error\r\n",
 80011fc:	230a      	movs	r3, #10
 80011fe:	2207      	movs	r2, #7
 8001200:	4964      	ldr	r1, [pc, #400]	; (8001394 <main+0x2fc>)
 8001202:	485d      	ldr	r0, [pc, #372]	; (8001378 <main+0x2e0>)
 8001204:	f004 fdfb 	bl	8005dfe <HAL_UART_Transmit>
			break;
 8001208:	e3e5      	b.n	80019d6 <main+0x93e>
		case Saw_tooth:
			waveform = 1;
 800120a:	4a63      	ldr	r2, [pc, #396]	; (8001398 <main+0x300>)
 800120c:	2301      	movs	r3, #1
 800120e:	6013      	str	r3, [r2, #0]
			if (inputchar == '+') {
 8001210:	4b5a      	ldr	r3, [pc, #360]	; (800137c <main+0x2e4>)
 8001212:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001216:	2b2b      	cmp	r3, #43	; 0x2b
 8001218:	d12d      	bne.n	8001276 <main+0x1de>
				HAL_UART_Transmit(&huart2, (uint8_t*) Increase_f,
						strlen(Increase_f), 10);
 800121a:	4860      	ldr	r0, [pc, #384]	; (800139c <main+0x304>)
 800121c:	f7fe ffdc 	bl	80001d8 <strlen>
 8001220:	4603      	mov	r3, r0
				HAL_UART_Transmit(&huart2, (uint8_t*) Increase_f,
 8001222:	b29a      	uxth	r2, r3
 8001224:	230a      	movs	r3, #10
 8001226:	495d      	ldr	r1, [pc, #372]	; (800139c <main+0x304>)
 8001228:	4853      	ldr	r0, [pc, #332]	; (8001378 <main+0x2e0>)
 800122a:	f004 fde8 	bl	8005dfe <HAL_UART_Transmit>
				Frequency += 0.1;
 800122e:	4b5c      	ldr	r3, [pc, #368]	; (80013a0 <main+0x308>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4618      	mov	r0, r3
 8001234:	f7ff f93c 	bl	80004b0 <__aeabi_f2d>
 8001238:	a347      	add	r3, pc, #284	; (adr r3, 8001358 <main+0x2c0>)
 800123a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800123e:	f7fe ffd9 	bl	80001f4 <__adddf3>
 8001242:	4602      	mov	r2, r0
 8001244:	460b      	mov	r3, r1
 8001246:	4610      	mov	r0, r2
 8001248:	4619      	mov	r1, r3
 800124a:	f7ff fc4b 	bl	8000ae4 <__aeabi_d2f>
 800124e:	4602      	mov	r2, r0
 8001250:	4b53      	ldr	r3, [pc, #332]	; (80013a0 <main+0x308>)
 8001252:	601a      	str	r2, [r3, #0]
				if (Frequency > 10) {
 8001254:	4b52      	ldr	r3, [pc, #328]	; (80013a0 <main+0x308>)
 8001256:	edd3 7a00 	vldr	s15, [r3]
 800125a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800125e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001262:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001266:	dd02      	ble.n	800126e <main+0x1d6>
					Frequency = 10;
 8001268:	4a4d      	ldr	r2, [pc, #308]	; (80013a0 <main+0x308>)
 800126a:	4b4e      	ldr	r3, [pc, #312]	; (80013a4 <main+0x30c>)
 800126c:	6013      	str	r3, [r2, #0]
				}
				State = Saw_tooth;
 800126e:	4a44      	ldr	r2, [pc, #272]	; (8001380 <main+0x2e8>)
 8001270:	2302      	movs	r3, #2
 8001272:	6013      	str	r3, [r2, #0]
				State = Saw_tooth;
			} else if (inputchar == '2') {
				Slope = 2;
				State = Saw_tooth;
			}
			break;
 8001274:	e3b1      	b.n	80019da <main+0x942>
			} else if (inputchar == '-') {
 8001276:	4b41      	ldr	r3, [pc, #260]	; (800137c <main+0x2e4>)
 8001278:	f9b3 3000 	ldrsh.w	r3, [r3]
 800127c:	2b2d      	cmp	r3, #45	; 0x2d
 800127e:	d12c      	bne.n	80012da <main+0x242>
						strlen(Decrease_f), 10);
 8001280:	4849      	ldr	r0, [pc, #292]	; (80013a8 <main+0x310>)
 8001282:	f7fe ffa9 	bl	80001d8 <strlen>
 8001286:	4603      	mov	r3, r0
				HAL_UART_Transmit(&huart2, (uint8_t*) Decrease_f,
 8001288:	b29a      	uxth	r2, r3
 800128a:	230a      	movs	r3, #10
 800128c:	4946      	ldr	r1, [pc, #280]	; (80013a8 <main+0x310>)
 800128e:	483a      	ldr	r0, [pc, #232]	; (8001378 <main+0x2e0>)
 8001290:	f004 fdb5 	bl	8005dfe <HAL_UART_Transmit>
				Frequency -= 0.1;
 8001294:	4b42      	ldr	r3, [pc, #264]	; (80013a0 <main+0x308>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff f909 	bl	80004b0 <__aeabi_f2d>
 800129e:	a32e      	add	r3, pc, #184	; (adr r3, 8001358 <main+0x2c0>)
 80012a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012a4:	f7fe ffa4 	bl	80001f0 <__aeabi_dsub>
 80012a8:	4602      	mov	r2, r0
 80012aa:	460b      	mov	r3, r1
 80012ac:	4610      	mov	r0, r2
 80012ae:	4619      	mov	r1, r3
 80012b0:	f7ff fc18 	bl	8000ae4 <__aeabi_d2f>
 80012b4:	4602      	mov	r2, r0
 80012b6:	4b3a      	ldr	r3, [pc, #232]	; (80013a0 <main+0x308>)
 80012b8:	601a      	str	r2, [r3, #0]
				if (Frequency < 0) {
 80012ba:	4b39      	ldr	r3, [pc, #228]	; (80013a0 <main+0x308>)
 80012bc:	edd3 7a00 	vldr	s15, [r3]
 80012c0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012c8:	d503      	bpl.n	80012d2 <main+0x23a>
					Frequency = 0;
 80012ca:	4a35      	ldr	r2, [pc, #212]	; (80013a0 <main+0x308>)
 80012cc:	f04f 0300 	mov.w	r3, #0
 80012d0:	6013      	str	r3, [r2, #0]
				State = Saw_tooth;
 80012d2:	4a2b      	ldr	r2, [pc, #172]	; (8001380 <main+0x2e8>)
 80012d4:	2302      	movs	r3, #2
 80012d6:	6013      	str	r3, [r2, #0]
			break;
 80012d8:	e37f      	b.n	80019da <main+0x942>
			} else if (inputchar == 'x') {
 80012da:	4b28      	ldr	r3, [pc, #160]	; (800137c <main+0x2e4>)
 80012dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012e0:	2b78      	cmp	r3, #120	; 0x78
 80012e2:	d10d      	bne.n	8001300 <main+0x268>
						strlen(Menu_Start1), 10);
 80012e4:	4827      	ldr	r0, [pc, #156]	; (8001384 <main+0x2ec>)
 80012e6:	f7fe ff77 	bl	80001d8 <strlen>
 80012ea:	4603      	mov	r3, r0
				HAL_UART_Transmit(&huart2, (uint8_t*) Menu_Start1,
 80012ec:	b29a      	uxth	r2, r3
 80012ee:	230a      	movs	r3, #10
 80012f0:	4924      	ldr	r1, [pc, #144]	; (8001384 <main+0x2ec>)
 80012f2:	4821      	ldr	r0, [pc, #132]	; (8001378 <main+0x2e0>)
 80012f4:	f004 fd83 	bl	8005dfe <HAL_UART_Transmit>
				State = Select_waveform;
 80012f8:	4a21      	ldr	r2, [pc, #132]	; (8001380 <main+0x2e8>)
 80012fa:	2301      	movs	r3, #1
 80012fc:	6013      	str	r3, [r2, #0]
			break;
 80012fe:	e36c      	b.n	80019da <main+0x942>
			} else if (inputchar == 'v') {
 8001300:	4b1e      	ldr	r3, [pc, #120]	; (800137c <main+0x2e4>)
 8001302:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001306:	2b76      	cmp	r3, #118	; 0x76
 8001308:	d10d      	bne.n	8001326 <main+0x28e>
						strlen(set_voltage), 10);
 800130a:	4828      	ldr	r0, [pc, #160]	; (80013ac <main+0x314>)
 800130c:	f7fe ff64 	bl	80001d8 <strlen>
 8001310:	4603      	mov	r3, r0
				HAL_UART_Transmit(&huart2, (uint8_t*) set_voltage,
 8001312:	b29a      	uxth	r2, r3
 8001314:	230a      	movs	r3, #10
 8001316:	4925      	ldr	r1, [pc, #148]	; (80013ac <main+0x314>)
 8001318:	4817      	ldr	r0, [pc, #92]	; (8001378 <main+0x2e0>)
 800131a:	f004 fd70 	bl	8005dfe <HAL_UART_Transmit>
				State = Set_voltage;
 800131e:	4a18      	ldr	r2, [pc, #96]	; (8001380 <main+0x2e8>)
 8001320:	2305      	movs	r3, #5
 8001322:	6013      	str	r3, [r2, #0]
			break;
 8001324:	e359      	b.n	80019da <main+0x942>
			} else if (inputchar == '1') {
 8001326:	4b15      	ldr	r3, [pc, #84]	; (800137c <main+0x2e4>)
 8001328:	f9b3 3000 	ldrsh.w	r3, [r3]
 800132c:	2b31      	cmp	r3, #49	; 0x31
 800132e:	d106      	bne.n	800133e <main+0x2a6>
				Slope = 1;
 8001330:	4a1f      	ldr	r2, [pc, #124]	; (80013b0 <main+0x318>)
 8001332:	2301      	movs	r3, #1
 8001334:	6013      	str	r3, [r2, #0]
				State = Saw_tooth;
 8001336:	4a12      	ldr	r2, [pc, #72]	; (8001380 <main+0x2e8>)
 8001338:	2302      	movs	r3, #2
 800133a:	6013      	str	r3, [r2, #0]
			break;
 800133c:	e34d      	b.n	80019da <main+0x942>
			} else if (inputchar == '2') {
 800133e:	4b0f      	ldr	r3, [pc, #60]	; (800137c <main+0x2e4>)
 8001340:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001344:	2b32      	cmp	r3, #50	; 0x32
 8001346:	f040 8348 	bne.w	80019da <main+0x942>
				Slope = 2;
 800134a:	4a19      	ldr	r2, [pc, #100]	; (80013b0 <main+0x318>)
 800134c:	2302      	movs	r3, #2
 800134e:	6013      	str	r3, [r2, #0]
				State = Saw_tooth;
 8001350:	4a0b      	ldr	r2, [pc, #44]	; (8001380 <main+0x2e8>)
 8001352:	2302      	movs	r3, #2
 8001354:	6013      	str	r3, [r2, #0]
			break;
 8001356:	e340      	b.n	80019da <main+0x942>
 8001358:	9999999a 	.word	0x9999999a
 800135c:	3fb99999 	.word	0x3fb99999
 8001360:	200002d0 	.word	0x200002d0
 8001364:	20000418 	.word	0x20000418
 8001368:	2000028c 	.word	0x2000028c
 800136c:	20000370 	.word	0x20000370
 8001370:	40020000 	.word	0x40020000
 8001374:	2000026c 	.word	0x2000026c
 8001378:	20000460 	.word	0x20000460
 800137c:	200002cc 	.word	0x200002cc
 8001380:	200002a0 	.word	0x200002a0
 8001384:	20000014 	.word	0x20000014
 8001388:	20000080 	.word	0x20000080
 800138c:	20000168 	.word	0x20000168
 8001390:	200001cc 	.word	0x200001cc
 8001394:	08007b28 	.word	0x08007b28
 8001398:	200002a4 	.word	0x200002a4
 800139c:	20000050 	.word	0x20000050
 80013a0:	20000004 	.word	0x20000004
 80013a4:	41200000 	.word	0x41200000
 80013a8:	20000068 	.word	0x20000068
 80013ac:	200000fc 	.word	0x200000fc
 80013b0:	20000008 	.word	0x20000008
		case Sine_wave:
			waveform = 2;
 80013b4:	4aa0      	ldr	r2, [pc, #640]	; (8001638 <main+0x5a0>)
 80013b6:	2302      	movs	r3, #2
 80013b8:	6013      	str	r3, [r2, #0]
			if (inputchar == '+') {
 80013ba:	4ba0      	ldr	r3, [pc, #640]	; (800163c <main+0x5a4>)
 80013bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013c0:	2b2b      	cmp	r3, #43	; 0x2b
 80013c2:	d12d      	bne.n	8001420 <main+0x388>
				HAL_UART_Transmit(&huart2, (uint8_t*) Increase_f,
						strlen(Increase_f), 10);
 80013c4:	489e      	ldr	r0, [pc, #632]	; (8001640 <main+0x5a8>)
 80013c6:	f7fe ff07 	bl	80001d8 <strlen>
 80013ca:	4603      	mov	r3, r0
				HAL_UART_Transmit(&huart2, (uint8_t*) Increase_f,
 80013cc:	b29a      	uxth	r2, r3
 80013ce:	230a      	movs	r3, #10
 80013d0:	499b      	ldr	r1, [pc, #620]	; (8001640 <main+0x5a8>)
 80013d2:	489c      	ldr	r0, [pc, #624]	; (8001644 <main+0x5ac>)
 80013d4:	f004 fd13 	bl	8005dfe <HAL_UART_Transmit>
				Frequency += 0.1;
 80013d8:	4b9b      	ldr	r3, [pc, #620]	; (8001648 <main+0x5b0>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff f867 	bl	80004b0 <__aeabi_f2d>
 80013e2:	a393      	add	r3, pc, #588	; (adr r3, 8001630 <main+0x598>)
 80013e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013e8:	f7fe ff04 	bl	80001f4 <__adddf3>
 80013ec:	4602      	mov	r2, r0
 80013ee:	460b      	mov	r3, r1
 80013f0:	4610      	mov	r0, r2
 80013f2:	4619      	mov	r1, r3
 80013f4:	f7ff fb76 	bl	8000ae4 <__aeabi_d2f>
 80013f8:	4602      	mov	r2, r0
 80013fa:	4b93      	ldr	r3, [pc, #588]	; (8001648 <main+0x5b0>)
 80013fc:	601a      	str	r2, [r3, #0]
				if (Frequency > 10) {
 80013fe:	4b92      	ldr	r3, [pc, #584]	; (8001648 <main+0x5b0>)
 8001400:	edd3 7a00 	vldr	s15, [r3]
 8001404:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001408:	eef4 7ac7 	vcmpe.f32	s15, s14
 800140c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001410:	dd02      	ble.n	8001418 <main+0x380>
					Frequency = 10;
 8001412:	4a8d      	ldr	r2, [pc, #564]	; (8001648 <main+0x5b0>)
 8001414:	4b8d      	ldr	r3, [pc, #564]	; (800164c <main+0x5b4>)
 8001416:	6013      	str	r3, [r2, #0]
				}
				State = Sine_wave;
 8001418:	4a8d      	ldr	r2, [pc, #564]	; (8001650 <main+0x5b8>)
 800141a:	2303      	movs	r3, #3
 800141c:	6013      	str	r3, [r2, #0]
 800141e:	e043      	b.n	80014a8 <main+0x410>
			} else if (inputchar == '-') {
 8001420:	4b86      	ldr	r3, [pc, #536]	; (800163c <main+0x5a4>)
 8001422:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001426:	2b2d      	cmp	r3, #45	; 0x2d
 8001428:	d12c      	bne.n	8001484 <main+0x3ec>
				HAL_UART_Transmit(&huart2, (uint8_t*) Decrease_f,
						strlen(Decrease_f), 10);
 800142a:	488a      	ldr	r0, [pc, #552]	; (8001654 <main+0x5bc>)
 800142c:	f7fe fed4 	bl	80001d8 <strlen>
 8001430:	4603      	mov	r3, r0
				HAL_UART_Transmit(&huart2, (uint8_t*) Decrease_f,
 8001432:	b29a      	uxth	r2, r3
 8001434:	230a      	movs	r3, #10
 8001436:	4987      	ldr	r1, [pc, #540]	; (8001654 <main+0x5bc>)
 8001438:	4882      	ldr	r0, [pc, #520]	; (8001644 <main+0x5ac>)
 800143a:	f004 fce0 	bl	8005dfe <HAL_UART_Transmit>
				Frequency -= 0.1;
 800143e:	4b82      	ldr	r3, [pc, #520]	; (8001648 <main+0x5b0>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4618      	mov	r0, r3
 8001444:	f7ff f834 	bl	80004b0 <__aeabi_f2d>
 8001448:	a379      	add	r3, pc, #484	; (adr r3, 8001630 <main+0x598>)
 800144a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800144e:	f7fe fecf 	bl	80001f0 <__aeabi_dsub>
 8001452:	4602      	mov	r2, r0
 8001454:	460b      	mov	r3, r1
 8001456:	4610      	mov	r0, r2
 8001458:	4619      	mov	r1, r3
 800145a:	f7ff fb43 	bl	8000ae4 <__aeabi_d2f>
 800145e:	4602      	mov	r2, r0
 8001460:	4b79      	ldr	r3, [pc, #484]	; (8001648 <main+0x5b0>)
 8001462:	601a      	str	r2, [r3, #0]
				if (Frequency < 0) {
 8001464:	4b78      	ldr	r3, [pc, #480]	; (8001648 <main+0x5b0>)
 8001466:	edd3 7a00 	vldr	s15, [r3]
 800146a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800146e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001472:	d503      	bpl.n	800147c <main+0x3e4>
					Frequency = 0;
 8001474:	4a74      	ldr	r2, [pc, #464]	; (8001648 <main+0x5b0>)
 8001476:	f04f 0300 	mov.w	r3, #0
 800147a:	6013      	str	r3, [r2, #0]
				}
				State = Sine_wave;
 800147c:	4a74      	ldr	r2, [pc, #464]	; (8001650 <main+0x5b8>)
 800147e:	2303      	movs	r3, #3
 8001480:	6013      	str	r3, [r2, #0]
 8001482:	e011      	b.n	80014a8 <main+0x410>
			} else if (inputchar == 'v') {
 8001484:	4b6d      	ldr	r3, [pc, #436]	; (800163c <main+0x5a4>)
 8001486:	f9b3 3000 	ldrsh.w	r3, [r3]
 800148a:	2b76      	cmp	r3, #118	; 0x76
 800148c:	d10c      	bne.n	80014a8 <main+0x410>
				HAL_UART_Transmit(&huart2, (uint8_t*) set_voltage,
						strlen(set_voltage), 10);
 800148e:	4872      	ldr	r0, [pc, #456]	; (8001658 <main+0x5c0>)
 8001490:	f7fe fea2 	bl	80001d8 <strlen>
 8001494:	4603      	mov	r3, r0
				HAL_UART_Transmit(&huart2, (uint8_t*) set_voltage,
 8001496:	b29a      	uxth	r2, r3
 8001498:	230a      	movs	r3, #10
 800149a:	496f      	ldr	r1, [pc, #444]	; (8001658 <main+0x5c0>)
 800149c:	4869      	ldr	r0, [pc, #420]	; (8001644 <main+0x5ac>)
 800149e:	f004 fcae 	bl	8005dfe <HAL_UART_Transmit>
				State = Set_voltage;
 80014a2:	4a6b      	ldr	r2, [pc, #428]	; (8001650 <main+0x5b8>)
 80014a4:	2305      	movs	r3, #5
 80014a6:	6013      	str	r3, [r2, #0]
			}
			if (inputchar == 'x') {
 80014a8:	4b64      	ldr	r3, [pc, #400]	; (800163c <main+0x5a4>)
 80014aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014ae:	2b78      	cmp	r3, #120	; 0x78
 80014b0:	f040 8295 	bne.w	80019de <main+0x946>
				HAL_UART_Transmit(&huart2, (uint8_t*) Menu_Start1,
						strlen(Menu_Start1), 10);
 80014b4:	4869      	ldr	r0, [pc, #420]	; (800165c <main+0x5c4>)
 80014b6:	f7fe fe8f 	bl	80001d8 <strlen>
 80014ba:	4603      	mov	r3, r0
				HAL_UART_Transmit(&huart2, (uint8_t*) Menu_Start1,
 80014bc:	b29a      	uxth	r2, r3
 80014be:	230a      	movs	r3, #10
 80014c0:	4966      	ldr	r1, [pc, #408]	; (800165c <main+0x5c4>)
 80014c2:	4860      	ldr	r0, [pc, #384]	; (8001644 <main+0x5ac>)
 80014c4:	f004 fc9b 	bl	8005dfe <HAL_UART_Transmit>
				State = Select_waveform;
 80014c8:	4a61      	ldr	r2, [pc, #388]	; (8001650 <main+0x5b8>)
 80014ca:	2301      	movs	r3, #1
 80014cc:	6013      	str	r3, [r2, #0]
			}
			break;
 80014ce:	e286      	b.n	80019de <main+0x946>
		case Square_wave:
			waveform = 3;
 80014d0:	4a59      	ldr	r2, [pc, #356]	; (8001638 <main+0x5a0>)
 80014d2:	2303      	movs	r3, #3
 80014d4:	6013      	str	r3, [r2, #0]
			if (inputchar == '+') {
 80014d6:	4b59      	ldr	r3, [pc, #356]	; (800163c <main+0x5a4>)
 80014d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014dc:	2b2b      	cmp	r3, #43	; 0x2b
 80014de:	d12d      	bne.n	800153c <main+0x4a4>
				HAL_UART_Transmit(&huart2, (uint8_t*) Increase_f,
						strlen(Increase_f), 10);
 80014e0:	4857      	ldr	r0, [pc, #348]	; (8001640 <main+0x5a8>)
 80014e2:	f7fe fe79 	bl	80001d8 <strlen>
 80014e6:	4603      	mov	r3, r0
				HAL_UART_Transmit(&huart2, (uint8_t*) Increase_f,
 80014e8:	b29a      	uxth	r2, r3
 80014ea:	230a      	movs	r3, #10
 80014ec:	4954      	ldr	r1, [pc, #336]	; (8001640 <main+0x5a8>)
 80014ee:	4855      	ldr	r0, [pc, #340]	; (8001644 <main+0x5ac>)
 80014f0:	f004 fc85 	bl	8005dfe <HAL_UART_Transmit>
				Frequency += 0.1;
 80014f4:	4b54      	ldr	r3, [pc, #336]	; (8001648 <main+0x5b0>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7fe ffd9 	bl	80004b0 <__aeabi_f2d>
 80014fe:	a34c      	add	r3, pc, #304	; (adr r3, 8001630 <main+0x598>)
 8001500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001504:	f7fe fe76 	bl	80001f4 <__adddf3>
 8001508:	4602      	mov	r2, r0
 800150a:	460b      	mov	r3, r1
 800150c:	4610      	mov	r0, r2
 800150e:	4619      	mov	r1, r3
 8001510:	f7ff fae8 	bl	8000ae4 <__aeabi_d2f>
 8001514:	4602      	mov	r2, r0
 8001516:	4b4c      	ldr	r3, [pc, #304]	; (8001648 <main+0x5b0>)
 8001518:	601a      	str	r2, [r3, #0]
				if (Frequency > 10) {
 800151a:	4b4b      	ldr	r3, [pc, #300]	; (8001648 <main+0x5b0>)
 800151c:	edd3 7a00 	vldr	s15, [r3]
 8001520:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001524:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800152c:	dd02      	ble.n	8001534 <main+0x49c>
					Frequency = 10;
 800152e:	4a46      	ldr	r2, [pc, #280]	; (8001648 <main+0x5b0>)
 8001530:	4b46      	ldr	r3, [pc, #280]	; (800164c <main+0x5b4>)
 8001532:	6013      	str	r3, [r2, #0]
				}
				State = Square_wave;
 8001534:	4a46      	ldr	r2, [pc, #280]	; (8001650 <main+0x5b8>)
 8001536:	2304      	movs	r3, #4
 8001538:	6013      	str	r3, [r2, #0]
 800153a:	e056      	b.n	80015ea <main+0x552>
			} else if (inputchar == '-') {
 800153c:	4b3f      	ldr	r3, [pc, #252]	; (800163c <main+0x5a4>)
 800153e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001542:	2b2d      	cmp	r3, #45	; 0x2d
 8001544:	d12c      	bne.n	80015a0 <main+0x508>
				HAL_UART_Transmit(&huart2, (uint8_t*) Decrease_f,
						strlen(Decrease_f), 10);
 8001546:	4843      	ldr	r0, [pc, #268]	; (8001654 <main+0x5bc>)
 8001548:	f7fe fe46 	bl	80001d8 <strlen>
 800154c:	4603      	mov	r3, r0
				HAL_UART_Transmit(&huart2, (uint8_t*) Decrease_f,
 800154e:	b29a      	uxth	r2, r3
 8001550:	230a      	movs	r3, #10
 8001552:	4940      	ldr	r1, [pc, #256]	; (8001654 <main+0x5bc>)
 8001554:	483b      	ldr	r0, [pc, #236]	; (8001644 <main+0x5ac>)
 8001556:	f004 fc52 	bl	8005dfe <HAL_UART_Transmit>
				Frequency -= 0.1;
 800155a:	4b3b      	ldr	r3, [pc, #236]	; (8001648 <main+0x5b0>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4618      	mov	r0, r3
 8001560:	f7fe ffa6 	bl	80004b0 <__aeabi_f2d>
 8001564:	a332      	add	r3, pc, #200	; (adr r3, 8001630 <main+0x598>)
 8001566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800156a:	f7fe fe41 	bl	80001f0 <__aeabi_dsub>
 800156e:	4602      	mov	r2, r0
 8001570:	460b      	mov	r3, r1
 8001572:	4610      	mov	r0, r2
 8001574:	4619      	mov	r1, r3
 8001576:	f7ff fab5 	bl	8000ae4 <__aeabi_d2f>
 800157a:	4602      	mov	r2, r0
 800157c:	4b32      	ldr	r3, [pc, #200]	; (8001648 <main+0x5b0>)
 800157e:	601a      	str	r2, [r3, #0]
				if (Frequency < 0) {
 8001580:	4b31      	ldr	r3, [pc, #196]	; (8001648 <main+0x5b0>)
 8001582:	edd3 7a00 	vldr	s15, [r3]
 8001586:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800158a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800158e:	d503      	bpl.n	8001598 <main+0x500>
					Frequency = 0;
 8001590:	4a2d      	ldr	r2, [pc, #180]	; (8001648 <main+0x5b0>)
 8001592:	f04f 0300 	mov.w	r3, #0
 8001596:	6013      	str	r3, [r2, #0]
				}

				State = Square_wave;
 8001598:	4a2d      	ldr	r2, [pc, #180]	; (8001650 <main+0x5b8>)
 800159a:	2304      	movs	r3, #4
 800159c:	6013      	str	r3, [r2, #0]
 800159e:	e024      	b.n	80015ea <main+0x552>
			} else if (inputchar == 'd') {
 80015a0:	4b26      	ldr	r3, [pc, #152]	; (800163c <main+0x5a4>)
 80015a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015a6:	2b64      	cmp	r3, #100	; 0x64
 80015a8:	d10d      	bne.n	80015c6 <main+0x52e>
				HAL_UART_Transmit(&huart2, (uint8_t*) Decrease_f,
						strlen(Decrease_f), 10);
 80015aa:	482a      	ldr	r0, [pc, #168]	; (8001654 <main+0x5bc>)
 80015ac:	f7fe fe14 	bl	80001d8 <strlen>
 80015b0:	4603      	mov	r3, r0
				HAL_UART_Transmit(&huart2, (uint8_t*) Decrease_f,
 80015b2:	b29a      	uxth	r2, r3
 80015b4:	230a      	movs	r3, #10
 80015b6:	4927      	ldr	r1, [pc, #156]	; (8001654 <main+0x5bc>)
 80015b8:	4822      	ldr	r0, [pc, #136]	; (8001644 <main+0x5ac>)
 80015ba:	f004 fc20 	bl	8005dfe <HAL_UART_Transmit>
				State = Dutycycle;
 80015be:	4a24      	ldr	r2, [pc, #144]	; (8001650 <main+0x5b8>)
 80015c0:	2308      	movs	r3, #8
 80015c2:	6013      	str	r3, [r2, #0]
 80015c4:	e011      	b.n	80015ea <main+0x552>
			} else if (inputchar == 'v') {
 80015c6:	4b1d      	ldr	r3, [pc, #116]	; (800163c <main+0x5a4>)
 80015c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015cc:	2b76      	cmp	r3, #118	; 0x76
 80015ce:	d10c      	bne.n	80015ea <main+0x552>
				HAL_UART_Transmit(&huart2, (uint8_t*) set_voltage,
						strlen(set_voltage), 10);
 80015d0:	4821      	ldr	r0, [pc, #132]	; (8001658 <main+0x5c0>)
 80015d2:	f7fe fe01 	bl	80001d8 <strlen>
 80015d6:	4603      	mov	r3, r0
				HAL_UART_Transmit(&huart2, (uint8_t*) set_voltage,
 80015d8:	b29a      	uxth	r2, r3
 80015da:	230a      	movs	r3, #10
 80015dc:	491e      	ldr	r1, [pc, #120]	; (8001658 <main+0x5c0>)
 80015de:	4819      	ldr	r0, [pc, #100]	; (8001644 <main+0x5ac>)
 80015e0:	f004 fc0d 	bl	8005dfe <HAL_UART_Transmit>
				State = Set_voltage;
 80015e4:	4a1a      	ldr	r2, [pc, #104]	; (8001650 <main+0x5b8>)
 80015e6:	2305      	movs	r3, #5
 80015e8:	6013      	str	r3, [r2, #0]
			}
			if (inputchar == 'x') {
 80015ea:	4b14      	ldr	r3, [pc, #80]	; (800163c <main+0x5a4>)
 80015ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015f0:	2b78      	cmp	r3, #120	; 0x78
 80015f2:	f040 81f6 	bne.w	80019e2 <main+0x94a>
				HAL_UART_Transmit(&huart2, (uint8_t*) Menu_Start1,
						strlen(Menu_Start1), 10);
 80015f6:	4819      	ldr	r0, [pc, #100]	; (800165c <main+0x5c4>)
 80015f8:	f7fe fdee 	bl	80001d8 <strlen>
 80015fc:	4603      	mov	r3, r0
				HAL_UART_Transmit(&huart2, (uint8_t*) Menu_Start1,
 80015fe:	b29a      	uxth	r2, r3
 8001600:	230a      	movs	r3, #10
 8001602:	4916      	ldr	r1, [pc, #88]	; (800165c <main+0x5c4>)
 8001604:	480f      	ldr	r0, [pc, #60]	; (8001644 <main+0x5ac>)
 8001606:	f004 fbfa 	bl	8005dfe <HAL_UART_Transmit>
				State = Select_waveform;
 800160a:	4a11      	ldr	r2, [pc, #68]	; (8001650 <main+0x5b8>)
 800160c:	2301      	movs	r3, #1
 800160e:	6013      	str	r3, [r2, #0]
			}
			break;
 8001610:	e1e7      	b.n	80019e2 <main+0x94a>
		case Set_voltage:
			if (inputchar == 'b') { // V_high
 8001612:	4b0a      	ldr	r3, [pc, #40]	; (800163c <main+0x5a4>)
 8001614:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001618:	2b62      	cmp	r3, #98	; 0x62
 800161a:	d123      	bne.n	8001664 <main+0x5cc>
				HAL_UART_Transmit(&huart2,
 800161c:	230a      	movs	r3, #10
 800161e:	2237      	movs	r2, #55	; 0x37
 8001620:	490f      	ldr	r1, [pc, #60]	; (8001660 <main+0x5c8>)
 8001622:	4808      	ldr	r0, [pc, #32]	; (8001644 <main+0x5ac>)
 8001624:	f004 fbeb 	bl	8005dfe <HAL_UART_Transmit>
						(uint8_t*) "+ Increase V_high\r\n - Decrease V_high\r\n x Set voltage\r\n",
						strlen(
								"+ Increase V_high\r\n - Decrease V_high\r\n x Set voltage\r\n"),
						10);
				State = Set_Vhigh;
 8001628:	4a09      	ldr	r2, [pc, #36]	; (8001650 <main+0x5b8>)
 800162a:	2306      	movs	r3, #6
 800162c:	6013      	str	r3, [r2, #0]
 800162e:	e027      	b.n	8001680 <main+0x5e8>
 8001630:	9999999a 	.word	0x9999999a
 8001634:	3fb99999 	.word	0x3fb99999
 8001638:	200002a4 	.word	0x200002a4
 800163c:	200002cc 	.word	0x200002cc
 8001640:	20000050 	.word	0x20000050
 8001644:	20000460 	.word	0x20000460
 8001648:	20000004 	.word	0x20000004
 800164c:	41200000 	.word	0x41200000
 8001650:	200002a0 	.word	0x200002a0
 8001654:	20000068 	.word	0x20000068
 8001658:	200000fc 	.word	0x200000fc
 800165c:	20000014 	.word	0x20000014
 8001660:	08007b30 	.word	0x08007b30
			} else if (inputchar == 'n') { // V_low
 8001664:	4ba4      	ldr	r3, [pc, #656]	; (80018f8 <main+0x860>)
 8001666:	f9b3 3000 	ldrsh.w	r3, [r3]
 800166a:	2b6e      	cmp	r3, #110	; 0x6e
 800166c:	d108      	bne.n	8001680 <main+0x5e8>
				HAL_UART_Transmit(&huart2,
 800166e:	230a      	movs	r3, #10
 8001670:	2235      	movs	r2, #53	; 0x35
 8001672:	49a2      	ldr	r1, [pc, #648]	; (80018fc <main+0x864>)
 8001674:	48a2      	ldr	r0, [pc, #648]	; (8001900 <main+0x868>)
 8001676:	f004 fbc2 	bl	8005dfe <HAL_UART_Transmit>
						(uint8_t*) "+ Increase V_low\r\n - Decrease V_low\r\n x Set voltage\r\n",
						strlen(
								"+ Increase V_low\r\n - Decrease V_low\r\n x Set voltage\r\n"),
						10);
				State = Set_Vlow;
 800167a:	4aa2      	ldr	r2, [pc, #648]	; (8001904 <main+0x86c>)
 800167c:	2307      	movs	r3, #7
 800167e:	6013      	str	r3, [r2, #0]
			}
			if (inputchar == 'x') {
 8001680:	4b9d      	ldr	r3, [pc, #628]	; (80018f8 <main+0x860>)
 8001682:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001686:	2b78      	cmp	r3, #120	; 0x78
 8001688:	f040 81ad 	bne.w	80019e6 <main+0x94e>
				if (waveform == 1) {
 800168c:	4b9e      	ldr	r3, [pc, #632]	; (8001908 <main+0x870>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	2b01      	cmp	r3, #1
 8001692:	d10d      	bne.n	80016b0 <main+0x618>
					HAL_UART_Transmit(&huart2, (uint8_t*) saw_tooth,
							strlen(saw_tooth), 10);
 8001694:	489d      	ldr	r0, [pc, #628]	; (800190c <main+0x874>)
 8001696:	f7fe fd9f 	bl	80001d8 <strlen>
 800169a:	4603      	mov	r3, r0
					HAL_UART_Transmit(&huart2, (uint8_t*) saw_tooth,
 800169c:	b29a      	uxth	r2, r3
 800169e:	230a      	movs	r3, #10
 80016a0:	499a      	ldr	r1, [pc, #616]	; (800190c <main+0x874>)
 80016a2:	4897      	ldr	r0, [pc, #604]	; (8001900 <main+0x868>)
 80016a4:	f004 fbab 	bl	8005dfe <HAL_UART_Transmit>
					State = Saw_tooth;
 80016a8:	4a96      	ldr	r2, [pc, #600]	; (8001904 <main+0x86c>)
 80016aa:	2302      	movs	r3, #2
 80016ac:	6013      	str	r3, [r2, #0]
					HAL_UART_Transmit(&huart2, (uint8_t*) sqaure_wave,
							strlen(sqaure_wave), 10);
					State = Square_wave;
				}
			}
			break;
 80016ae:	e19a      	b.n	80019e6 <main+0x94e>
				} else if (waveform == 2) {
 80016b0:	4b95      	ldr	r3, [pc, #596]	; (8001908 <main+0x870>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	2b02      	cmp	r3, #2
 80016b6:	d10d      	bne.n	80016d4 <main+0x63c>
							strlen(Menu_Start1), 10);
 80016b8:	4895      	ldr	r0, [pc, #596]	; (8001910 <main+0x878>)
 80016ba:	f7fe fd8d 	bl	80001d8 <strlen>
 80016be:	4603      	mov	r3, r0
					HAL_UART_Transmit(&huart2, (uint8_t*) sin_wave,
 80016c0:	b29a      	uxth	r2, r3
 80016c2:	230a      	movs	r3, #10
 80016c4:	4993      	ldr	r1, [pc, #588]	; (8001914 <main+0x87c>)
 80016c6:	488e      	ldr	r0, [pc, #568]	; (8001900 <main+0x868>)
 80016c8:	f004 fb99 	bl	8005dfe <HAL_UART_Transmit>
					State = Sine_wave;
 80016cc:	4a8d      	ldr	r2, [pc, #564]	; (8001904 <main+0x86c>)
 80016ce:	2303      	movs	r3, #3
 80016d0:	6013      	str	r3, [r2, #0]
			break;
 80016d2:	e188      	b.n	80019e6 <main+0x94e>
				} else if (waveform == 3) {
 80016d4:	4b8c      	ldr	r3, [pc, #560]	; (8001908 <main+0x870>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	2b03      	cmp	r3, #3
 80016da:	f040 8184 	bne.w	80019e6 <main+0x94e>
							strlen(sqaure_wave), 10);
 80016de:	488e      	ldr	r0, [pc, #568]	; (8001918 <main+0x880>)
 80016e0:	f7fe fd7a 	bl	80001d8 <strlen>
 80016e4:	4603      	mov	r3, r0
					HAL_UART_Transmit(&huart2, (uint8_t*) sqaure_wave,
 80016e6:	b29a      	uxth	r2, r3
 80016e8:	230a      	movs	r3, #10
 80016ea:	498b      	ldr	r1, [pc, #556]	; (8001918 <main+0x880>)
 80016ec:	4884      	ldr	r0, [pc, #528]	; (8001900 <main+0x868>)
 80016ee:	f004 fb86 	bl	8005dfe <HAL_UART_Transmit>
					State = Square_wave;
 80016f2:	4a84      	ldr	r2, [pc, #528]	; (8001904 <main+0x86c>)
 80016f4:	2304      	movs	r3, #4
 80016f6:	6013      	str	r3, [r2, #0]
			break;
 80016f8:	e175      	b.n	80019e6 <main+0x94e>
		case Set_Vhigh:
			if (inputchar == '+') {
 80016fa:	4b7f      	ldr	r3, [pc, #508]	; (80018f8 <main+0x860>)
 80016fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001700:	2b2b      	cmp	r3, #43	; 0x2b
 8001702:	d12c      	bne.n	800175e <main+0x6c6>
				HAL_UART_Transmit(&huart2, (uint8_t*) " \Increase V high ",
 8001704:	230a      	movs	r3, #10
 8001706:	2211      	movs	r2, #17
 8001708:	4984      	ldr	r1, [pc, #528]	; (800191c <main+0x884>)
 800170a:	487d      	ldr	r0, [pc, #500]	; (8001900 <main+0x868>)
 800170c:	f004 fb77 	bl	8005dfe <HAL_UART_Transmit>
						strlen(" \Increase V high "), 10);
				V_high += 0.1;
 8001710:	4b83      	ldr	r3, [pc, #524]	; (8001920 <main+0x888>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4618      	mov	r0, r3
 8001716:	f7fe fecb 	bl	80004b0 <__aeabi_f2d>
 800171a:	a373      	add	r3, pc, #460	; (adr r3, 80018e8 <main+0x850>)
 800171c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001720:	f7fe fd68 	bl	80001f4 <__adddf3>
 8001724:	4602      	mov	r2, r0
 8001726:	460b      	mov	r3, r1
 8001728:	4610      	mov	r0, r2
 800172a:	4619      	mov	r1, r3
 800172c:	f7ff f9da 	bl	8000ae4 <__aeabi_d2f>
 8001730:	4602      	mov	r2, r0
 8001732:	4b7b      	ldr	r3, [pc, #492]	; (8001920 <main+0x888>)
 8001734:	601a      	str	r2, [r3, #0]
				if (V_high > 3.3) {
 8001736:	4b7a      	ldr	r3, [pc, #488]	; (8001920 <main+0x888>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4618      	mov	r0, r3
 800173c:	f7fe feb8 	bl	80004b0 <__aeabi_f2d>
 8001740:	a36b      	add	r3, pc, #428	; (adr r3, 80018f0 <main+0x858>)
 8001742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001746:	f7ff f99b 	bl	8000a80 <__aeabi_dcmpgt>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d002      	beq.n	8001756 <main+0x6be>
					V_high = 3.3;
 8001750:	4a73      	ldr	r2, [pc, #460]	; (8001920 <main+0x888>)
 8001752:	4b74      	ldr	r3, [pc, #464]	; (8001924 <main+0x88c>)
 8001754:	6013      	str	r3, [r2, #0]
				}
				State = Set_Vhigh;
 8001756:	4a6b      	ldr	r2, [pc, #428]	; (8001904 <main+0x86c>)
 8001758:	2306      	movs	r3, #6
 800175a:	6013      	str	r3, [r2, #0]
			} else if (inputchar == 'x') {
				HAL_UART_Transmit(&huart2, (uint8_t*) set_voltage,
						strlen(set_voltage), 10);
				State = Set_voltage;
			}
			break;
 800175c:	e145      	b.n	80019ea <main+0x952>
			} else if (inputchar == '-') {
 800175e:	4b66      	ldr	r3, [pc, #408]	; (80018f8 <main+0x860>)
 8001760:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001764:	2b2d      	cmp	r3, #45	; 0x2d
 8001766:	d128      	bne.n	80017ba <main+0x722>
				HAL_UART_Transmit(&huart2, (uint8_t*) " \Decrease V high ",
 8001768:	230a      	movs	r3, #10
 800176a:	2211      	movs	r2, #17
 800176c:	496e      	ldr	r1, [pc, #440]	; (8001928 <main+0x890>)
 800176e:	4864      	ldr	r0, [pc, #400]	; (8001900 <main+0x868>)
 8001770:	f004 fb45 	bl	8005dfe <HAL_UART_Transmit>
				V_high -= 0.1;
 8001774:	4b6a      	ldr	r3, [pc, #424]	; (8001920 <main+0x888>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4618      	mov	r0, r3
 800177a:	f7fe fe99 	bl	80004b0 <__aeabi_f2d>
 800177e:	a35a      	add	r3, pc, #360	; (adr r3, 80018e8 <main+0x850>)
 8001780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001784:	f7fe fd34 	bl	80001f0 <__aeabi_dsub>
 8001788:	4602      	mov	r2, r0
 800178a:	460b      	mov	r3, r1
 800178c:	4610      	mov	r0, r2
 800178e:	4619      	mov	r1, r3
 8001790:	f7ff f9a8 	bl	8000ae4 <__aeabi_d2f>
 8001794:	4602      	mov	r2, r0
 8001796:	4b62      	ldr	r3, [pc, #392]	; (8001920 <main+0x888>)
 8001798:	601a      	str	r2, [r3, #0]
				if (V_high < 0) {
 800179a:	4b61      	ldr	r3, [pc, #388]	; (8001920 <main+0x888>)
 800179c:	edd3 7a00 	vldr	s15, [r3]
 80017a0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80017a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017a8:	d503      	bpl.n	80017b2 <main+0x71a>
					V_high = 0;
 80017aa:	4a5d      	ldr	r2, [pc, #372]	; (8001920 <main+0x888>)
 80017ac:	f04f 0300 	mov.w	r3, #0
 80017b0:	6013      	str	r3, [r2, #0]
				State = Set_Vhigh;
 80017b2:	4a54      	ldr	r2, [pc, #336]	; (8001904 <main+0x86c>)
 80017b4:	2306      	movs	r3, #6
 80017b6:	6013      	str	r3, [r2, #0]
			break;
 80017b8:	e117      	b.n	80019ea <main+0x952>
			} else if (inputchar == 'x') {
 80017ba:	4b4f      	ldr	r3, [pc, #316]	; (80018f8 <main+0x860>)
 80017bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017c0:	2b78      	cmp	r3, #120	; 0x78
 80017c2:	f040 8112 	bne.w	80019ea <main+0x952>
						strlen(set_voltage), 10);
 80017c6:	4859      	ldr	r0, [pc, #356]	; (800192c <main+0x894>)
 80017c8:	f7fe fd06 	bl	80001d8 <strlen>
 80017cc:	4603      	mov	r3, r0
				HAL_UART_Transmit(&huart2, (uint8_t*) set_voltage,
 80017ce:	b29a      	uxth	r2, r3
 80017d0:	230a      	movs	r3, #10
 80017d2:	4956      	ldr	r1, [pc, #344]	; (800192c <main+0x894>)
 80017d4:	484a      	ldr	r0, [pc, #296]	; (8001900 <main+0x868>)
 80017d6:	f004 fb12 	bl	8005dfe <HAL_UART_Transmit>
				State = Set_voltage;
 80017da:	4a4a      	ldr	r2, [pc, #296]	; (8001904 <main+0x86c>)
 80017dc:	2305      	movs	r3, #5
 80017de:	6013      	str	r3, [r2, #0]
			break;
 80017e0:	e103      	b.n	80019ea <main+0x952>
		case Set_Vlow:
			if (inputchar == '+') {
 80017e2:	4b45      	ldr	r3, [pc, #276]	; (80018f8 <main+0x860>)
 80017e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017e8:	2b2b      	cmp	r3, #43	; 0x2b
 80017ea:	d12c      	bne.n	8001846 <main+0x7ae>
				HAL_UART_Transmit(&huart2, (uint8_t*) " \Increase V low ",
 80017ec:	230a      	movs	r3, #10
 80017ee:	2210      	movs	r2, #16
 80017f0:	494f      	ldr	r1, [pc, #316]	; (8001930 <main+0x898>)
 80017f2:	4843      	ldr	r0, [pc, #268]	; (8001900 <main+0x868>)
 80017f4:	f004 fb03 	bl	8005dfe <HAL_UART_Transmit>
						strlen(" \Increase V low "), 10);
				V_low += 0.1;
 80017f8:	4b4e      	ldr	r3, [pc, #312]	; (8001934 <main+0x89c>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7fe fe57 	bl	80004b0 <__aeabi_f2d>
 8001802:	a339      	add	r3, pc, #228	; (adr r3, 80018e8 <main+0x850>)
 8001804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001808:	f7fe fcf4 	bl	80001f4 <__adddf3>
 800180c:	4602      	mov	r2, r0
 800180e:	460b      	mov	r3, r1
 8001810:	4610      	mov	r0, r2
 8001812:	4619      	mov	r1, r3
 8001814:	f7ff f966 	bl	8000ae4 <__aeabi_d2f>
 8001818:	4602      	mov	r2, r0
 800181a:	4b46      	ldr	r3, [pc, #280]	; (8001934 <main+0x89c>)
 800181c:	601a      	str	r2, [r3, #0]
				if (V_low > 3.3) {
 800181e:	4b45      	ldr	r3, [pc, #276]	; (8001934 <main+0x89c>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4618      	mov	r0, r3
 8001824:	f7fe fe44 	bl	80004b0 <__aeabi_f2d>
 8001828:	a331      	add	r3, pc, #196	; (adr r3, 80018f0 <main+0x858>)
 800182a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800182e:	f7ff f927 	bl	8000a80 <__aeabi_dcmpgt>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d002      	beq.n	800183e <main+0x7a6>
					V_low = 3.3;
 8001838:	4a3e      	ldr	r2, [pc, #248]	; (8001934 <main+0x89c>)
 800183a:	4b3a      	ldr	r3, [pc, #232]	; (8001924 <main+0x88c>)
 800183c:	6013      	str	r3, [r2, #0]
				}
				State = Set_Vlow;
 800183e:	4a31      	ldr	r2, [pc, #196]	; (8001904 <main+0x86c>)
 8001840:	2307      	movs	r3, #7
 8001842:	6013      	str	r3, [r2, #0]
			} else if (inputchar == 'x') {
				HAL_UART_Transmit(&huart2, (uint8_t*) set_voltage,
						strlen(set_voltage), 10);
				State = Set_voltage;
			}
			break;
 8001844:	e0d3      	b.n	80019ee <main+0x956>
			} else if (inputchar == '-') {
 8001846:	4b2c      	ldr	r3, [pc, #176]	; (80018f8 <main+0x860>)
 8001848:	f9b3 3000 	ldrsh.w	r3, [r3]
 800184c:	2b2d      	cmp	r3, #45	; 0x2d
 800184e:	d128      	bne.n	80018a2 <main+0x80a>
				HAL_UART_Transmit(&huart2, (uint8_t*) " \Decrease V low ",
 8001850:	230a      	movs	r3, #10
 8001852:	2210      	movs	r2, #16
 8001854:	4938      	ldr	r1, [pc, #224]	; (8001938 <main+0x8a0>)
 8001856:	482a      	ldr	r0, [pc, #168]	; (8001900 <main+0x868>)
 8001858:	f004 fad1 	bl	8005dfe <HAL_UART_Transmit>
				V_low -= 0.1;
 800185c:	4b35      	ldr	r3, [pc, #212]	; (8001934 <main+0x89c>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4618      	mov	r0, r3
 8001862:	f7fe fe25 	bl	80004b0 <__aeabi_f2d>
 8001866:	a320      	add	r3, pc, #128	; (adr r3, 80018e8 <main+0x850>)
 8001868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800186c:	f7fe fcc0 	bl	80001f0 <__aeabi_dsub>
 8001870:	4602      	mov	r2, r0
 8001872:	460b      	mov	r3, r1
 8001874:	4610      	mov	r0, r2
 8001876:	4619      	mov	r1, r3
 8001878:	f7ff f934 	bl	8000ae4 <__aeabi_d2f>
 800187c:	4602      	mov	r2, r0
 800187e:	4b2d      	ldr	r3, [pc, #180]	; (8001934 <main+0x89c>)
 8001880:	601a      	str	r2, [r3, #0]
				if (V_low < 0) {
 8001882:	4b2c      	ldr	r3, [pc, #176]	; (8001934 <main+0x89c>)
 8001884:	edd3 7a00 	vldr	s15, [r3]
 8001888:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800188c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001890:	d503      	bpl.n	800189a <main+0x802>
					V_low = 0;
 8001892:	4a28      	ldr	r2, [pc, #160]	; (8001934 <main+0x89c>)
 8001894:	f04f 0300 	mov.w	r3, #0
 8001898:	6013      	str	r3, [r2, #0]
				State = Set_Vlow;
 800189a:	4a1a      	ldr	r2, [pc, #104]	; (8001904 <main+0x86c>)
 800189c:	2307      	movs	r3, #7
 800189e:	6013      	str	r3, [r2, #0]
			break;
 80018a0:	e0a5      	b.n	80019ee <main+0x956>
			} else if (inputchar == 'x') {
 80018a2:	4b15      	ldr	r3, [pc, #84]	; (80018f8 <main+0x860>)
 80018a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018a8:	2b78      	cmp	r3, #120	; 0x78
 80018aa:	f040 80a0 	bne.w	80019ee <main+0x956>
						strlen(set_voltage), 10);
 80018ae:	481f      	ldr	r0, [pc, #124]	; (800192c <main+0x894>)
 80018b0:	f7fe fc92 	bl	80001d8 <strlen>
 80018b4:	4603      	mov	r3, r0
				HAL_UART_Transmit(&huart2, (uint8_t*) set_voltage,
 80018b6:	b29a      	uxth	r2, r3
 80018b8:	230a      	movs	r3, #10
 80018ba:	491c      	ldr	r1, [pc, #112]	; (800192c <main+0x894>)
 80018bc:	4810      	ldr	r0, [pc, #64]	; (8001900 <main+0x868>)
 80018be:	f004 fa9e 	bl	8005dfe <HAL_UART_Transmit>
				State = Set_voltage;
 80018c2:	4a10      	ldr	r2, [pc, #64]	; (8001904 <main+0x86c>)
 80018c4:	2305      	movs	r3, #5
 80018c6:	6013      	str	r3, [r2, #0]
			break;
 80018c8:	e091      	b.n	80019ee <main+0x956>
		case Dutycycle:
			HAL_UART_Transmit(&huart2, (uint8_t*) set_dutycycle,
					strlen(set_dutycycle), 10);
 80018ca:	481c      	ldr	r0, [pc, #112]	; (800193c <main+0x8a4>)
 80018cc:	f7fe fc84 	bl	80001d8 <strlen>
 80018d0:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart2, (uint8_t*) set_dutycycle,
 80018d2:	b29a      	uxth	r2, r3
 80018d4:	230a      	movs	r3, #10
 80018d6:	4919      	ldr	r1, [pc, #100]	; (800193c <main+0x8a4>)
 80018d8:	4809      	ldr	r0, [pc, #36]	; (8001900 <main+0x868>)
 80018da:	f004 fa90 	bl	8005dfe <HAL_UART_Transmit>
			State = Set_Dutycycle;
 80018de:	4a09      	ldr	r2, [pc, #36]	; (8001904 <main+0x86c>)
 80018e0:	2309      	movs	r3, #9
 80018e2:	6013      	str	r3, [r2, #0]
			break;
 80018e4:	e084      	b.n	80019f0 <main+0x958>
 80018e6:	bf00      	nop
 80018e8:	9999999a 	.word	0x9999999a
 80018ec:	3fb99999 	.word	0x3fb99999
 80018f0:	66666666 	.word	0x66666666
 80018f4:	400a6666 	.word	0x400a6666
 80018f8:	200002cc 	.word	0x200002cc
 80018fc:	08007b68 	.word	0x08007b68
 8001900:	20000460 	.word	0x20000460
 8001904:	200002a0 	.word	0x200002a0
 8001908:	200002a4 	.word	0x200002a4
 800190c:	20000080 	.word	0x20000080
 8001910:	20000014 	.word	0x20000014
 8001914:	20000168 	.word	0x20000168
 8001918:	200001cc 	.word	0x200001cc
 800191c:	08007ba0 	.word	0x08007ba0
 8001920:	20000010 	.word	0x20000010
 8001924:	40533333 	.word	0x40533333
 8001928:	08007bb4 	.word	0x08007bb4
 800192c:	200000fc 	.word	0x200000fc
 8001930:	08007bc8 	.word	0x08007bc8
 8001934:	200002a8 	.word	0x200002a8
 8001938:	08007bdc 	.word	0x08007bdc
 800193c:	2000012c 	.word	0x2000012c
		case Set_Dutycycle:
			if (inputchar == '+') {
 8001940:	4bc3      	ldr	r3, [pc, #780]	; (8001c50 <main+0xbb8>)
 8001942:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001946:	2b2b      	cmp	r3, #43	; 0x2b
 8001948:	d116      	bne.n	8001978 <main+0x8e0>
				HAL_UART_Transmit(&huart2, (uint8_t*) "Increase dutycycle ",
 800194a:	230a      	movs	r3, #10
 800194c:	2213      	movs	r2, #19
 800194e:	49c1      	ldr	r1, [pc, #772]	; (8001c54 <main+0xbbc>)
 8001950:	48c1      	ldr	r0, [pc, #772]	; (8001c58 <main+0xbc0>)
 8001952:	f004 fa54 	bl	8005dfe <HAL_UART_Transmit>
						strlen("Increase dutycycle "), 10);
				Duty_cycle += 10;
 8001956:	4bc1      	ldr	r3, [pc, #772]	; (8001c5c <main+0xbc4>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f103 020a 	add.w	r2, r3, #10
 800195e:	4bbf      	ldr	r3, [pc, #764]	; (8001c5c <main+0xbc4>)
 8001960:	601a      	str	r2, [r3, #0]
				if (Duty_cycle > 100) {
 8001962:	4bbe      	ldr	r3, [pc, #760]	; (8001c5c <main+0xbc4>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	2b64      	cmp	r3, #100	; 0x64
 8001968:	dd02      	ble.n	8001970 <main+0x8d8>
					Duty_cycle = 100;
 800196a:	4abc      	ldr	r2, [pc, #752]	; (8001c5c <main+0xbc4>)
 800196c:	2364      	movs	r3, #100	; 0x64
 800196e:	6013      	str	r3, [r2, #0]
				}
				State = Set_Dutycycle;
 8001970:	4abb      	ldr	r2, [pc, #748]	; (8001c60 <main+0xbc8>)
 8001972:	2309      	movs	r3, #9
 8001974:	6013      	str	r3, [r2, #0]
 8001976:	e03b      	b.n	80019f0 <main+0x958>
			} else if (inputchar == '-') {
 8001978:	4bb5      	ldr	r3, [pc, #724]	; (8001c50 <main+0xbb8>)
 800197a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800197e:	2b2d      	cmp	r3, #45	; 0x2d
 8001980:	d116      	bne.n	80019b0 <main+0x918>
				HAL_UART_Transmit(&huart2, (uint8_t*) "Decrease dutycycle ",
 8001982:	230a      	movs	r3, #10
 8001984:	2213      	movs	r2, #19
 8001986:	49b7      	ldr	r1, [pc, #732]	; (8001c64 <main+0xbcc>)
 8001988:	48b3      	ldr	r0, [pc, #716]	; (8001c58 <main+0xbc0>)
 800198a:	f004 fa38 	bl	8005dfe <HAL_UART_Transmit>
						strlen("Decrease dutycycle "), 10);
				Duty_cycle -= 10;
 800198e:	4bb3      	ldr	r3, [pc, #716]	; (8001c5c <main+0xbc4>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f1a3 020a 	sub.w	r2, r3, #10
 8001996:	4bb1      	ldr	r3, [pc, #708]	; (8001c5c <main+0xbc4>)
 8001998:	601a      	str	r2, [r3, #0]
				if (Duty_cycle < 0) {
 800199a:	4bb0      	ldr	r3, [pc, #704]	; (8001c5c <main+0xbc4>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	da02      	bge.n	80019a8 <main+0x910>
					Duty_cycle = 0;
 80019a2:	4aae      	ldr	r2, [pc, #696]	; (8001c5c <main+0xbc4>)
 80019a4:	2300      	movs	r3, #0
 80019a6:	6013      	str	r3, [r2, #0]
				}
				State = Set_Dutycycle;
 80019a8:	4aad      	ldr	r2, [pc, #692]	; (8001c60 <main+0xbc8>)
 80019aa:	2309      	movs	r3, #9
 80019ac:	6013      	str	r3, [r2, #0]
 80019ae:	e01f      	b.n	80019f0 <main+0x958>
			} else if (inputchar == 'x') {
 80019b0:	4ba7      	ldr	r3, [pc, #668]	; (8001c50 <main+0xbb8>)
 80019b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019b6:	2b78      	cmp	r3, #120	; 0x78
 80019b8:	d11a      	bne.n	80019f0 <main+0x958>
				HAL_UART_Transmit(&huart2, (uint8_t*) sqaure_wave,
						strlen(sqaure_wave), 10);
 80019ba:	48ab      	ldr	r0, [pc, #684]	; (8001c68 <main+0xbd0>)
 80019bc:	f7fe fc0c 	bl	80001d8 <strlen>
 80019c0:	4603      	mov	r3, r0
				HAL_UART_Transmit(&huart2, (uint8_t*) sqaure_wave,
 80019c2:	b29a      	uxth	r2, r3
 80019c4:	230a      	movs	r3, #10
 80019c6:	49a8      	ldr	r1, [pc, #672]	; (8001c68 <main+0xbd0>)
 80019c8:	48a3      	ldr	r0, [pc, #652]	; (8001c58 <main+0xbc0>)
 80019ca:	f004 fa18 	bl	8005dfe <HAL_UART_Transmit>
				State = Square_wave;
 80019ce:	4aa4      	ldr	r2, [pc, #656]	; (8001c60 <main+0xbc8>)
 80019d0:	2304      	movs	r3, #4
 80019d2:	6013      	str	r3, [r2, #0]
 80019d4:	e00c      	b.n	80019f0 <main+0x958>
			break;
 80019d6:	bf00      	nop
 80019d8:	e00a      	b.n	80019f0 <main+0x958>
			break;
 80019da:	bf00      	nop
 80019dc:	e008      	b.n	80019f0 <main+0x958>
			break;
 80019de:	bf00      	nop
 80019e0:	e006      	b.n	80019f0 <main+0x958>
			break;
 80019e2:	bf00      	nop
 80019e4:	e004      	b.n	80019f0 <main+0x958>
			break;
 80019e6:	bf00      	nop
 80019e8:	e002      	b.n	80019f0 <main+0x958>
			break;
 80019ea:	bf00      	nop
 80019ec:	e000      	b.n	80019f0 <main+0x958>
			break;
 80019ee:	bf00      	nop
			}
		}
		static uint64_t timestamp = 0;
		static uint64_t timestamp2 = 0;
		Voltagein = ADCin * 3.3 / 4096;
 80019f0:	4b9e      	ldr	r3, [pc, #632]	; (8001c6c <main+0xbd4>)
 80019f2:	881b      	ldrh	r3, [r3, #0]
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7fe fd49 	bl	800048c <__aeabi_i2d>
 80019fa:	a393      	add	r3, pc, #588	; (adr r3, 8001c48 <main+0xbb0>)
 80019fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a00:	f7fe fdae 	bl	8000560 <__aeabi_dmul>
 8001a04:	4602      	mov	r2, r0
 8001a06:	460b      	mov	r3, r1
 8001a08:	4610      	mov	r0, r2
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	f04f 0200 	mov.w	r2, #0
 8001a10:	4b97      	ldr	r3, [pc, #604]	; (8001c70 <main+0xbd8>)
 8001a12:	f7fe fecf 	bl	80007b4 <__aeabi_ddiv>
 8001a16:	4602      	mov	r2, r0
 8001a18:	460b      	mov	r3, r1
 8001a1a:	4610      	mov	r0, r2
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	f7ff f861 	bl	8000ae4 <__aeabi_d2f>
 8001a22:	4602      	mov	r2, r0
 8001a24:	4b93      	ldr	r3, [pc, #588]	; (8001c74 <main+0xbdc>)
 8001a26:	601a      	str	r2, [r3, #0]
		if (micros() - timestamp > 100) {//10 kHz
 8001a28:	f000 fe1a 	bl	8002660 <micros>
 8001a2c:	4b92      	ldr	r3, [pc, #584]	; (8001c78 <main+0xbe0>)
 8001a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a32:	ebb0 0a02 	subs.w	sl, r0, r2
 8001a36:	eb61 0b03 	sbc.w	fp, r1, r3
 8001a3a:	f1bb 0f00 	cmp.w	fp, #0
 8001a3e:	bf08      	it	eq
 8001a40:	f1ba 0f65 	cmpeq.w	sl, #101	; 0x65
 8001a44:	f4ff ab51 	bcc.w	80010ea <main+0x52>
			if (waveform == 1) {//saw
 8001a48:	4b8c      	ldr	r3, [pc, #560]	; (8001c7c <main+0xbe4>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	f040 8125 	bne.w	8001c9c <main+0xc04>
				if (Slope == 1) {
 8001a52:	4b8b      	ldr	r3, [pc, #556]	; (8001c80 <main+0xbe8>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d178      	bne.n	8001b4c <main+0xab4>
					if (micros() - timestamp2 <= (1 / Frequency) * 1000000) {
 8001a5a:	f000 fe01 	bl	8002660 <micros>
 8001a5e:	4b89      	ldr	r3, [pc, #548]	; (8001c84 <main+0xbec>)
 8001a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a64:	1a84      	subs	r4, r0, r2
 8001a66:	663c      	str	r4, [r7, #96]	; 0x60
 8001a68:	eb61 0303 	sbc.w	r3, r1, r3
 8001a6c:	667b      	str	r3, [r7, #100]	; 0x64
 8001a6e:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001a72:	f7ff f94f 	bl	8000d14 <__aeabi_ul2f>
 8001a76:	ee06 0a10 	vmov	s12, r0
 8001a7a:	4b83      	ldr	r3, [pc, #524]	; (8001c88 <main+0xbf0>)
 8001a7c:	ed93 7a00 	vldr	s14, [r3]
 8001a80:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001a84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a88:	ed9f 7a80 	vldr	s14, [pc, #512]	; 8001c8c <main+0xbf4>
 8001a8c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a90:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8001a94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a98:	d82f      	bhi.n	8001afa <main+0xa62>
						Voltageout = V_low + (V_high - V_low)* ((micros() - timestamp2)/ ((1 / Frequency) * 1000000));
 8001a9a:	4b7d      	ldr	r3, [pc, #500]	; (8001c90 <main+0xbf8>)
 8001a9c:	ed93 7a00 	vldr	s14, [r3]
 8001aa0:	4b7c      	ldr	r3, [pc, #496]	; (8001c94 <main+0xbfc>)
 8001aa2:	edd3 7a00 	vldr	s15, [r3]
 8001aa6:	ee37 8a67 	vsub.f32	s16, s14, s15
 8001aaa:	f000 fdd9 	bl	8002660 <micros>
 8001aae:	4b75      	ldr	r3, [pc, #468]	; (8001c84 <main+0xbec>)
 8001ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ab4:	1a84      	subs	r4, r0, r2
 8001ab6:	65bc      	str	r4, [r7, #88]	; 0x58
 8001ab8:	eb61 0303 	sbc.w	r3, r1, r3
 8001abc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001abe:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001ac2:	f7ff f927 	bl	8000d14 <__aeabi_ul2f>
 8001ac6:	ee06 0a10 	vmov	s12, r0
 8001aca:	4b6f      	ldr	r3, [pc, #444]	; (8001c88 <main+0xbf0>)
 8001acc:	ed93 7a00 	vldr	s14, [r3]
 8001ad0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001ad4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ad8:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8001c8c <main+0xbf4>
 8001adc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001ae0:	eec6 7a07 	vdiv.f32	s15, s12, s14
 8001ae4:	ee28 7a27 	vmul.f32	s14, s16, s15
 8001ae8:	4b6a      	ldr	r3, [pc, #424]	; (8001c94 <main+0xbfc>)
 8001aea:	edd3 7a00 	vldr	s15, [r3]
 8001aee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001af2:	4b69      	ldr	r3, [pc, #420]	; (8001c98 <main+0xc00>)
 8001af4:	edc3 7a00 	vstr	s15, [r3]
 8001af8:	e263      	b.n	8001fc2 <main+0xf2a>
					} else if (micros() - timestamp2> (1 / Frequency) * 1000000) {
 8001afa:	f000 fdb1 	bl	8002660 <micros>
 8001afe:	4b61      	ldr	r3, [pc, #388]	; (8001c84 <main+0xbec>)
 8001b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b04:	1a84      	subs	r4, r0, r2
 8001b06:	653c      	str	r4, [r7, #80]	; 0x50
 8001b08:	eb61 0303 	sbc.w	r3, r1, r3
 8001b0c:	657b      	str	r3, [r7, #84]	; 0x54
 8001b0e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001b12:	f7ff f8ff 	bl	8000d14 <__aeabi_ul2f>
 8001b16:	ee06 0a10 	vmov	s12, r0
 8001b1a:	4b5b      	ldr	r3, [pc, #364]	; (8001c88 <main+0xbf0>)
 8001b1c:	ed93 7a00 	vldr	s14, [r3]
 8001b20:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001b24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b28:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8001c8c <main+0xbf4>
 8001b2c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b30:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8001b34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b38:	f340 8243 	ble.w	8001fc2 <main+0xf2a>
						timestamp2 = micros();
 8001b3c:	f000 fd90 	bl	8002660 <micros>
 8001b40:	4602      	mov	r2, r0
 8001b42:	460b      	mov	r3, r1
 8001b44:	494f      	ldr	r1, [pc, #316]	; (8001c84 <main+0xbec>)
 8001b46:	e9c1 2300 	strd	r2, r3, [r1]
 8001b4a:	e23a      	b.n	8001fc2 <main+0xf2a>
					}
				} else if (Slope == 2) {
 8001b4c:	4b4c      	ldr	r3, [pc, #304]	; (8001c80 <main+0xbe8>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	2b02      	cmp	r3, #2
 8001b52:	f040 8236 	bne.w	8001fc2 <main+0xf2a>
					if (micros() - timestamp2 <= (1 / Frequency) * 1000000) {
 8001b56:	f000 fd83 	bl	8002660 <micros>
 8001b5a:	4b4a      	ldr	r3, [pc, #296]	; (8001c84 <main+0xbec>)
 8001b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b60:	1a84      	subs	r4, r0, r2
 8001b62:	64bc      	str	r4, [r7, #72]	; 0x48
 8001b64:	eb61 0303 	sbc.w	r3, r1, r3
 8001b68:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b6a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001b6e:	f7ff f8d1 	bl	8000d14 <__aeabi_ul2f>
 8001b72:	ee06 0a10 	vmov	s12, r0
 8001b76:	4b44      	ldr	r3, [pc, #272]	; (8001c88 <main+0xbf0>)
 8001b78:	ed93 7a00 	vldr	s14, [r3]
 8001b7c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001b80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b84:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8001c8c <main+0xbf4>
 8001b88:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b8c:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8001b90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b94:	d82f      	bhi.n	8001bf6 <main+0xb5e>
						Voltageout = V_high - (V_high - V_low)* ((micros() - timestamp2)/ ((1 / Frequency) * 1000000));
 8001b96:	4b3e      	ldr	r3, [pc, #248]	; (8001c90 <main+0xbf8>)
 8001b98:	ed93 8a00 	vldr	s16, [r3]
 8001b9c:	4b3c      	ldr	r3, [pc, #240]	; (8001c90 <main+0xbf8>)
 8001b9e:	ed93 7a00 	vldr	s14, [r3]
 8001ba2:	4b3c      	ldr	r3, [pc, #240]	; (8001c94 <main+0xbfc>)
 8001ba4:	edd3 7a00 	vldr	s15, [r3]
 8001ba8:	ee77 8a67 	vsub.f32	s17, s14, s15
 8001bac:	f000 fd58 	bl	8002660 <micros>
 8001bb0:	4b34      	ldr	r3, [pc, #208]	; (8001c84 <main+0xbec>)
 8001bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bb6:	1a84      	subs	r4, r0, r2
 8001bb8:	643c      	str	r4, [r7, #64]	; 0x40
 8001bba:	eb61 0303 	sbc.w	r3, r1, r3
 8001bbe:	647b      	str	r3, [r7, #68]	; 0x44
 8001bc0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001bc4:	f7ff f8a6 	bl	8000d14 <__aeabi_ul2f>
 8001bc8:	ee06 0a10 	vmov	s12, r0
 8001bcc:	4b2e      	ldr	r3, [pc, #184]	; (8001c88 <main+0xbf0>)
 8001bce:	ed93 7a00 	vldr	s14, [r3]
 8001bd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001bd6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001bda:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8001c8c <main+0xbf4>
 8001bde:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001be2:	eec6 7a07 	vdiv.f32	s15, s12, s14
 8001be6:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8001bea:	ee78 7a67 	vsub.f32	s15, s16, s15
 8001bee:	4b2a      	ldr	r3, [pc, #168]	; (8001c98 <main+0xc00>)
 8001bf0:	edc3 7a00 	vstr	s15, [r3]
 8001bf4:	e1e5      	b.n	8001fc2 <main+0xf2a>
					} else if (micros() - timestamp2
 8001bf6:	f000 fd33 	bl	8002660 <micros>
 8001bfa:	4b22      	ldr	r3, [pc, #136]	; (8001c84 <main+0xbec>)
 8001bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c00:	1a84      	subs	r4, r0, r2
 8001c02:	63bc      	str	r4, [r7, #56]	; 0x38
 8001c04:	eb61 0303 	sbc.w	r3, r1, r3
 8001c08:	63fb      	str	r3, [r7, #60]	; 0x3c
							> (1 / Frequency) * 1000000) {
 8001c0a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001c0e:	f7ff f881 	bl	8000d14 <__aeabi_ul2f>
 8001c12:	ee06 0a10 	vmov	s12, r0
 8001c16:	4b1c      	ldr	r3, [pc, #112]	; (8001c88 <main+0xbf0>)
 8001c18:	ed93 7a00 	vldr	s14, [r3]
 8001c1c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001c20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c24:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001c8c <main+0xbf4>
 8001c28:	ee67 7a87 	vmul.f32	s15, s15, s14
					} else if (micros() - timestamp2
 8001c2c:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8001c30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c34:	f340 81c5 	ble.w	8001fc2 <main+0xf2a>
						timestamp2 = micros();
 8001c38:	f000 fd12 	bl	8002660 <micros>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	460b      	mov	r3, r1
 8001c40:	4910      	ldr	r1, [pc, #64]	; (8001c84 <main+0xbec>)
 8001c42:	e9c1 2300 	strd	r2, r3, [r1]
 8001c46:	e1bc      	b.n	8001fc2 <main+0xf2a>
 8001c48:	66666666 	.word	0x66666666
 8001c4c:	400a6666 	.word	0x400a6666
 8001c50:	200002cc 	.word	0x200002cc
 8001c54:	08007bf0 	.word	0x08007bf0
 8001c58:	20000460 	.word	0x20000460
 8001c5c:	2000000c 	.word	0x2000000c
 8001c60:	200002a0 	.word	0x200002a0
 8001c64:	08007c04 	.word	0x08007c04
 8001c68:	200001cc 	.word	0x200001cc
 8001c6c:	2000028c 	.word	0x2000028c
 8001c70:	40b00000 	.word	0x40b00000
 8001c74:	200002c8 	.word	0x200002c8
 8001c78:	200002b0 	.word	0x200002b0
 8001c7c:	200002a4 	.word	0x200002a4
 8001c80:	20000008 	.word	0x20000008
 8001c84:	200002b8 	.word	0x200002b8
 8001c88:	20000004 	.word	0x20000004
 8001c8c:	49742400 	.word	0x49742400
 8001c90:	20000010 	.word	0x20000010
 8001c94:	200002a8 	.word	0x200002a8
 8001c98:	200002c4 	.word	0x200002c4
					}
				}
			} else if (waveform == 2) {//sin
 8001c9c:	4baa      	ldr	r3, [pc, #680]	; (8001f48 <main+0xeb0>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	f040 80c3 	bne.w	8001e2c <main+0xd94>
				if (micros() - timestamp2 <= ((1 / Frequency) * 1000000)) {
 8001ca6:	f000 fcdb 	bl	8002660 <micros>
 8001caa:	4ba8      	ldr	r3, [pc, #672]	; (8001f4c <main+0xeb4>)
 8001cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cb0:	1a84      	subs	r4, r0, r2
 8001cb2:	633c      	str	r4, [r7, #48]	; 0x30
 8001cb4:	eb61 0303 	sbc.w	r3, r1, r3
 8001cb8:	637b      	str	r3, [r7, #52]	; 0x34
 8001cba:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001cbe:	f7ff f829 	bl	8000d14 <__aeabi_ul2f>
 8001cc2:	ee06 0a10 	vmov	s12, r0
 8001cc6:	4ba2      	ldr	r3, [pc, #648]	; (8001f50 <main+0xeb8>)
 8001cc8:	ed93 7a00 	vldr	s14, [r3]
 8001ccc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001cd0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001cd4:	ed9f 7a9f 	vldr	s14, [pc, #636]	; 8001f54 <main+0xebc>
 8001cd8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cdc:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8001ce0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ce4:	d879      	bhi.n	8001dda <main+0xd42>
					Sine_angle = ((micros() - timestamp2)/ ((1 / Frequency) * 1000000)) * 2 * 3.14;//rad
 8001ce6:	f000 fcbb 	bl	8002660 <micros>
 8001cea:	4b98      	ldr	r3, [pc, #608]	; (8001f4c <main+0xeb4>)
 8001cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cf0:	1a84      	subs	r4, r0, r2
 8001cf2:	62bc      	str	r4, [r7, #40]	; 0x28
 8001cf4:	eb61 0303 	sbc.w	r3, r1, r3
 8001cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001cfa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001cfe:	f7ff f809 	bl	8000d14 <__aeabi_ul2f>
 8001d02:	ee06 0a10 	vmov	s12, r0
 8001d06:	4b92      	ldr	r3, [pc, #584]	; (8001f50 <main+0xeb8>)
 8001d08:	ed93 7a00 	vldr	s14, [r3]
 8001d0c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001d10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d14:	ed9f 7a8f 	vldr	s14, [pc, #572]	; 8001f54 <main+0xebc>
 8001d18:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001d1c:	eec6 7a07 	vdiv.f32	s15, s12, s14
 8001d20:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001d24:	ee17 0a90 	vmov	r0, s15
 8001d28:	f7fe fbc2 	bl	80004b0 <__aeabi_f2d>
 8001d2c:	a384      	add	r3, pc, #528	; (adr r3, 8001f40 <main+0xea8>)
 8001d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d32:	f7fe fc15 	bl	8000560 <__aeabi_dmul>
 8001d36:	4602      	mov	r2, r0
 8001d38:	460b      	mov	r3, r1
 8001d3a:	4610      	mov	r0, r2
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	f7fe fed1 	bl	8000ae4 <__aeabi_d2f>
 8001d42:	4602      	mov	r2, r0
 8001d44:	4b84      	ldr	r3, [pc, #528]	; (8001f58 <main+0xec0>)
 8001d46:	601a      	str	r2, [r3, #0]
					Voltageout = V_low+((sin(Sine_angle) + 1) * (V_high - V_low) / 2);
 8001d48:	4b84      	ldr	r3, [pc, #528]	; (8001f5c <main+0xec4>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7fe fbaf 	bl	80004b0 <__aeabi_f2d>
 8001d52:	4680      	mov	r8, r0
 8001d54:	4689      	mov	r9, r1
 8001d56:	4b80      	ldr	r3, [pc, #512]	; (8001f58 <main+0xec0>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f7fe fba8 	bl	80004b0 <__aeabi_f2d>
 8001d60:	4602      	mov	r2, r0
 8001d62:	460b      	mov	r3, r1
 8001d64:	ec43 2b10 	vmov	d0, r2, r3
 8001d68:	f004 fe9a 	bl	8006aa0 <sin>
 8001d6c:	ec51 0b10 	vmov	r0, r1, d0
 8001d70:	f04f 0200 	mov.w	r2, #0
 8001d74:	4b7a      	ldr	r3, [pc, #488]	; (8001f60 <main+0xec8>)
 8001d76:	f7fe fa3d 	bl	80001f4 <__adddf3>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	4614      	mov	r4, r2
 8001d80:	461d      	mov	r5, r3
 8001d82:	4b78      	ldr	r3, [pc, #480]	; (8001f64 <main+0xecc>)
 8001d84:	ed93 7a00 	vldr	s14, [r3]
 8001d88:	4b74      	ldr	r3, [pc, #464]	; (8001f5c <main+0xec4>)
 8001d8a:	edd3 7a00 	vldr	s15, [r3]
 8001d8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d92:	ee17 0a90 	vmov	r0, s15
 8001d96:	f7fe fb8b 	bl	80004b0 <__aeabi_f2d>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	460b      	mov	r3, r1
 8001d9e:	4620      	mov	r0, r4
 8001da0:	4629      	mov	r1, r5
 8001da2:	f7fe fbdd 	bl	8000560 <__aeabi_dmul>
 8001da6:	4602      	mov	r2, r0
 8001da8:	460b      	mov	r3, r1
 8001daa:	4610      	mov	r0, r2
 8001dac:	4619      	mov	r1, r3
 8001dae:	f04f 0200 	mov.w	r2, #0
 8001db2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001db6:	f7fe fcfd 	bl	80007b4 <__aeabi_ddiv>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	460b      	mov	r3, r1
 8001dbe:	4640      	mov	r0, r8
 8001dc0:	4649      	mov	r1, r9
 8001dc2:	f7fe fa17 	bl	80001f4 <__adddf3>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	460b      	mov	r3, r1
 8001dca:	4610      	mov	r0, r2
 8001dcc:	4619      	mov	r1, r3
 8001dce:	f7fe fe89 	bl	8000ae4 <__aeabi_d2f>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	4b64      	ldr	r3, [pc, #400]	; (8001f68 <main+0xed0>)
 8001dd6:	601a      	str	r2, [r3, #0]
 8001dd8:	e0f3      	b.n	8001fc2 <main+0xf2a>
				} else if (micros() - timestamp2 > ((1 / Frequency) * 1000000)) {
 8001dda:	f000 fc41 	bl	8002660 <micros>
 8001dde:	4b5b      	ldr	r3, [pc, #364]	; (8001f4c <main+0xeb4>)
 8001de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001de4:	1a84      	subs	r4, r0, r2
 8001de6:	623c      	str	r4, [r7, #32]
 8001de8:	eb61 0303 	sbc.w	r3, r1, r3
 8001dec:	627b      	str	r3, [r7, #36]	; 0x24
 8001dee:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001df2:	f7fe ff8f 	bl	8000d14 <__aeabi_ul2f>
 8001df6:	ee06 0a10 	vmov	s12, r0
 8001dfa:	4b55      	ldr	r3, [pc, #340]	; (8001f50 <main+0xeb8>)
 8001dfc:	ed93 7a00 	vldr	s14, [r3]
 8001e00:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001e04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e08:	ed9f 7a52 	vldr	s14, [pc, #328]	; 8001f54 <main+0xebc>
 8001e0c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e10:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8001e14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e18:	f340 80d3 	ble.w	8001fc2 <main+0xf2a>
					timestamp2 = micros();
 8001e1c:	f000 fc20 	bl	8002660 <micros>
 8001e20:	4602      	mov	r2, r0
 8001e22:	460b      	mov	r3, r1
 8001e24:	4949      	ldr	r1, [pc, #292]	; (8001f4c <main+0xeb4>)
 8001e26:	e9c1 2300 	strd	r2, r3, [r1]
 8001e2a:	e0ca      	b.n	8001fc2 <main+0xf2a>
				}
			} else if (waveform == 3) {//Square
 8001e2c:	4b46      	ldr	r3, [pc, #280]	; (8001f48 <main+0xeb0>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	2b03      	cmp	r3, #3
 8001e32:	f040 80c6 	bne.w	8001fc2 <main+0xf2a>

				if (micros() - timestamp2 <= ((1 / Frequency) * 1000000)) {
 8001e36:	f000 fc13 	bl	8002660 <micros>
 8001e3a:	4b44      	ldr	r3, [pc, #272]	; (8001f4c <main+0xeb4>)
 8001e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e40:	1a84      	subs	r4, r0, r2
 8001e42:	61bc      	str	r4, [r7, #24]
 8001e44:	eb61 0303 	sbc.w	r3, r1, r3
 8001e48:	61fb      	str	r3, [r7, #28]
 8001e4a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001e4e:	f7fe ff61 	bl	8000d14 <__aeabi_ul2f>
 8001e52:	ee06 0a10 	vmov	s12, r0
 8001e56:	4b3e      	ldr	r3, [pc, #248]	; (8001f50 <main+0xeb8>)
 8001e58:	ed93 7a00 	vldr	s14, [r3]
 8001e5c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001e60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e64:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8001f54 <main+0xebc>
 8001e68:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e6c:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8001e70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e74:	d87e      	bhi.n	8001f74 <main+0xedc>
					if (micros() - timestamp2
 8001e76:	f000 fbf3 	bl	8002660 <micros>
 8001e7a:	4b34      	ldr	r3, [pc, #208]	; (8001f4c <main+0xeb4>)
 8001e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e80:	1a84      	subs	r4, r0, r2
 8001e82:	613c      	str	r4, [r7, #16]
 8001e84:	eb61 0303 	sbc.w	r3, r1, r3
 8001e88:	617b      	str	r3, [r7, #20]
							<= ((1 / Frequency) * 1000000) * Duty_cycle / 100) {
 8001e8a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001e8e:	f7fe ff41 	bl	8000d14 <__aeabi_ul2f>
 8001e92:	ee06 0a10 	vmov	s12, r0
 8001e96:	4b2e      	ldr	r3, [pc, #184]	; (8001f50 <main+0xeb8>)
 8001e98:	ed93 7a00 	vldr	s14, [r3]
 8001e9c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001ea0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ea4:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8001f54 <main+0xebc>
 8001ea8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001eac:	4b2f      	ldr	r3, [pc, #188]	; (8001f6c <main+0xed4>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	ee07 3a90 	vmov	s15, r3
 8001eb4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001eb8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ebc:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8001f70 <main+0xed8>
 8001ec0:	eec7 7a26 	vdiv.f32	s15, s14, s13
					if (micros() - timestamp2
 8001ec4:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8001ec8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ecc:	d804      	bhi.n	8001ed8 <main+0xe40>
						Voltageout = V_high;
 8001ece:	4b25      	ldr	r3, [pc, #148]	; (8001f64 <main+0xecc>)
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	4b25      	ldr	r3, [pc, #148]	; (8001f68 <main+0xed0>)
 8001ed4:	601a      	str	r2, [r3, #0]
 8001ed6:	e074      	b.n	8001fc2 <main+0xf2a>
					} else if (micros() - timestamp2
 8001ed8:	f000 fbc2 	bl	8002660 <micros>
 8001edc:	4b1b      	ldr	r3, [pc, #108]	; (8001f4c <main+0xeb4>)
 8001ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ee2:	1a84      	subs	r4, r0, r2
 8001ee4:	60bc      	str	r4, [r7, #8]
 8001ee6:	eb61 0303 	sbc.w	r3, r1, r3
 8001eea:	60fb      	str	r3, [r7, #12]
							> ((1 / Frequency) * 1000000) * Duty_cycle / 100) {
 8001eec:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001ef0:	f7fe ff10 	bl	8000d14 <__aeabi_ul2f>
 8001ef4:	ee06 0a10 	vmov	s12, r0
 8001ef8:	4b15      	ldr	r3, [pc, #84]	; (8001f50 <main+0xeb8>)
 8001efa:	ed93 7a00 	vldr	s14, [r3]
 8001efe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001f02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f06:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8001f54 <main+0xebc>
 8001f0a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001f0e:	4b17      	ldr	r3, [pc, #92]	; (8001f6c <main+0xed4>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	ee07 3a90 	vmov	s15, r3
 8001f16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f1a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f1e:	eddf 6a14 	vldr	s13, [pc, #80]	; 8001f70 <main+0xed8>
 8001f22:	eec7 7a26 	vdiv.f32	s15, s14, s13
					} else if (micros() - timestamp2
 8001f26:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8001f2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f2e:	dd48      	ble.n	8001fc2 <main+0xf2a>
						Voltageout = V_low;
 8001f30:	4b0a      	ldr	r3, [pc, #40]	; (8001f5c <main+0xec4>)
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	4b0c      	ldr	r3, [pc, #48]	; (8001f68 <main+0xed0>)
 8001f36:	601a      	str	r2, [r3, #0]
 8001f38:	e043      	b.n	8001fc2 <main+0xf2a>
 8001f3a:	bf00      	nop
 8001f3c:	f3af 8000 	nop.w
 8001f40:	51eb851f 	.word	0x51eb851f
 8001f44:	40091eb8 	.word	0x40091eb8
 8001f48:	200002a4 	.word	0x200002a4
 8001f4c:	200002b8 	.word	0x200002b8
 8001f50:	20000004 	.word	0x20000004
 8001f54:	49742400 	.word	0x49742400
 8001f58:	2000029c 	.word	0x2000029c
 8001f5c:	200002a8 	.word	0x200002a8
 8001f60:	3ff00000 	.word	0x3ff00000
 8001f64:	20000010 	.word	0x20000010
 8001f68:	200002c4 	.word	0x200002c4
 8001f6c:	2000000c 	.word	0x2000000c
 8001f70:	42c80000 	.word	0x42c80000
					}
				} else if (micros() - timestamp2 > ((1 / Frequency) * 1000000)) {
 8001f74:	f000 fb74 	bl	8002660 <micros>
 8001f78:	4b31      	ldr	r3, [pc, #196]	; (8002040 <main+0xfa8>)
 8001f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f7e:	1a84      	subs	r4, r0, r2
 8001f80:	603c      	str	r4, [r7, #0]
 8001f82:	eb61 0303 	sbc.w	r3, r1, r3
 8001f86:	607b      	str	r3, [r7, #4]
 8001f88:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001f8c:	f7fe fec2 	bl	8000d14 <__aeabi_ul2f>
 8001f90:	ee06 0a10 	vmov	s12, r0
 8001f94:	4b2b      	ldr	r3, [pc, #172]	; (8002044 <main+0xfac>)
 8001f96:	ed93 7a00 	vldr	s14, [r3]
 8001f9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001f9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001fa2:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8002048 <main+0xfb0>
 8001fa6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001faa:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8001fae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fb2:	dd06      	ble.n	8001fc2 <main+0xf2a>
					timestamp2 = micros();
 8001fb4:	f000 fb54 	bl	8002660 <micros>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	460b      	mov	r3, r1
 8001fbc:	4920      	ldr	r1, [pc, #128]	; (8002040 <main+0xfa8>)
 8001fbe:	e9c1 2300 	strd	r2, r3, [r1]
				}
			}
			dataOut = (int) (Voltageout * 4095 / 3.3);
 8001fc2:	4b22      	ldr	r3, [pc, #136]	; (800204c <main+0xfb4>)
 8001fc4:	edd3 7a00 	vldr	s15, [r3]
 8001fc8:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8002050 <main+0xfb8>
 8001fcc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fd0:	ee17 0a90 	vmov	r0, s15
 8001fd4:	f7fe fa6c 	bl	80004b0 <__aeabi_f2d>
 8001fd8:	a317      	add	r3, pc, #92	; (adr r3, 8002038 <main+0xfa0>)
 8001fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fde:	f7fe fbe9 	bl	80007b4 <__aeabi_ddiv>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	460b      	mov	r3, r1
 8001fe6:	4610      	mov	r0, r2
 8001fe8:	4619      	mov	r1, r3
 8001fea:	f7fe fd53 	bl	8000a94 <__aeabi_d2iz>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	b29b      	uxth	r3, r3
 8001ff2:	4a18      	ldr	r2, [pc, #96]	; (8002054 <main+0xfbc>)
 8001ff4:	8013      	strh	r3, [r2, #0]
			if (hspi3.State == HAL_SPI_STATE_READY && HAL_GPIO_ReadPin(SPI_SS_GPIO_Port, SPI_SS_Pin)== GPIO_PIN_SET) {
 8001ff6:	4b18      	ldr	r3, [pc, #96]	; (8002058 <main+0xfc0>)
 8001ff8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d10f      	bne.n	8002022 <main+0xf8a>
 8002002:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002006:	4815      	ldr	r0, [pc, #84]	; (800205c <main+0xfc4>)
 8002008:	f002 f9c6 	bl	8004398 <HAL_GPIO_ReadPin>
 800200c:	4603      	mov	r3, r0
 800200e:	2b01      	cmp	r3, #1
 8002010:	d107      	bne.n	8002022 <main+0xf8a>
				MCP4922SetOutput(DACConfig, dataOut);
 8002012:	4b13      	ldr	r3, [pc, #76]	; (8002060 <main+0xfc8>)
 8002014:	781a      	ldrb	r2, [r3, #0]
 8002016:	4b0f      	ldr	r3, [pc, #60]	; (8002054 <main+0xfbc>)
 8002018:	881b      	ldrh	r3, [r3, #0]
 800201a:	4619      	mov	r1, r3
 800201c:	4610      	mov	r0, r2
 800201e:	f000 fac7 	bl	80025b0 <MCP4922SetOutput>
			}
			timestamp = micros();
 8002022:	f000 fb1d 	bl	8002660 <micros>
 8002026:	4602      	mov	r2, r0
 8002028:	460b      	mov	r3, r1
 800202a:	490e      	ldr	r1, [pc, #56]	; (8002064 <main+0xfcc>)
 800202c:	e9c1 2300 	strd	r2, r3, [r1]
	while (1) {
 8002030:	f7ff b85b 	b.w	80010ea <main+0x52>
 8002034:	f3af 8000 	nop.w
 8002038:	66666666 	.word	0x66666666
 800203c:	400a6666 	.word	0x400a6666
 8002040:	200002b8 	.word	0x200002b8
 8002044:	20000004 	.word	0x20000004
 8002048:	49742400 	.word	0x49742400
 800204c:	200002c4 	.word	0x200002c4
 8002050:	457ff000 	.word	0x457ff000
 8002054:	20000298 	.word	0x20000298
 8002058:	20000318 	.word	0x20000318
 800205c:	40020400 	.word	0x40020400
 8002060:	20000000 	.word	0x20000000
 8002064:	200002b0 	.word	0x200002b0

08002068 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002068:	b580      	push	{r7, lr}
 800206a:	b094      	sub	sp, #80	; 0x50
 800206c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800206e:	f107 0320 	add.w	r3, r7, #32
 8002072:	2230      	movs	r2, #48	; 0x30
 8002074:	2100      	movs	r1, #0
 8002076:	4618      	mov	r0, r3
 8002078:	f004 fd0a 	bl	8006a90 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800207c:	f107 030c 	add.w	r3, r7, #12
 8002080:	2200      	movs	r2, #0
 8002082:	601a      	str	r2, [r3, #0]
 8002084:	605a      	str	r2, [r3, #4]
 8002086:	609a      	str	r2, [r3, #8]
 8002088:	60da      	str	r2, [r3, #12]
 800208a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800208c:	2300      	movs	r3, #0
 800208e:	60bb      	str	r3, [r7, #8]
 8002090:	4b27      	ldr	r3, [pc, #156]	; (8002130 <SystemClock_Config+0xc8>)
 8002092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002094:	4a26      	ldr	r2, [pc, #152]	; (8002130 <SystemClock_Config+0xc8>)
 8002096:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800209a:	6413      	str	r3, [r2, #64]	; 0x40
 800209c:	4b24      	ldr	r3, [pc, #144]	; (8002130 <SystemClock_Config+0xc8>)
 800209e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020a4:	60bb      	str	r3, [r7, #8]
 80020a6:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80020a8:	2300      	movs	r3, #0
 80020aa:	607b      	str	r3, [r7, #4]
 80020ac:	4b21      	ldr	r3, [pc, #132]	; (8002134 <SystemClock_Config+0xcc>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a20      	ldr	r2, [pc, #128]	; (8002134 <SystemClock_Config+0xcc>)
 80020b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80020b6:	6013      	str	r3, [r2, #0]
 80020b8:	4b1e      	ldr	r3, [pc, #120]	; (8002134 <SystemClock_Config+0xcc>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80020c0:	607b      	str	r3, [r7, #4]
 80020c2:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80020c4:	2302      	movs	r3, #2
 80020c6:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80020c8:	2301      	movs	r3, #1
 80020ca:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80020cc:	2310      	movs	r3, #16
 80020ce:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80020d0:	2302      	movs	r3, #2
 80020d2:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80020d4:	2300      	movs	r3, #0
 80020d6:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 80020d8:	2308      	movs	r3, #8
 80020da:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 100;
 80020dc:	2364      	movs	r3, #100	; 0x64
 80020de:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80020e0:	2302      	movs	r3, #2
 80020e2:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80020e4:	2304      	movs	r3, #4
 80020e6:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80020e8:	f107 0320 	add.w	r3, r7, #32
 80020ec:	4618      	mov	r0, r3
 80020ee:	f002 f985 	bl	80043fc <HAL_RCC_OscConfig>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d001      	beq.n	80020fc <SystemClock_Config+0x94>
		Error_Handler();
 80020f8:	f000 facc 	bl	8002694 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80020fc:	230f      	movs	r3, #15
 80020fe:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002100:	2302      	movs	r3, #2
 8002102:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002104:	2300      	movs	r3, #0
 8002106:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002108:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800210c:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800210e:	2300      	movs	r3, #0
 8002110:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 8002112:	f107 030c 	add.w	r3, r7, #12
 8002116:	2103      	movs	r1, #3
 8002118:	4618      	mov	r0, r3
 800211a:	f002 fbe7 	bl	80048ec <HAL_RCC_ClockConfig>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d001      	beq.n	8002128 <SystemClock_Config+0xc0>
		Error_Handler();
 8002124:	f000 fab6 	bl	8002694 <Error_Handler>
	}
}
 8002128:	bf00      	nop
 800212a:	3750      	adds	r7, #80	; 0x50
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}
 8002130:	40023800 	.word	0x40023800
 8002134:	40007000 	.word	0x40007000

08002138 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8002138:	b580      	push	{r7, lr}
 800213a:	b084      	sub	sp, #16
 800213c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 800213e:	463b      	mov	r3, r7
 8002140:	2200      	movs	r2, #0
 8002142:	601a      	str	r2, [r3, #0]
 8002144:	605a      	str	r2, [r3, #4]
 8002146:	609a      	str	r2, [r3, #8]
 8002148:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 800214a:	4b22      	ldr	r3, [pc, #136]	; (80021d4 <MX_ADC1_Init+0x9c>)
 800214c:	4a22      	ldr	r2, [pc, #136]	; (80021d8 <MX_ADC1_Init+0xa0>)
 800214e:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002150:	4b20      	ldr	r3, [pc, #128]	; (80021d4 <MX_ADC1_Init+0x9c>)
 8002152:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002156:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002158:	4b1e      	ldr	r3, [pc, #120]	; (80021d4 <MX_ADC1_Init+0x9c>)
 800215a:	2200      	movs	r2, #0
 800215c:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ENABLE;
 800215e:	4b1d      	ldr	r3, [pc, #116]	; (80021d4 <MX_ADC1_Init+0x9c>)
 8002160:	2201      	movs	r2, #1
 8002162:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8002164:	4b1b      	ldr	r3, [pc, #108]	; (80021d4 <MX_ADC1_Init+0x9c>)
 8002166:	2200      	movs	r2, #0
 8002168:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800216a:	4b1a      	ldr	r3, [pc, #104]	; (80021d4 <MX_ADC1_Init+0x9c>)
 800216c:	2200      	movs	r2, #0
 800216e:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002172:	4b18      	ldr	r3, [pc, #96]	; (80021d4 <MX_ADC1_Init+0x9c>)
 8002174:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002178:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 800217a:	4b16      	ldr	r3, [pc, #88]	; (80021d4 <MX_ADC1_Init+0x9c>)
 800217c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002180:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002182:	4b14      	ldr	r3, [pc, #80]	; (80021d4 <MX_ADC1_Init+0x9c>)
 8002184:	2200      	movs	r2, #0
 8002186:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 8002188:	4b12      	ldr	r3, [pc, #72]	; (80021d4 <MX_ADC1_Init+0x9c>)
 800218a:	2201      	movs	r2, #1
 800218c:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = ENABLE;
 800218e:	4b11      	ldr	r3, [pc, #68]	; (80021d4 <MX_ADC1_Init+0x9c>)
 8002190:	2201      	movs	r2, #1
 8002192:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8002196:	4b0f      	ldr	r3, [pc, #60]	; (80021d4 <MX_ADC1_Init+0x9c>)
 8002198:	2200      	movs	r2, #0
 800219a:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 800219c:	480d      	ldr	r0, [pc, #52]	; (80021d4 <MX_ADC1_Init+0x9c>)
 800219e:	f000 fd0d 	bl	8002bbc <HAL_ADC_Init>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d001      	beq.n	80021ac <MX_ADC1_Init+0x74>
		Error_Handler();
 80021a8:	f000 fa74 	bl	8002694 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 80021ac:	2300      	movs	r3, #0
 80021ae:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 80021b0:	2301      	movs	r3, #1
 80021b2:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80021b4:	2300      	movs	r3, #0
 80021b6:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80021b8:	463b      	mov	r3, r7
 80021ba:	4619      	mov	r1, r3
 80021bc:	4805      	ldr	r0, [pc, #20]	; (80021d4 <MX_ADC1_Init+0x9c>)
 80021be:	f000 ff99 	bl	80030f4 <HAL_ADC_ConfigChannel>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d001      	beq.n	80021cc <MX_ADC1_Init+0x94>
		Error_Handler();
 80021c8:	f000 fa64 	bl	8002694 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 80021cc:	bf00      	nop
 80021ce:	3710      	adds	r7, #16
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	20000370 	.word	0x20000370
 80021d8:	40012000 	.word	0x40012000

080021dc <MX_SPI3_Init>:
/**
 * @brief SPI3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI3_Init(void) {
 80021dc:	b580      	push	{r7, lr}
 80021de:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI3_Init 1 */

	/* USER CODE END SPI3_Init 1 */
	/* SPI3 parameter configuration*/
	hspi3.Instance = SPI3;
 80021e0:	4b18      	ldr	r3, [pc, #96]	; (8002244 <MX_SPI3_Init+0x68>)
 80021e2:	4a19      	ldr	r2, [pc, #100]	; (8002248 <MX_SPI3_Init+0x6c>)
 80021e4:	601a      	str	r2, [r3, #0]
	hspi3.Init.Mode = SPI_MODE_MASTER;
 80021e6:	4b17      	ldr	r3, [pc, #92]	; (8002244 <MX_SPI3_Init+0x68>)
 80021e8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80021ec:	605a      	str	r2, [r3, #4]
	hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80021ee:	4b15      	ldr	r3, [pc, #84]	; (8002244 <MX_SPI3_Init+0x68>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	609a      	str	r2, [r3, #8]
	hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 80021f4:	4b13      	ldr	r3, [pc, #76]	; (8002244 <MX_SPI3_Init+0x68>)
 80021f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80021fa:	60da      	str	r2, [r3, #12]
	hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80021fc:	4b11      	ldr	r3, [pc, #68]	; (8002244 <MX_SPI3_Init+0x68>)
 80021fe:	2200      	movs	r2, #0
 8002200:	611a      	str	r2, [r3, #16]
	hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002202:	4b10      	ldr	r3, [pc, #64]	; (8002244 <MX_SPI3_Init+0x68>)
 8002204:	2200      	movs	r2, #0
 8002206:	615a      	str	r2, [r3, #20]
	hspi3.Init.NSS = SPI_NSS_SOFT;
 8002208:	4b0e      	ldr	r3, [pc, #56]	; (8002244 <MX_SPI3_Init+0x68>)
 800220a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800220e:	619a      	str	r2, [r3, #24]
	hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002210:	4b0c      	ldr	r3, [pc, #48]	; (8002244 <MX_SPI3_Init+0x68>)
 8002212:	2208      	movs	r2, #8
 8002214:	61da      	str	r2, [r3, #28]
	hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002216:	4b0b      	ldr	r3, [pc, #44]	; (8002244 <MX_SPI3_Init+0x68>)
 8002218:	2200      	movs	r2, #0
 800221a:	621a      	str	r2, [r3, #32]
	hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800221c:	4b09      	ldr	r3, [pc, #36]	; (8002244 <MX_SPI3_Init+0x68>)
 800221e:	2200      	movs	r2, #0
 8002220:	625a      	str	r2, [r3, #36]	; 0x24
	hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002222:	4b08      	ldr	r3, [pc, #32]	; (8002244 <MX_SPI3_Init+0x68>)
 8002224:	2200      	movs	r2, #0
 8002226:	629a      	str	r2, [r3, #40]	; 0x28
	hspi3.Init.CRCPolynomial = 10;
 8002228:	4b06      	ldr	r3, [pc, #24]	; (8002244 <MX_SPI3_Init+0x68>)
 800222a:	220a      	movs	r2, #10
 800222c:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi3) != HAL_OK) {
 800222e:	4805      	ldr	r0, [pc, #20]	; (8002244 <MX_SPI3_Init+0x68>)
 8002230:	f002 fd58 	bl	8004ce4 <HAL_SPI_Init>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	d001      	beq.n	800223e <MX_SPI3_Init+0x62>
		Error_Handler();
 800223a:	f000 fa2b 	bl	8002694 <Error_Handler>
	}
	/* USER CODE BEGIN SPI3_Init 2 */

	/* USER CODE END SPI3_Init 2 */

}
 800223e:	bf00      	nop
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	20000318 	.word	0x20000318
 8002248:	40003c00 	.word	0x40003c00

0800224c <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 800224c:	b580      	push	{r7, lr}
 800224e:	b086      	sub	sp, #24
 8002250:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8002252:	f107 0308 	add.w	r3, r7, #8
 8002256:	2200      	movs	r2, #0
 8002258:	601a      	str	r2, [r3, #0]
 800225a:	605a      	str	r2, [r3, #4]
 800225c:	609a      	str	r2, [r3, #8]
 800225e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002260:	463b      	mov	r3, r7
 8002262:	2200      	movs	r2, #0
 8002264:	601a      	str	r2, [r3, #0]
 8002266:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8002268:	4b1d      	ldr	r3, [pc, #116]	; (80022e0 <MX_TIM2_Init+0x94>)
 800226a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800226e:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 99;
 8002270:	4b1b      	ldr	r3, [pc, #108]	; (80022e0 <MX_TIM2_Init+0x94>)
 8002272:	2263      	movs	r2, #99	; 0x63
 8002274:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002276:	4b1a      	ldr	r3, [pc, #104]	; (80022e0 <MX_TIM2_Init+0x94>)
 8002278:	2200      	movs	r2, #0
 800227a:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4294967295;
 800227c:	4b18      	ldr	r3, [pc, #96]	; (80022e0 <MX_TIM2_Init+0x94>)
 800227e:	f04f 32ff 	mov.w	r2, #4294967295
 8002282:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002284:	4b16      	ldr	r3, [pc, #88]	; (80022e0 <MX_TIM2_Init+0x94>)
 8002286:	2200      	movs	r2, #0
 8002288:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800228a:	4b15      	ldr	r3, [pc, #84]	; (80022e0 <MX_TIM2_Init+0x94>)
 800228c:	2200      	movs	r2, #0
 800228e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8002290:	4813      	ldr	r0, [pc, #76]	; (80022e0 <MX_TIM2_Init+0x94>)
 8002292:	f003 f8cb 	bl	800542c <HAL_TIM_Base_Init>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d001      	beq.n	80022a0 <MX_TIM2_Init+0x54>
		Error_Handler();
 800229c:	f000 f9fa 	bl	8002694 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022a4:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 80022a6:	f107 0308 	add.w	r3, r7, #8
 80022aa:	4619      	mov	r1, r3
 80022ac:	480c      	ldr	r0, [pc, #48]	; (80022e0 <MX_TIM2_Init+0x94>)
 80022ae:	f003 fad1 	bl	8005854 <HAL_TIM_ConfigClockSource>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d001      	beq.n	80022bc <MX_TIM2_Init+0x70>
		Error_Handler();
 80022b8:	f000 f9ec 	bl	8002694 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022bc:	2300      	movs	r3, #0
 80022be:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022c0:	2300      	movs	r3, #0
 80022c2:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 80022c4:	463b      	mov	r3, r7
 80022c6:	4619      	mov	r1, r3
 80022c8:	4805      	ldr	r0, [pc, #20]	; (80022e0 <MX_TIM2_Init+0x94>)
 80022ca:	f003 fcc9 	bl	8005c60 <HAL_TIMEx_MasterConfigSynchronization>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d001      	beq.n	80022d8 <MX_TIM2_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 80022d4:	f000 f9de 	bl	8002694 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 80022d8:	bf00      	nop
 80022da:	3718      	adds	r7, #24
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	20000418 	.word	0x20000418

080022e4 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b086      	sub	sp, #24
 80022e8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80022ea:	f107 0308 	add.w	r3, r7, #8
 80022ee:	2200      	movs	r2, #0
 80022f0:	601a      	str	r2, [r3, #0]
 80022f2:	605a      	str	r2, [r3, #4]
 80022f4:	609a      	str	r2, [r3, #8]
 80022f6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80022f8:	463b      	mov	r3, r7
 80022fa:	2200      	movs	r2, #0
 80022fc:	601a      	str	r2, [r3, #0]
 80022fe:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8002300:	4b1c      	ldr	r3, [pc, #112]	; (8002374 <MX_TIM3_Init+0x90>)
 8002302:	4a1d      	ldr	r2, [pc, #116]	; (8002378 <MX_TIM3_Init+0x94>)
 8002304:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 99;
 8002306:	4b1b      	ldr	r3, [pc, #108]	; (8002374 <MX_TIM3_Init+0x90>)
 8002308:	2263      	movs	r2, #99	; 0x63
 800230a:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800230c:	4b19      	ldr	r3, [pc, #100]	; (8002374 <MX_TIM3_Init+0x90>)
 800230e:	2200      	movs	r2, #0
 8002310:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 100;
 8002312:	4b18      	ldr	r3, [pc, #96]	; (8002374 <MX_TIM3_Init+0x90>)
 8002314:	2264      	movs	r2, #100	; 0x64
 8002316:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002318:	4b16      	ldr	r3, [pc, #88]	; (8002374 <MX_TIM3_Init+0x90>)
 800231a:	2200      	movs	r2, #0
 800231c:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800231e:	4b15      	ldr	r3, [pc, #84]	; (8002374 <MX_TIM3_Init+0x90>)
 8002320:	2200      	movs	r2, #0
 8002322:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8002324:	4813      	ldr	r0, [pc, #76]	; (8002374 <MX_TIM3_Init+0x90>)
 8002326:	f003 f881 	bl	800542c <HAL_TIM_Base_Init>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d001      	beq.n	8002334 <MX_TIM3_Init+0x50>
		Error_Handler();
 8002330:	f000 f9b0 	bl	8002694 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002334:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002338:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 800233a:	f107 0308 	add.w	r3, r7, #8
 800233e:	4619      	mov	r1, r3
 8002340:	480c      	ldr	r0, [pc, #48]	; (8002374 <MX_TIM3_Init+0x90>)
 8002342:	f003 fa87 	bl	8005854 <HAL_TIM_ConfigClockSource>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d001      	beq.n	8002350 <MX_TIM3_Init+0x6c>
		Error_Handler();
 800234c:	f000 f9a2 	bl	8002694 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002350:	2320      	movs	r3, #32
 8002352:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002354:	2300      	movs	r3, #0
 8002356:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8002358:	463b      	mov	r3, r7
 800235a:	4619      	mov	r1, r3
 800235c:	4805      	ldr	r0, [pc, #20]	; (8002374 <MX_TIM3_Init+0x90>)
 800235e:	f003 fc7f 	bl	8005c60 <HAL_TIMEx_MasterConfigSynchronization>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d001      	beq.n	800236c <MX_TIM3_Init+0x88>
			!= HAL_OK) {
		Error_Handler();
 8002368:	f000 f994 	bl	8002694 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 800236c:	bf00      	nop
 800236e:	3718      	adds	r7, #24
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}
 8002374:	200002d0 	.word	0x200002d0
 8002378:	40000400 	.word	0x40000400

0800237c <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 800237c:	b580      	push	{r7, lr}
 800237e:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8002380:	4b11      	ldr	r3, [pc, #68]	; (80023c8 <MX_USART2_UART_Init+0x4c>)
 8002382:	4a12      	ldr	r2, [pc, #72]	; (80023cc <MX_USART2_UART_Init+0x50>)
 8002384:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8002386:	4b10      	ldr	r3, [pc, #64]	; (80023c8 <MX_USART2_UART_Init+0x4c>)
 8002388:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800238c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800238e:	4b0e      	ldr	r3, [pc, #56]	; (80023c8 <MX_USART2_UART_Init+0x4c>)
 8002390:	2200      	movs	r2, #0
 8002392:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8002394:	4b0c      	ldr	r3, [pc, #48]	; (80023c8 <MX_USART2_UART_Init+0x4c>)
 8002396:	2200      	movs	r2, #0
 8002398:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800239a:	4b0b      	ldr	r3, [pc, #44]	; (80023c8 <MX_USART2_UART_Init+0x4c>)
 800239c:	2200      	movs	r2, #0
 800239e:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80023a0:	4b09      	ldr	r3, [pc, #36]	; (80023c8 <MX_USART2_UART_Init+0x4c>)
 80023a2:	220c      	movs	r2, #12
 80023a4:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023a6:	4b08      	ldr	r3, [pc, #32]	; (80023c8 <MX_USART2_UART_Init+0x4c>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80023ac:	4b06      	ldr	r3, [pc, #24]	; (80023c8 <MX_USART2_UART_Init+0x4c>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80023b2:	4805      	ldr	r0, [pc, #20]	; (80023c8 <MX_USART2_UART_Init+0x4c>)
 80023b4:	f003 fcd6 	bl	8005d64 <HAL_UART_Init>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d001      	beq.n	80023c2 <MX_USART2_UART_Init+0x46>
		Error_Handler();
 80023be:	f000 f969 	bl	8002694 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80023c2:	bf00      	nop
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	20000460 	.word	0x20000460
 80023cc:	40004400 	.word	0x40004400

080023d0 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 80023d6:	2300      	movs	r3, #0
 80023d8:	607b      	str	r3, [r7, #4]
 80023da:	4b0c      	ldr	r3, [pc, #48]	; (800240c <MX_DMA_Init+0x3c>)
 80023dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023de:	4a0b      	ldr	r2, [pc, #44]	; (800240c <MX_DMA_Init+0x3c>)
 80023e0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80023e4:	6313      	str	r3, [r2, #48]	; 0x30
 80023e6:	4b09      	ldr	r3, [pc, #36]	; (800240c <MX_DMA_Init+0x3c>)
 80023e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023ee:	607b      	str	r3, [r7, #4]
 80023f0:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80023f2:	2200      	movs	r2, #0
 80023f4:	2100      	movs	r1, #0
 80023f6:	2038      	movs	r0, #56	; 0x38
 80023f8:	f001 fa11 	bl	800381e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80023fc:	2038      	movs	r0, #56	; 0x38
 80023fe:	f001 fa2a 	bl	8003856 <HAL_NVIC_EnableIRQ>

}
 8002402:	bf00      	nop
 8002404:	3708      	adds	r7, #8
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	40023800 	.word	0x40023800

08002410 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8002410:	b580      	push	{r7, lr}
 8002412:	b08a      	sub	sp, #40	; 0x28
 8002414:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002416:	f107 0314 	add.w	r3, r7, #20
 800241a:	2200      	movs	r2, #0
 800241c:	601a      	str	r2, [r3, #0]
 800241e:	605a      	str	r2, [r3, #4]
 8002420:	609a      	str	r2, [r3, #8]
 8002422:	60da      	str	r2, [r3, #12]
 8002424:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002426:	2300      	movs	r3, #0
 8002428:	613b      	str	r3, [r7, #16]
 800242a:	4b44      	ldr	r3, [pc, #272]	; (800253c <MX_GPIO_Init+0x12c>)
 800242c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242e:	4a43      	ldr	r2, [pc, #268]	; (800253c <MX_GPIO_Init+0x12c>)
 8002430:	f043 0304 	orr.w	r3, r3, #4
 8002434:	6313      	str	r3, [r2, #48]	; 0x30
 8002436:	4b41      	ldr	r3, [pc, #260]	; (800253c <MX_GPIO_Init+0x12c>)
 8002438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243a:	f003 0304 	and.w	r3, r3, #4
 800243e:	613b      	str	r3, [r7, #16]
 8002440:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8002442:	2300      	movs	r3, #0
 8002444:	60fb      	str	r3, [r7, #12]
 8002446:	4b3d      	ldr	r3, [pc, #244]	; (800253c <MX_GPIO_Init+0x12c>)
 8002448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244a:	4a3c      	ldr	r2, [pc, #240]	; (800253c <MX_GPIO_Init+0x12c>)
 800244c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002450:	6313      	str	r3, [r2, #48]	; 0x30
 8002452:	4b3a      	ldr	r3, [pc, #232]	; (800253c <MX_GPIO_Init+0x12c>)
 8002454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002456:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800245a:	60fb      	str	r3, [r7, #12]
 800245c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800245e:	2300      	movs	r3, #0
 8002460:	60bb      	str	r3, [r7, #8]
 8002462:	4b36      	ldr	r3, [pc, #216]	; (800253c <MX_GPIO_Init+0x12c>)
 8002464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002466:	4a35      	ldr	r2, [pc, #212]	; (800253c <MX_GPIO_Init+0x12c>)
 8002468:	f043 0301 	orr.w	r3, r3, #1
 800246c:	6313      	str	r3, [r2, #48]	; 0x30
 800246e:	4b33      	ldr	r3, [pc, #204]	; (800253c <MX_GPIO_Init+0x12c>)
 8002470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002472:	f003 0301 	and.w	r3, r3, #1
 8002476:	60bb      	str	r3, [r7, #8]
 8002478:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800247a:	2300      	movs	r3, #0
 800247c:	607b      	str	r3, [r7, #4]
 800247e:	4b2f      	ldr	r3, [pc, #188]	; (800253c <MX_GPIO_Init+0x12c>)
 8002480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002482:	4a2e      	ldr	r2, [pc, #184]	; (800253c <MX_GPIO_Init+0x12c>)
 8002484:	f043 0302 	orr.w	r3, r3, #2
 8002488:	6313      	str	r3, [r2, #48]	; 0x30
 800248a:	4b2c      	ldr	r3, [pc, #176]	; (800253c <MX_GPIO_Init+0x12c>)
 800248c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248e:	f003 0302 	and.w	r3, r3, #2
 8002492:	607b      	str	r3, [r7, #4]
 8002494:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002496:	2200      	movs	r2, #0
 8002498:	2120      	movs	r1, #32
 800249a:	4829      	ldr	r0, [pc, #164]	; (8002540 <MX_GPIO_Init+0x130>)
 800249c:	f001 ff94 	bl	80043c8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_SET);
 80024a0:	2201      	movs	r2, #1
 80024a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80024a6:	4827      	ldr	r0, [pc, #156]	; (8002544 <MX_GPIO_Init+0x134>)
 80024a8:	f001 ff8e 	bl	80043c8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SHDN_GPIO_Port, SHDN_Pin, GPIO_PIN_SET);
 80024ac:	2201      	movs	r2, #1
 80024ae:	2180      	movs	r1, #128	; 0x80
 80024b0:	4825      	ldr	r0, [pc, #148]	; (8002548 <MX_GPIO_Init+0x138>)
 80024b2:	f001 ff89 	bl	80043c8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LOAD_GPIO_Port, LOAD_Pin, GPIO_PIN_SET);
 80024b6:	2201      	movs	r2, #1
 80024b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80024bc:	4820      	ldr	r0, [pc, #128]	; (8002540 <MX_GPIO_Init+0x130>)
 80024be:	f001 ff83 	bl	80043c8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 80024c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024c6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80024c8:	4b20      	ldr	r3, [pc, #128]	; (800254c <MX_GPIO_Init+0x13c>)
 80024ca:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024cc:	2300      	movs	r3, #0
 80024ce:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80024d0:	f107 0314 	add.w	r3, r7, #20
 80024d4:	4619      	mov	r1, r3
 80024d6:	481c      	ldr	r0, [pc, #112]	; (8002548 <MX_GPIO_Init+0x138>)
 80024d8:	f001 fdda 	bl	8004090 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD2_Pin LOAD_Pin */
	GPIO_InitStruct.Pin = LD2_Pin | LOAD_Pin;
 80024dc:	f44f 7308 	mov.w	r3, #544	; 0x220
 80024e0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024e2:	2301      	movs	r3, #1
 80024e4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e6:	2300      	movs	r3, #0
 80024e8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ea:	2300      	movs	r3, #0
 80024ec:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024ee:	f107 0314 	add.w	r3, r7, #20
 80024f2:	4619      	mov	r1, r3
 80024f4:	4812      	ldr	r0, [pc, #72]	; (8002540 <MX_GPIO_Init+0x130>)
 80024f6:	f001 fdcb 	bl	8004090 <HAL_GPIO_Init>

	/*Configure GPIO pin : SPI_SS_Pin */
	GPIO_InitStruct.Pin = SPI_SS_Pin;
 80024fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024fe:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002500:	2301      	movs	r3, #1
 8002502:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002504:	2300      	movs	r3, #0
 8002506:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002508:	2300      	movs	r3, #0
 800250a:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(SPI_SS_GPIO_Port, &GPIO_InitStruct);
 800250c:	f107 0314 	add.w	r3, r7, #20
 8002510:	4619      	mov	r1, r3
 8002512:	480c      	ldr	r0, [pc, #48]	; (8002544 <MX_GPIO_Init+0x134>)
 8002514:	f001 fdbc 	bl	8004090 <HAL_GPIO_Init>

	/*Configure GPIO pin : SHDN_Pin */
	GPIO_InitStruct.Pin = SHDN_Pin;
 8002518:	2380      	movs	r3, #128	; 0x80
 800251a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800251c:	2301      	movs	r3, #1
 800251e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002520:	2300      	movs	r3, #0
 8002522:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002524:	2300      	movs	r3, #0
 8002526:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(SHDN_GPIO_Port, &GPIO_InitStruct);
 8002528:	f107 0314 	add.w	r3, r7, #20
 800252c:	4619      	mov	r1, r3
 800252e:	4806      	ldr	r0, [pc, #24]	; (8002548 <MX_GPIO_Init+0x138>)
 8002530:	f001 fdae 	bl	8004090 <HAL_GPIO_Init>

}
 8002534:	bf00      	nop
 8002536:	3728      	adds	r7, #40	; 0x28
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}
 800253c:	40023800 	.word	0x40023800
 8002540:	40020000 	.word	0x40020000
 8002544:	40020400 	.word	0x40020400
 8002548:	40020800 	.word	0x40020800
 800254c:	10210000 	.word	0x10210000

08002550 <UARTRecieveIT>:

/* USER CODE BEGIN 4 */
int16_t UARTRecieveIT() {
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
	static uint32_t dataPos = 0;
	int16_t data = -1;
 8002556:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800255a:	80fb      	strh	r3, [r7, #6]
	if (huart2.RxXferSize - huart2.RxXferCount != dataPos) {
 800255c:	4b11      	ldr	r3, [pc, #68]	; (80025a4 <UARTRecieveIT+0x54>)
 800255e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002560:	461a      	mov	r2, r3
 8002562:	4b10      	ldr	r3, [pc, #64]	; (80025a4 <UARTRecieveIT+0x54>)
 8002564:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002566:	b29b      	uxth	r3, r3
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	4a0f      	ldr	r2, [pc, #60]	; (80025a8 <UARTRecieveIT+0x58>)
 800256c:	6812      	ldr	r2, [r2, #0]
 800256e:	4293      	cmp	r3, r2
 8002570:	d010      	beq.n	8002594 <UARTRecieveIT+0x44>
		data = RxDataBuffer[dataPos];
 8002572:	4b0d      	ldr	r3, [pc, #52]	; (80025a8 <UARTRecieveIT+0x58>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a0d      	ldr	r2, [pc, #52]	; (80025ac <UARTRecieveIT+0x5c>)
 8002578:	5cd3      	ldrb	r3, [r2, r3]
 800257a:	80fb      	strh	r3, [r7, #6]
		dataPos = (dataPos + 1) % huart2.RxXferSize;
 800257c:	4b0a      	ldr	r3, [pc, #40]	; (80025a8 <UARTRecieveIT+0x58>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	3301      	adds	r3, #1
 8002582:	4a08      	ldr	r2, [pc, #32]	; (80025a4 <UARTRecieveIT+0x54>)
 8002584:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8002586:	fbb3 f1f2 	udiv	r1, r3, r2
 800258a:	fb02 f201 	mul.w	r2, r2, r1
 800258e:	1a9b      	subs	r3, r3, r2
 8002590:	4a05      	ldr	r2, [pc, #20]	; (80025a8 <UARTRecieveIT+0x58>)
 8002592:	6013      	str	r3, [r2, #0]
	}
	return data;
 8002594:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8002598:	4618      	mov	r0, r3
 800259a:	370c      	adds	r7, #12
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr
 80025a4:	20000460 	.word	0x20000460
 80025a8:	200002c0 	.word	0x200002c0
 80025ac:	2000026c 	.word	0x2000026c

080025b0 <MCP4922SetOutput>:

void MCP4922SetOutput(uint8_t Config, uint16_t DACOutput) {
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b084      	sub	sp, #16
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	4603      	mov	r3, r0
 80025b8:	460a      	mov	r2, r1
 80025ba:	71fb      	strb	r3, [r7, #7]
 80025bc:	4613      	mov	r3, r2
 80025be:	80bb      	strh	r3, [r7, #4]
	uint32_t OutputPacket = (DACOutput & 0x0fff) | ((Config & 0xf) << 12);
 80025c0:	88bb      	ldrh	r3, [r7, #4]
 80025c2:	f3c3 020b 	ubfx	r2, r3, #0, #12
 80025c6:	79fb      	ldrb	r3, [r7, #7]
 80025c8:	031b      	lsls	r3, r3, #12
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	4313      	orrs	r3, r2
 80025ce:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_RESET);
 80025d0:	2200      	movs	r2, #0
 80025d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80025d6:	4807      	ldr	r0, [pc, #28]	; (80025f4 <MCP4922SetOutput+0x44>)
 80025d8:	f001 fef6 	bl	80043c8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_IT(&hspi3, &OutputPacket, 1);
 80025dc:	f107 030c 	add.w	r3, r7, #12
 80025e0:	2201      	movs	r2, #1
 80025e2:	4619      	mov	r1, r3
 80025e4:	4804      	ldr	r0, [pc, #16]	; (80025f8 <MCP4922SetOutput+0x48>)
 80025e6:	f002 fc07 	bl	8004df8 <HAL_SPI_Transmit_IT>
}
 80025ea:	bf00      	nop
 80025ec:	3710      	adds	r7, #16
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	40020400 	.word	0x40020400
 80025f8:	20000318 	.word	0x20000318

080025fc <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
	if (hspi == &hspi3) {
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	4a06      	ldr	r2, [pc, #24]	; (8002620 <HAL_SPI_TxCpltCallback+0x24>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d105      	bne.n	8002618 <HAL_SPI_TxCpltCallback+0x1c>
		HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_SET);
 800260c:	2201      	movs	r2, #1
 800260e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002612:	4804      	ldr	r0, [pc, #16]	; (8002624 <HAL_SPI_TxCpltCallback+0x28>)
 8002614:	f001 fed8 	bl	80043c8 <HAL_GPIO_WritePin>
	}
}
 8002618:	bf00      	nop
 800261a:	3708      	adds	r7, #8
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}
 8002620:	20000318 	.word	0x20000318
 8002624:	40020400 	.word	0x40020400

08002628 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002628:	b4b0      	push	{r4, r5, r7}
 800262a:	b083      	sub	sp, #12
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
	if (htim == &htim2) {
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	4a09      	ldr	r2, [pc, #36]	; (8002658 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d109      	bne.n	800264c <HAL_TIM_PeriodElapsedCallback+0x24>
		_micro += 4294967295;
 8002638:	4b08      	ldr	r3, [pc, #32]	; (800265c <HAL_TIM_PeriodElapsedCallback+0x34>)
 800263a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800263e:	f112 34ff 	adds.w	r4, r2, #4294967295
 8002642:	f143 0500 	adc.w	r5, r3, #0
 8002646:	4b05      	ldr	r3, [pc, #20]	; (800265c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8002648:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 800264c:	bf00      	nop
 800264e:	370c      	adds	r7, #12
 8002650:	46bd      	mov	sp, r7
 8002652:	bcb0      	pop	{r4, r5, r7}
 8002654:	4770      	bx	lr
 8002656:	bf00      	nop
 8002658:	20000418 	.word	0x20000418
 800265c:	20000290 	.word	0x20000290

08002660 <micros>:

inline uint64_t micros() {
 8002660:	b4b0      	push	{r4, r5, r7}
 8002662:	af00      	add	r7, sp, #0
	return htim2.Instance->CNT + _micro;
 8002664:	4b09      	ldr	r3, [pc, #36]	; (800268c <micros+0x2c>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800266a:	4618      	mov	r0, r3
 800266c:	f04f 0100 	mov.w	r1, #0
 8002670:	4b07      	ldr	r3, [pc, #28]	; (8002690 <micros+0x30>)
 8002672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002676:	1884      	adds	r4, r0, r2
 8002678:	eb41 0503 	adc.w	r5, r1, r3
 800267c:	4622      	mov	r2, r4
 800267e:	462b      	mov	r3, r5
}
 8002680:	4610      	mov	r0, r2
 8002682:	4619      	mov	r1, r3
 8002684:	46bd      	mov	sp, r7
 8002686:	bcb0      	pop	{r4, r5, r7}
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	20000418 	.word	0x20000418
 8002690:	20000290 	.word	0x20000290

08002694 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002694:	b480      	push	{r7}
 8002696:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002698:	b672      	cpsid	i
}
 800269a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800269c:	e7fe      	b.n	800269c <Error_Handler+0x8>
	...

080026a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b082      	sub	sp, #8
 80026a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026a6:	2300      	movs	r3, #0
 80026a8:	607b      	str	r3, [r7, #4]
 80026aa:	4b10      	ldr	r3, [pc, #64]	; (80026ec <HAL_MspInit+0x4c>)
 80026ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ae:	4a0f      	ldr	r2, [pc, #60]	; (80026ec <HAL_MspInit+0x4c>)
 80026b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026b4:	6453      	str	r3, [r2, #68]	; 0x44
 80026b6:	4b0d      	ldr	r3, [pc, #52]	; (80026ec <HAL_MspInit+0x4c>)
 80026b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026be:	607b      	str	r3, [r7, #4]
 80026c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026c2:	2300      	movs	r3, #0
 80026c4:	603b      	str	r3, [r7, #0]
 80026c6:	4b09      	ldr	r3, [pc, #36]	; (80026ec <HAL_MspInit+0x4c>)
 80026c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ca:	4a08      	ldr	r2, [pc, #32]	; (80026ec <HAL_MspInit+0x4c>)
 80026cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026d0:	6413      	str	r3, [r2, #64]	; 0x40
 80026d2:	4b06      	ldr	r3, [pc, #24]	; (80026ec <HAL_MspInit+0x4c>)
 80026d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026da:	603b      	str	r3, [r7, #0]
 80026dc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80026de:	2007      	movs	r0, #7
 80026e0:	f001 f892 	bl	8003808 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026e4:	bf00      	nop
 80026e6:	3708      	adds	r7, #8
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	40023800 	.word	0x40023800

080026f0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b08a      	sub	sp, #40	; 0x28
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026f8:	f107 0314 	add.w	r3, r7, #20
 80026fc:	2200      	movs	r2, #0
 80026fe:	601a      	str	r2, [r3, #0]
 8002700:	605a      	str	r2, [r3, #4]
 8002702:	609a      	str	r2, [r3, #8]
 8002704:	60da      	str	r2, [r3, #12]
 8002706:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a33      	ldr	r2, [pc, #204]	; (80027dc <HAL_ADC_MspInit+0xec>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d15f      	bne.n	80027d2 <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002712:	2300      	movs	r3, #0
 8002714:	613b      	str	r3, [r7, #16]
 8002716:	4b32      	ldr	r3, [pc, #200]	; (80027e0 <HAL_ADC_MspInit+0xf0>)
 8002718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800271a:	4a31      	ldr	r2, [pc, #196]	; (80027e0 <HAL_ADC_MspInit+0xf0>)
 800271c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002720:	6453      	str	r3, [r2, #68]	; 0x44
 8002722:	4b2f      	ldr	r3, [pc, #188]	; (80027e0 <HAL_ADC_MspInit+0xf0>)
 8002724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002726:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800272a:	613b      	str	r3, [r7, #16]
 800272c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800272e:	2300      	movs	r3, #0
 8002730:	60fb      	str	r3, [r7, #12]
 8002732:	4b2b      	ldr	r3, [pc, #172]	; (80027e0 <HAL_ADC_MspInit+0xf0>)
 8002734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002736:	4a2a      	ldr	r2, [pc, #168]	; (80027e0 <HAL_ADC_MspInit+0xf0>)
 8002738:	f043 0301 	orr.w	r3, r3, #1
 800273c:	6313      	str	r3, [r2, #48]	; 0x30
 800273e:	4b28      	ldr	r3, [pc, #160]	; (80027e0 <HAL_ADC_MspInit+0xf0>)
 8002740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002742:	f003 0301 	and.w	r3, r3, #1
 8002746:	60fb      	str	r3, [r7, #12]
 8002748:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800274a:	2301      	movs	r3, #1
 800274c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800274e:	2303      	movs	r3, #3
 8002750:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002752:	2300      	movs	r3, #0
 8002754:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002756:	f107 0314 	add.w	r3, r7, #20
 800275a:	4619      	mov	r1, r3
 800275c:	4821      	ldr	r0, [pc, #132]	; (80027e4 <HAL_ADC_MspInit+0xf4>)
 800275e:	f001 fc97 	bl	8004090 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002762:	4b21      	ldr	r3, [pc, #132]	; (80027e8 <HAL_ADC_MspInit+0xf8>)
 8002764:	4a21      	ldr	r2, [pc, #132]	; (80027ec <HAL_ADC_MspInit+0xfc>)
 8002766:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002768:	4b1f      	ldr	r3, [pc, #124]	; (80027e8 <HAL_ADC_MspInit+0xf8>)
 800276a:	2200      	movs	r2, #0
 800276c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800276e:	4b1e      	ldr	r3, [pc, #120]	; (80027e8 <HAL_ADC_MspInit+0xf8>)
 8002770:	2200      	movs	r2, #0
 8002772:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002774:	4b1c      	ldr	r3, [pc, #112]	; (80027e8 <HAL_ADC_MspInit+0xf8>)
 8002776:	2200      	movs	r2, #0
 8002778:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800277a:	4b1b      	ldr	r3, [pc, #108]	; (80027e8 <HAL_ADC_MspInit+0xf8>)
 800277c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002780:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002782:	4b19      	ldr	r3, [pc, #100]	; (80027e8 <HAL_ADC_MspInit+0xf8>)
 8002784:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002788:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800278a:	4b17      	ldr	r3, [pc, #92]	; (80027e8 <HAL_ADC_MspInit+0xf8>)
 800278c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002790:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002792:	4b15      	ldr	r3, [pc, #84]	; (80027e8 <HAL_ADC_MspInit+0xf8>)
 8002794:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002798:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800279a:	4b13      	ldr	r3, [pc, #76]	; (80027e8 <HAL_ADC_MspInit+0xf8>)
 800279c:	2200      	movs	r2, #0
 800279e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80027a0:	4b11      	ldr	r3, [pc, #68]	; (80027e8 <HAL_ADC_MspInit+0xf8>)
 80027a2:	2200      	movs	r2, #0
 80027a4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80027a6:	4810      	ldr	r0, [pc, #64]	; (80027e8 <HAL_ADC_MspInit+0xf8>)
 80027a8:	f001 f870 	bl	800388c <HAL_DMA_Init>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d001      	beq.n	80027b6 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80027b2:	f7ff ff6f 	bl	8002694 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4a0b      	ldr	r2, [pc, #44]	; (80027e8 <HAL_ADC_MspInit+0xf8>)
 80027ba:	639a      	str	r2, [r3, #56]	; 0x38
 80027bc:	4a0a      	ldr	r2, [pc, #40]	; (80027e8 <HAL_ADC_MspInit+0xf8>)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80027c2:	2200      	movs	r2, #0
 80027c4:	2100      	movs	r1, #0
 80027c6:	2012      	movs	r0, #18
 80027c8:	f001 f829 	bl	800381e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80027cc:	2012      	movs	r0, #18
 80027ce:	f001 f842 	bl	8003856 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80027d2:	bf00      	nop
 80027d4:	3728      	adds	r7, #40	; 0x28
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	40012000 	.word	0x40012000
 80027e0:	40023800 	.word	0x40023800
 80027e4:	40020000 	.word	0x40020000
 80027e8:	200003b8 	.word	0x200003b8
 80027ec:	40026410 	.word	0x40026410

080027f0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b08a      	sub	sp, #40	; 0x28
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027f8:	f107 0314 	add.w	r3, r7, #20
 80027fc:	2200      	movs	r2, #0
 80027fe:	601a      	str	r2, [r3, #0]
 8002800:	605a      	str	r2, [r3, #4]
 8002802:	609a      	str	r2, [r3, #8]
 8002804:	60da      	str	r2, [r3, #12]
 8002806:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a1d      	ldr	r2, [pc, #116]	; (8002884 <HAL_SPI_MspInit+0x94>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d133      	bne.n	800287a <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002812:	2300      	movs	r3, #0
 8002814:	613b      	str	r3, [r7, #16]
 8002816:	4b1c      	ldr	r3, [pc, #112]	; (8002888 <HAL_SPI_MspInit+0x98>)
 8002818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281a:	4a1b      	ldr	r2, [pc, #108]	; (8002888 <HAL_SPI_MspInit+0x98>)
 800281c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002820:	6413      	str	r3, [r2, #64]	; 0x40
 8002822:	4b19      	ldr	r3, [pc, #100]	; (8002888 <HAL_SPI_MspInit+0x98>)
 8002824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002826:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800282a:	613b      	str	r3, [r7, #16]
 800282c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800282e:	2300      	movs	r3, #0
 8002830:	60fb      	str	r3, [r7, #12]
 8002832:	4b15      	ldr	r3, [pc, #84]	; (8002888 <HAL_SPI_MspInit+0x98>)
 8002834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002836:	4a14      	ldr	r2, [pc, #80]	; (8002888 <HAL_SPI_MspInit+0x98>)
 8002838:	f043 0302 	orr.w	r3, r3, #2
 800283c:	6313      	str	r3, [r2, #48]	; 0x30
 800283e:	4b12      	ldr	r3, [pc, #72]	; (8002888 <HAL_SPI_MspInit+0x98>)
 8002840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002842:	f003 0302 	and.w	r3, r3, #2
 8002846:	60fb      	str	r3, [r7, #12]
 8002848:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3     ------> SPI3_SCK
    PB4     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800284a:	2338      	movs	r3, #56	; 0x38
 800284c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800284e:	2302      	movs	r3, #2
 8002850:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002852:	2300      	movs	r3, #0
 8002854:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002856:	2303      	movs	r3, #3
 8002858:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800285a:	2306      	movs	r3, #6
 800285c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800285e:	f107 0314 	add.w	r3, r7, #20
 8002862:	4619      	mov	r1, r3
 8002864:	4809      	ldr	r0, [pc, #36]	; (800288c <HAL_SPI_MspInit+0x9c>)
 8002866:	f001 fc13 	bl	8004090 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 800286a:	2200      	movs	r2, #0
 800286c:	2100      	movs	r1, #0
 800286e:	2033      	movs	r0, #51	; 0x33
 8002870:	f000 ffd5 	bl	800381e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8002874:	2033      	movs	r0, #51	; 0x33
 8002876:	f000 ffee 	bl	8003856 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800287a:	bf00      	nop
 800287c:	3728      	adds	r7, #40	; 0x28
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	40003c00 	.word	0x40003c00
 8002888:	40023800 	.word	0x40023800
 800288c:	40020400 	.word	0x40020400

08002890 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b084      	sub	sp, #16
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028a0:	d116      	bne.n	80028d0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80028a2:	2300      	movs	r3, #0
 80028a4:	60fb      	str	r3, [r7, #12]
 80028a6:	4b16      	ldr	r3, [pc, #88]	; (8002900 <HAL_TIM_Base_MspInit+0x70>)
 80028a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028aa:	4a15      	ldr	r2, [pc, #84]	; (8002900 <HAL_TIM_Base_MspInit+0x70>)
 80028ac:	f043 0301 	orr.w	r3, r3, #1
 80028b0:	6413      	str	r3, [r2, #64]	; 0x40
 80028b2:	4b13      	ldr	r3, [pc, #76]	; (8002900 <HAL_TIM_Base_MspInit+0x70>)
 80028b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b6:	f003 0301 	and.w	r3, r3, #1
 80028ba:	60fb      	str	r3, [r7, #12]
 80028bc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80028be:	2200      	movs	r2, #0
 80028c0:	2100      	movs	r1, #0
 80028c2:	201c      	movs	r0, #28
 80028c4:	f000 ffab 	bl	800381e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80028c8:	201c      	movs	r0, #28
 80028ca:	f000 ffc4 	bl	8003856 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80028ce:	e012      	b.n	80028f6 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a0b      	ldr	r2, [pc, #44]	; (8002904 <HAL_TIM_Base_MspInit+0x74>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d10d      	bne.n	80028f6 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80028da:	2300      	movs	r3, #0
 80028dc:	60bb      	str	r3, [r7, #8]
 80028de:	4b08      	ldr	r3, [pc, #32]	; (8002900 <HAL_TIM_Base_MspInit+0x70>)
 80028e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e2:	4a07      	ldr	r2, [pc, #28]	; (8002900 <HAL_TIM_Base_MspInit+0x70>)
 80028e4:	f043 0302 	orr.w	r3, r3, #2
 80028e8:	6413      	str	r3, [r2, #64]	; 0x40
 80028ea:	4b05      	ldr	r3, [pc, #20]	; (8002900 <HAL_TIM_Base_MspInit+0x70>)
 80028ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ee:	f003 0302 	and.w	r3, r3, #2
 80028f2:	60bb      	str	r3, [r7, #8]
 80028f4:	68bb      	ldr	r3, [r7, #8]
}
 80028f6:	bf00      	nop
 80028f8:	3710      	adds	r7, #16
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	40023800 	.word	0x40023800
 8002904:	40000400 	.word	0x40000400

08002908 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b08a      	sub	sp, #40	; 0x28
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002910:	f107 0314 	add.w	r3, r7, #20
 8002914:	2200      	movs	r2, #0
 8002916:	601a      	str	r2, [r3, #0]
 8002918:	605a      	str	r2, [r3, #4]
 800291a:	609a      	str	r2, [r3, #8]
 800291c:	60da      	str	r2, [r3, #12]
 800291e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a1d      	ldr	r2, [pc, #116]	; (800299c <HAL_UART_MspInit+0x94>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d133      	bne.n	8002992 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800292a:	2300      	movs	r3, #0
 800292c:	613b      	str	r3, [r7, #16]
 800292e:	4b1c      	ldr	r3, [pc, #112]	; (80029a0 <HAL_UART_MspInit+0x98>)
 8002930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002932:	4a1b      	ldr	r2, [pc, #108]	; (80029a0 <HAL_UART_MspInit+0x98>)
 8002934:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002938:	6413      	str	r3, [r2, #64]	; 0x40
 800293a:	4b19      	ldr	r3, [pc, #100]	; (80029a0 <HAL_UART_MspInit+0x98>)
 800293c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002942:	613b      	str	r3, [r7, #16]
 8002944:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002946:	2300      	movs	r3, #0
 8002948:	60fb      	str	r3, [r7, #12]
 800294a:	4b15      	ldr	r3, [pc, #84]	; (80029a0 <HAL_UART_MspInit+0x98>)
 800294c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800294e:	4a14      	ldr	r2, [pc, #80]	; (80029a0 <HAL_UART_MspInit+0x98>)
 8002950:	f043 0301 	orr.w	r3, r3, #1
 8002954:	6313      	str	r3, [r2, #48]	; 0x30
 8002956:	4b12      	ldr	r3, [pc, #72]	; (80029a0 <HAL_UART_MspInit+0x98>)
 8002958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295a:	f003 0301 	and.w	r3, r3, #1
 800295e:	60fb      	str	r3, [r7, #12]
 8002960:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002962:	230c      	movs	r3, #12
 8002964:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002966:	2302      	movs	r3, #2
 8002968:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800296a:	2300      	movs	r3, #0
 800296c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800296e:	2303      	movs	r3, #3
 8002970:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002972:	2307      	movs	r3, #7
 8002974:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002976:	f107 0314 	add.w	r3, r7, #20
 800297a:	4619      	mov	r1, r3
 800297c:	4809      	ldr	r0, [pc, #36]	; (80029a4 <HAL_UART_MspInit+0x9c>)
 800297e:	f001 fb87 	bl	8004090 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002982:	2200      	movs	r2, #0
 8002984:	2100      	movs	r1, #0
 8002986:	2026      	movs	r0, #38	; 0x26
 8002988:	f000 ff49 	bl	800381e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800298c:	2026      	movs	r0, #38	; 0x26
 800298e:	f000 ff62 	bl	8003856 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002992:	bf00      	nop
 8002994:	3728      	adds	r7, #40	; 0x28
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	40004400 	.word	0x40004400
 80029a0:	40023800 	.word	0x40023800
 80029a4:	40020000 	.word	0x40020000

080029a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029a8:	b480      	push	{r7}
 80029aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80029ac:	e7fe      	b.n	80029ac <NMI_Handler+0x4>

080029ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029ae:	b480      	push	{r7}
 80029b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029b2:	e7fe      	b.n	80029b2 <HardFault_Handler+0x4>

080029b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80029b4:	b480      	push	{r7}
 80029b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80029b8:	e7fe      	b.n	80029b8 <MemManage_Handler+0x4>

080029ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029ba:	b480      	push	{r7}
 80029bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029be:	e7fe      	b.n	80029be <BusFault_Handler+0x4>

080029c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029c0:	b480      	push	{r7}
 80029c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029c4:	e7fe      	b.n	80029c4 <UsageFault_Handler+0x4>

080029c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80029c6:	b480      	push	{r7}
 80029c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80029ca:	bf00      	nop
 80029cc:	46bd      	mov	sp, r7
 80029ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d2:	4770      	bx	lr

080029d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029d4:	b480      	push	{r7}
 80029d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029d8:	bf00      	nop
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr

080029e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029e2:	b480      	push	{r7}
 80029e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80029e6:	bf00      	nop
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr

080029f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029f4:	f000 f8c2 	bl	8002b7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80029f8:	bf00      	nop
 80029fa:	bd80      	pop	{r7, pc}

080029fc <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002a00:	4802      	ldr	r0, [pc, #8]	; (8002a0c <ADC_IRQHandler+0x10>)
 8002a02:	f000 f91e 	bl	8002c42 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002a06:	bf00      	nop
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	20000370 	.word	0x20000370

08002a10 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002a14:	4802      	ldr	r0, [pc, #8]	; (8002a20 <TIM2_IRQHandler+0x10>)
 8002a16:	f002 fe15 	bl	8005644 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002a1a:	bf00      	nop
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	20000418 	.word	0x20000418

08002a24 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002a28:	4802      	ldr	r0, [pc, #8]	; (8002a34 <USART2_IRQHandler+0x10>)
 8002a2a:	f003 faab 	bl	8005f84 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002a2e:	bf00      	nop
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	20000460 	.word	0x20000460

08002a38 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8002a3c:	4802      	ldr	r0, [pc, #8]	; (8002a48 <SPI3_IRQHandler+0x10>)
 8002a3e:	f002 fa65 	bl	8004f0c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8002a42:	bf00      	nop
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	20000318 	.word	0x20000318

08002a4c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002a50:	4802      	ldr	r0, [pc, #8]	; (8002a5c <DMA2_Stream0_IRQHandler+0x10>)
 8002a52:	f001 f8b3 	bl	8003bbc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002a56:	bf00      	nop
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	200003b8 	.word	0x200003b8

08002a60 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a60:	b480      	push	{r7}
 8002a62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a64:	4b06      	ldr	r3, [pc, #24]	; (8002a80 <SystemInit+0x20>)
 8002a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a6a:	4a05      	ldr	r2, [pc, #20]	; (8002a80 <SystemInit+0x20>)
 8002a6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a74:	bf00      	nop
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr
 8002a7e:	bf00      	nop
 8002a80:	e000ed00 	.word	0xe000ed00

08002a84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002a84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002abc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002a88:	480d      	ldr	r0, [pc, #52]	; (8002ac0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002a8a:	490e      	ldr	r1, [pc, #56]	; (8002ac4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002a8c:	4a0e      	ldr	r2, [pc, #56]	; (8002ac8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002a8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a90:	e002      	b.n	8002a98 <LoopCopyDataInit>

08002a92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a96:	3304      	adds	r3, #4

08002a98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a9c:	d3f9      	bcc.n	8002a92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a9e:	4a0b      	ldr	r2, [pc, #44]	; (8002acc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002aa0:	4c0b      	ldr	r4, [pc, #44]	; (8002ad0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002aa2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002aa4:	e001      	b.n	8002aaa <LoopFillZerobss>

08002aa6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002aa6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002aa8:	3204      	adds	r2, #4

08002aaa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002aaa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002aac:	d3fb      	bcc.n	8002aa6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002aae:	f7ff ffd7 	bl	8002a60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002ab2:	f003 ffc9 	bl	8006a48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ab6:	f7fe faef 	bl	8001098 <main>
  bx  lr    
 8002aba:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002abc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002ac0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ac4:	20000250 	.word	0x20000250
  ldr r2, =_sidata
 8002ac8:	08007e20 	.word	0x08007e20
  ldr r2, =_sbss
 8002acc:	20000250 	.word	0x20000250
  ldr r4, =_ebss
 8002ad0:	200004a8 	.word	0x200004a8

08002ad4 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ad4:	e7fe      	b.n	8002ad4 <DMA1_Stream0_IRQHandler>
	...

08002ad8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002adc:	4b0e      	ldr	r3, [pc, #56]	; (8002b18 <HAL_Init+0x40>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a0d      	ldr	r2, [pc, #52]	; (8002b18 <HAL_Init+0x40>)
 8002ae2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ae6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ae8:	4b0b      	ldr	r3, [pc, #44]	; (8002b18 <HAL_Init+0x40>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a0a      	ldr	r2, [pc, #40]	; (8002b18 <HAL_Init+0x40>)
 8002aee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002af2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002af4:	4b08      	ldr	r3, [pc, #32]	; (8002b18 <HAL_Init+0x40>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a07      	ldr	r2, [pc, #28]	; (8002b18 <HAL_Init+0x40>)
 8002afa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002afe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b00:	2003      	movs	r0, #3
 8002b02:	f000 fe81 	bl	8003808 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b06:	2000      	movs	r0, #0
 8002b08:	f000 f808 	bl	8002b1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b0c:	f7ff fdc8 	bl	80026a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b10:	2300      	movs	r3, #0
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	40023c00 	.word	0x40023c00

08002b1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b082      	sub	sp, #8
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b24:	4b12      	ldr	r3, [pc, #72]	; (8002b70 <HAL_InitTick+0x54>)
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	4b12      	ldr	r3, [pc, #72]	; (8002b74 <HAL_InitTick+0x58>)
 8002b2a:	781b      	ldrb	r3, [r3, #0]
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b32:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b36:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f000 fe99 	bl	8003872 <HAL_SYSTICK_Config>
 8002b40:	4603      	mov	r3, r0
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d001      	beq.n	8002b4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e00e      	b.n	8002b68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2b0f      	cmp	r3, #15
 8002b4e:	d80a      	bhi.n	8002b66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b50:	2200      	movs	r2, #0
 8002b52:	6879      	ldr	r1, [r7, #4]
 8002b54:	f04f 30ff 	mov.w	r0, #4294967295
 8002b58:	f000 fe61 	bl	800381e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b5c:	4a06      	ldr	r2, [pc, #24]	; (8002b78 <HAL_InitTick+0x5c>)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b62:	2300      	movs	r3, #0
 8002b64:	e000      	b.n	8002b68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3708      	adds	r7, #8
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	20000244 	.word	0x20000244
 8002b74:	2000024c 	.word	0x2000024c
 8002b78:	20000248 	.word	0x20000248

08002b7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b80:	4b06      	ldr	r3, [pc, #24]	; (8002b9c <HAL_IncTick+0x20>)
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	461a      	mov	r2, r3
 8002b86:	4b06      	ldr	r3, [pc, #24]	; (8002ba0 <HAL_IncTick+0x24>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4413      	add	r3, r2
 8002b8c:	4a04      	ldr	r2, [pc, #16]	; (8002ba0 <HAL_IncTick+0x24>)
 8002b8e:	6013      	str	r3, [r2, #0]
}
 8002b90:	bf00      	nop
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop
 8002b9c:	2000024c 	.word	0x2000024c
 8002ba0:	200004a4 	.word	0x200004a4

08002ba4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	af00      	add	r7, sp, #0
  return uwTick;
 8002ba8:	4b03      	ldr	r3, [pc, #12]	; (8002bb8 <HAL_GetTick+0x14>)
 8002baa:	681b      	ldr	r3, [r3, #0]
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr
 8002bb6:	bf00      	nop
 8002bb8:	200004a4 	.word	0x200004a4

08002bbc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b084      	sub	sp, #16
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d101      	bne.n	8002bd2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e033      	b.n	8002c3a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d109      	bne.n	8002bee <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f7ff fd88 	bl	80026f0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2200      	movs	r2, #0
 8002be4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf2:	f003 0310 	and.w	r3, r3, #16
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d118      	bne.n	8002c2c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfe:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002c02:	f023 0302 	bic.w	r3, r3, #2
 8002c06:	f043 0202 	orr.w	r2, r3, #2
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f000 fba2 	bl	8003358 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2200      	movs	r2, #0
 8002c18:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1e:	f023 0303 	bic.w	r3, r3, #3
 8002c22:	f043 0201 	orr.w	r2, r3, #1
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	641a      	str	r2, [r3, #64]	; 0x40
 8002c2a:	e001      	b.n	8002c30 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2200      	movs	r2, #0
 8002c34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002c38:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3710      	adds	r7, #16
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}

08002c42 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002c42:	b580      	push	{r7, lr}
 8002c44:	b084      	sub	sp, #16
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	60fb      	str	r3, [r7, #12]
 8002c4e:	2300      	movs	r3, #0
 8002c50:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 0302 	and.w	r3, r3, #2
 8002c5c:	2b02      	cmp	r3, #2
 8002c5e:	bf0c      	ite	eq
 8002c60:	2301      	moveq	r3, #1
 8002c62:	2300      	movne	r3, #0
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	f003 0320 	and.w	r3, r3, #32
 8002c72:	2b20      	cmp	r3, #32
 8002c74:	bf0c      	ite	eq
 8002c76:	2301      	moveq	r3, #1
 8002c78:	2300      	movne	r3, #0
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d049      	beq.n	8002d18 <HAL_ADC_IRQHandler+0xd6>
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d046      	beq.n	8002d18 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8e:	f003 0310 	and.w	r3, r3, #16
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d105      	bne.n	8002ca2 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d12b      	bne.n	8002d08 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d127      	bne.n	8002d08 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cbe:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d006      	beq.n	8002cd4 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d119      	bne.n	8002d08 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	685a      	ldr	r2, [r3, #4]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f022 0220 	bic.w	r2, r2, #32
 8002ce2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d105      	bne.n	8002d08 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d00:	f043 0201 	orr.w	r2, r3, #1
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	f000 f9cb 	bl	80030a4 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f06f 0212 	mvn.w	r2, #18
 8002d16:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0304 	and.w	r3, r3, #4
 8002d22:	2b04      	cmp	r3, #4
 8002d24:	bf0c      	ite	eq
 8002d26:	2301      	moveq	r3, #1
 8002d28:	2300      	movne	r3, #0
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d38:	2b80      	cmp	r3, #128	; 0x80
 8002d3a:	bf0c      	ite	eq
 8002d3c:	2301      	moveq	r3, #1
 8002d3e:	2300      	movne	r3, #0
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d057      	beq.n	8002dfa <HAL_ADC_IRQHandler+0x1b8>
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d054      	beq.n	8002dfa <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d54:	f003 0310 	and.w	r3, r3, #16
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d105      	bne.n	8002d68 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d60:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d139      	bne.n	8002dea <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d7c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d006      	beq.n	8002d92 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d12b      	bne.n	8002dea <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d124      	bne.n	8002dea <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d11d      	bne.n	8002dea <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d119      	bne.n	8002dea <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	685a      	ldr	r2, [r3, #4]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002dc4:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d105      	bne.n	8002dea <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de2:	f043 0201 	orr.w	r2, r3, #1
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f000 fc32 	bl	8003654 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f06f 020c 	mvn.w	r2, #12
 8002df8:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 0301 	and.w	r3, r3, #1
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	bf0c      	ite	eq
 8002e08:	2301      	moveq	r3, #1
 8002e0a:	2300      	movne	r3, #0
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e1a:	2b40      	cmp	r3, #64	; 0x40
 8002e1c:	bf0c      	ite	eq
 8002e1e:	2301      	moveq	r3, #1
 8002e20:	2300      	movne	r3, #0
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d017      	beq.n	8002e5c <HAL_ADC_IRQHandler+0x21a>
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d014      	beq.n	8002e5c <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 0301 	and.w	r3, r3, #1
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d10d      	bne.n	8002e5c <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e44:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	f000 f93d 	bl	80030cc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f06f 0201 	mvn.w	r2, #1
 8002e5a:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0320 	and.w	r3, r3, #32
 8002e66:	2b20      	cmp	r3, #32
 8002e68:	bf0c      	ite	eq
 8002e6a:	2301      	moveq	r3, #1
 8002e6c:	2300      	movne	r3, #0
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002e7c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e80:	bf0c      	ite	eq
 8002e82:	2301      	moveq	r3, #1
 8002e84:	2300      	movne	r3, #0
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d015      	beq.n	8002ebc <HAL_ADC_IRQHandler+0x27a>
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d012      	beq.n	8002ebc <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e9a:	f043 0202 	orr.w	r2, r3, #2
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f06f 0220 	mvn.w	r2, #32
 8002eaa:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	f000 f917 	bl	80030e0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f06f 0220 	mvn.w	r2, #32
 8002eba:	601a      	str	r2, [r3, #0]
  }
}
 8002ebc:	bf00      	nop
 8002ebe:	3710      	adds	r7, #16
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}

08002ec4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b086      	sub	sp, #24
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	60f8      	str	r0, [r7, #12]
 8002ecc:	60b9      	str	r1, [r7, #8]
 8002ece:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d101      	bne.n	8002ee2 <HAL_ADC_Start_DMA+0x1e>
 8002ede:	2302      	movs	r3, #2
 8002ee0:	e0ce      	b.n	8003080 <HAL_ADC_Start_DMA+0x1bc>
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	f003 0301 	and.w	r3, r3, #1
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d018      	beq.n	8002f2a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	689a      	ldr	r2, [r3, #8]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f042 0201 	orr.w	r2, r2, #1
 8002f06:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002f08:	4b5f      	ldr	r3, [pc, #380]	; (8003088 <HAL_ADC_Start_DMA+0x1c4>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a5f      	ldr	r2, [pc, #380]	; (800308c <HAL_ADC_Start_DMA+0x1c8>)
 8002f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f12:	0c9a      	lsrs	r2, r3, #18
 8002f14:	4613      	mov	r3, r2
 8002f16:	005b      	lsls	r3, r3, #1
 8002f18:	4413      	add	r3, r2
 8002f1a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002f1c:	e002      	b.n	8002f24 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	3b01      	subs	r3, #1
 8002f22:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d1f9      	bne.n	8002f1e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f38:	d107      	bne.n	8002f4a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	689a      	ldr	r2, [r3, #8]
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f48:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	f003 0301 	and.w	r3, r3, #1
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	f040 8086 	bne.w	8003066 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002f62:	f023 0301 	bic.w	r3, r3, #1
 8002f66:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d007      	beq.n	8002f8c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f80:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002f84:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f98:	d106      	bne.n	8002fa8 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f9e:	f023 0206 	bic.w	r2, r3, #6
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	645a      	str	r2, [r3, #68]	; 0x44
 8002fa6:	e002      	b.n	8002fae <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2200      	movs	r2, #0
 8002fac:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002fb6:	4b36      	ldr	r3, [pc, #216]	; (8003090 <HAL_ADC_Start_DMA+0x1cc>)
 8002fb8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fbe:	4a35      	ldr	r2, [pc, #212]	; (8003094 <HAL_ADC_Start_DMA+0x1d0>)
 8002fc0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fc6:	4a34      	ldr	r2, [pc, #208]	; (8003098 <HAL_ADC_Start_DMA+0x1d4>)
 8002fc8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fce:	4a33      	ldr	r2, [pc, #204]	; (800309c <HAL_ADC_Start_DMA+0x1d8>)
 8002fd0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002fda:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	685a      	ldr	r2, [r3, #4]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002fea:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	689a      	ldr	r2, [r3, #8]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ffa:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	334c      	adds	r3, #76	; 0x4c
 8003006:	4619      	mov	r1, r3
 8003008:	68ba      	ldr	r2, [r7, #8]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f000 fcec 	bl	80039e8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	f003 031f 	and.w	r3, r3, #31
 8003018:	2b00      	cmp	r3, #0
 800301a:	d10f      	bne.n	800303c <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d129      	bne.n	800307e <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	689a      	ldr	r2, [r3, #8]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003038:	609a      	str	r2, [r3, #8]
 800303a:	e020      	b.n	800307e <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a17      	ldr	r2, [pc, #92]	; (80030a0 <HAL_ADC_Start_DMA+0x1dc>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d11b      	bne.n	800307e <HAL_ADC_Start_DMA+0x1ba>
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003050:	2b00      	cmp	r3, #0
 8003052:	d114      	bne.n	800307e <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	689a      	ldr	r2, [r3, #8]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003062:	609a      	str	r2, [r3, #8]
 8003064:	e00b      	b.n	800307e <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306a:	f043 0210 	orr.w	r2, r3, #16
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003076:	f043 0201 	orr.w	r2, r3, #1
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800307e:	2300      	movs	r3, #0
}
 8003080:	4618      	mov	r0, r3
 8003082:	3718      	adds	r7, #24
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}
 8003088:	20000244 	.word	0x20000244
 800308c:	431bde83 	.word	0x431bde83
 8003090:	40012300 	.word	0x40012300
 8003094:	08003551 	.word	0x08003551
 8003098:	0800360b 	.word	0x0800360b
 800309c:	08003627 	.word	0x08003627
 80030a0:	40012000 	.word	0x40012000

080030a4 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b083      	sub	sp, #12
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80030ac:	bf00      	nop
 80030ae:	370c      	adds	r7, #12
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr

080030b8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b083      	sub	sp, #12
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80030c0:	bf00      	nop
 80030c2:	370c      	adds	r7, #12
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr

080030cc <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b083      	sub	sp, #12
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80030d4:	bf00      	nop
 80030d6:	370c      	adds	r7, #12
 80030d8:	46bd      	mov	sp, r7
 80030da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030de:	4770      	bx	lr

080030e0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b083      	sub	sp, #12
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80030e8:	bf00      	nop
 80030ea:	370c      	adds	r7, #12
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr

080030f4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b085      	sub	sp, #20
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
 80030fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80030fe:	2300      	movs	r3, #0
 8003100:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003108:	2b01      	cmp	r3, #1
 800310a:	d101      	bne.n	8003110 <HAL_ADC_ConfigChannel+0x1c>
 800310c:	2302      	movs	r3, #2
 800310e:	e113      	b.n	8003338 <HAL_ADC_ConfigChannel+0x244>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2201      	movs	r2, #1
 8003114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	2b09      	cmp	r3, #9
 800311e:	d925      	bls.n	800316c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	68d9      	ldr	r1, [r3, #12]
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	b29b      	uxth	r3, r3
 800312c:	461a      	mov	r2, r3
 800312e:	4613      	mov	r3, r2
 8003130:	005b      	lsls	r3, r3, #1
 8003132:	4413      	add	r3, r2
 8003134:	3b1e      	subs	r3, #30
 8003136:	2207      	movs	r2, #7
 8003138:	fa02 f303 	lsl.w	r3, r2, r3
 800313c:	43da      	mvns	r2, r3
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	400a      	ands	r2, r1
 8003144:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	68d9      	ldr	r1, [r3, #12]
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	689a      	ldr	r2, [r3, #8]
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	b29b      	uxth	r3, r3
 8003156:	4618      	mov	r0, r3
 8003158:	4603      	mov	r3, r0
 800315a:	005b      	lsls	r3, r3, #1
 800315c:	4403      	add	r3, r0
 800315e:	3b1e      	subs	r3, #30
 8003160:	409a      	lsls	r2, r3
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	430a      	orrs	r2, r1
 8003168:	60da      	str	r2, [r3, #12]
 800316a:	e022      	b.n	80031b2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	6919      	ldr	r1, [r3, #16]
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	b29b      	uxth	r3, r3
 8003178:	461a      	mov	r2, r3
 800317a:	4613      	mov	r3, r2
 800317c:	005b      	lsls	r3, r3, #1
 800317e:	4413      	add	r3, r2
 8003180:	2207      	movs	r2, #7
 8003182:	fa02 f303 	lsl.w	r3, r2, r3
 8003186:	43da      	mvns	r2, r3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	400a      	ands	r2, r1
 800318e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	6919      	ldr	r1, [r3, #16]
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	689a      	ldr	r2, [r3, #8]
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	b29b      	uxth	r3, r3
 80031a0:	4618      	mov	r0, r3
 80031a2:	4603      	mov	r3, r0
 80031a4:	005b      	lsls	r3, r3, #1
 80031a6:	4403      	add	r3, r0
 80031a8:	409a      	lsls	r2, r3
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	430a      	orrs	r2, r1
 80031b0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	2b06      	cmp	r3, #6
 80031b8:	d824      	bhi.n	8003204 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	685a      	ldr	r2, [r3, #4]
 80031c4:	4613      	mov	r3, r2
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	4413      	add	r3, r2
 80031ca:	3b05      	subs	r3, #5
 80031cc:	221f      	movs	r2, #31
 80031ce:	fa02 f303 	lsl.w	r3, r2, r3
 80031d2:	43da      	mvns	r2, r3
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	400a      	ands	r2, r1
 80031da:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	b29b      	uxth	r3, r3
 80031e8:	4618      	mov	r0, r3
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	685a      	ldr	r2, [r3, #4]
 80031ee:	4613      	mov	r3, r2
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	4413      	add	r3, r2
 80031f4:	3b05      	subs	r3, #5
 80031f6:	fa00 f203 	lsl.w	r2, r0, r3
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	430a      	orrs	r2, r1
 8003200:	635a      	str	r2, [r3, #52]	; 0x34
 8003202:	e04c      	b.n	800329e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	2b0c      	cmp	r3, #12
 800320a:	d824      	bhi.n	8003256 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	685a      	ldr	r2, [r3, #4]
 8003216:	4613      	mov	r3, r2
 8003218:	009b      	lsls	r3, r3, #2
 800321a:	4413      	add	r3, r2
 800321c:	3b23      	subs	r3, #35	; 0x23
 800321e:	221f      	movs	r2, #31
 8003220:	fa02 f303 	lsl.w	r3, r2, r3
 8003224:	43da      	mvns	r2, r3
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	400a      	ands	r2, r1
 800322c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	b29b      	uxth	r3, r3
 800323a:	4618      	mov	r0, r3
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	685a      	ldr	r2, [r3, #4]
 8003240:	4613      	mov	r3, r2
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	4413      	add	r3, r2
 8003246:	3b23      	subs	r3, #35	; 0x23
 8003248:	fa00 f203 	lsl.w	r2, r0, r3
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	430a      	orrs	r2, r1
 8003252:	631a      	str	r2, [r3, #48]	; 0x30
 8003254:	e023      	b.n	800329e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	685a      	ldr	r2, [r3, #4]
 8003260:	4613      	mov	r3, r2
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	4413      	add	r3, r2
 8003266:	3b41      	subs	r3, #65	; 0x41
 8003268:	221f      	movs	r2, #31
 800326a:	fa02 f303 	lsl.w	r3, r2, r3
 800326e:	43da      	mvns	r2, r3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	400a      	ands	r2, r1
 8003276:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	b29b      	uxth	r3, r3
 8003284:	4618      	mov	r0, r3
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	685a      	ldr	r2, [r3, #4]
 800328a:	4613      	mov	r3, r2
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	4413      	add	r3, r2
 8003290:	3b41      	subs	r3, #65	; 0x41
 8003292:	fa00 f203 	lsl.w	r2, r0, r3
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	430a      	orrs	r2, r1
 800329c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800329e:	4b29      	ldr	r3, [pc, #164]	; (8003344 <HAL_ADC_ConfigChannel+0x250>)
 80032a0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a28      	ldr	r2, [pc, #160]	; (8003348 <HAL_ADC_ConfigChannel+0x254>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d10f      	bne.n	80032cc <HAL_ADC_ConfigChannel+0x1d8>
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	2b12      	cmp	r3, #18
 80032b2:	d10b      	bne.n	80032cc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a1d      	ldr	r2, [pc, #116]	; (8003348 <HAL_ADC_ConfigChannel+0x254>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d12b      	bne.n	800332e <HAL_ADC_ConfigChannel+0x23a>
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a1c      	ldr	r2, [pc, #112]	; (800334c <HAL_ADC_ConfigChannel+0x258>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d003      	beq.n	80032e8 <HAL_ADC_ConfigChannel+0x1f4>
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	2b11      	cmp	r3, #17
 80032e6:	d122      	bne.n	800332e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a11      	ldr	r2, [pc, #68]	; (800334c <HAL_ADC_ConfigChannel+0x258>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d111      	bne.n	800332e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800330a:	4b11      	ldr	r3, [pc, #68]	; (8003350 <HAL_ADC_ConfigChannel+0x25c>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a11      	ldr	r2, [pc, #68]	; (8003354 <HAL_ADC_ConfigChannel+0x260>)
 8003310:	fba2 2303 	umull	r2, r3, r2, r3
 8003314:	0c9a      	lsrs	r2, r3, #18
 8003316:	4613      	mov	r3, r2
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	4413      	add	r3, r2
 800331c:	005b      	lsls	r3, r3, #1
 800331e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003320:	e002      	b.n	8003328 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	3b01      	subs	r3, #1
 8003326:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d1f9      	bne.n	8003322 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2200      	movs	r2, #0
 8003332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003336:	2300      	movs	r3, #0
}
 8003338:	4618      	mov	r0, r3
 800333a:	3714      	adds	r7, #20
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr
 8003344:	40012300 	.word	0x40012300
 8003348:	40012000 	.word	0x40012000
 800334c:	10000012 	.word	0x10000012
 8003350:	20000244 	.word	0x20000244
 8003354:	431bde83 	.word	0x431bde83

08003358 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003358:	b480      	push	{r7}
 800335a:	b085      	sub	sp, #20
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003360:	4b79      	ldr	r3, [pc, #484]	; (8003548 <ADC_Init+0x1f0>)
 8003362:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	685a      	ldr	r2, [r3, #4]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	431a      	orrs	r2, r3
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	685a      	ldr	r2, [r3, #4]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800338c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	6859      	ldr	r1, [r3, #4]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	691b      	ldr	r3, [r3, #16]
 8003398:	021a      	lsls	r2, r3, #8
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	430a      	orrs	r2, r1
 80033a0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	685a      	ldr	r2, [r3, #4]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80033b0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	6859      	ldr	r1, [r3, #4]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	689a      	ldr	r2, [r3, #8]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	430a      	orrs	r2, r1
 80033c2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	689a      	ldr	r2, [r3, #8]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033d2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	6899      	ldr	r1, [r3, #8]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	68da      	ldr	r2, [r3, #12]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	430a      	orrs	r2, r1
 80033e4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ea:	4a58      	ldr	r2, [pc, #352]	; (800354c <ADC_Init+0x1f4>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d022      	beq.n	8003436 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	689a      	ldr	r2, [r3, #8]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80033fe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	6899      	ldr	r1, [r3, #8]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	430a      	orrs	r2, r1
 8003410:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	689a      	ldr	r2, [r3, #8]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003420:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	6899      	ldr	r1, [r3, #8]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	430a      	orrs	r2, r1
 8003432:	609a      	str	r2, [r3, #8]
 8003434:	e00f      	b.n	8003456 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	689a      	ldr	r2, [r3, #8]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003444:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	689a      	ldr	r2, [r3, #8]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003454:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	689a      	ldr	r2, [r3, #8]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f022 0202 	bic.w	r2, r2, #2
 8003464:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	6899      	ldr	r1, [r3, #8]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	7e1b      	ldrb	r3, [r3, #24]
 8003470:	005a      	lsls	r2, r3, #1
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	430a      	orrs	r2, r1
 8003478:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d01b      	beq.n	80034bc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	685a      	ldr	r2, [r3, #4]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003492:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	685a      	ldr	r2, [r3, #4]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80034a2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	6859      	ldr	r1, [r3, #4]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ae:	3b01      	subs	r3, #1
 80034b0:	035a      	lsls	r2, r3, #13
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	430a      	orrs	r2, r1
 80034b8:	605a      	str	r2, [r3, #4]
 80034ba:	e007      	b.n	80034cc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	685a      	ldr	r2, [r3, #4]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034ca:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80034da:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	69db      	ldr	r3, [r3, #28]
 80034e6:	3b01      	subs	r3, #1
 80034e8:	051a      	lsls	r2, r3, #20
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	430a      	orrs	r2, r1
 80034f0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	689a      	ldr	r2, [r3, #8]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003500:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	6899      	ldr	r1, [r3, #8]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800350e:	025a      	lsls	r2, r3, #9
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	430a      	orrs	r2, r1
 8003516:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	689a      	ldr	r2, [r3, #8]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003526:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	6899      	ldr	r1, [r3, #8]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	695b      	ldr	r3, [r3, #20]
 8003532:	029a      	lsls	r2, r3, #10
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	430a      	orrs	r2, r1
 800353a:	609a      	str	r2, [r3, #8]
}
 800353c:	bf00      	nop
 800353e:	3714      	adds	r7, #20
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr
 8003548:	40012300 	.word	0x40012300
 800354c:	0f000001 	.word	0x0f000001

08003550 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b084      	sub	sp, #16
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800355c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003562:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003566:	2b00      	cmp	r3, #0
 8003568:	d13c      	bne.n	80035e4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003580:	2b00      	cmp	r3, #0
 8003582:	d12b      	bne.n	80035dc <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003588:	2b00      	cmp	r3, #0
 800358a:	d127      	bne.n	80035dc <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003592:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003596:	2b00      	cmp	r3, #0
 8003598:	d006      	beq.n	80035a8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d119      	bne.n	80035dc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	685a      	ldr	r2, [r3, #4]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f022 0220 	bic.w	r2, r2, #32
 80035b6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035bc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d105      	bne.n	80035dc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d4:	f043 0201 	orr.w	r2, r3, #1
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80035dc:	68f8      	ldr	r0, [r7, #12]
 80035de:	f7ff fd61 	bl	80030a4 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80035e2:	e00e      	b.n	8003602 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e8:	f003 0310 	and.w	r3, r3, #16
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d003      	beq.n	80035f8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80035f0:	68f8      	ldr	r0, [r7, #12]
 80035f2:	f7ff fd75 	bl	80030e0 <HAL_ADC_ErrorCallback>
}
 80035f6:	e004      	b.n	8003602 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	4798      	blx	r3
}
 8003602:	bf00      	nop
 8003604:	3710      	adds	r7, #16
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}

0800360a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800360a:	b580      	push	{r7, lr}
 800360c:	b084      	sub	sp, #16
 800360e:	af00      	add	r7, sp, #0
 8003610:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003616:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003618:	68f8      	ldr	r0, [r7, #12]
 800361a:	f7ff fd4d 	bl	80030b8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800361e:	bf00      	nop
 8003620:	3710      	adds	r7, #16
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}

08003626 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003626:	b580      	push	{r7, lr}
 8003628:	b084      	sub	sp, #16
 800362a:	af00      	add	r7, sp, #0
 800362c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003632:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2240      	movs	r2, #64	; 0x40
 8003638:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800363e:	f043 0204 	orr.w	r2, r3, #4
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003646:	68f8      	ldr	r0, [r7, #12]
 8003648:	f7ff fd4a 	bl	80030e0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800364c:	bf00      	nop
 800364e:	3710      	adds	r7, #16
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}

08003654 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003654:	b480      	push	{r7}
 8003656:	b083      	sub	sp, #12
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800365c:	bf00      	nop
 800365e:	370c      	adds	r7, #12
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr

08003668 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003668:	b480      	push	{r7}
 800366a:	b085      	sub	sp, #20
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	f003 0307 	and.w	r3, r3, #7
 8003676:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003678:	4b0c      	ldr	r3, [pc, #48]	; (80036ac <__NVIC_SetPriorityGrouping+0x44>)
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800367e:	68ba      	ldr	r2, [r7, #8]
 8003680:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003684:	4013      	ands	r3, r2
 8003686:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003690:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003694:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003698:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800369a:	4a04      	ldr	r2, [pc, #16]	; (80036ac <__NVIC_SetPriorityGrouping+0x44>)
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	60d3      	str	r3, [r2, #12]
}
 80036a0:	bf00      	nop
 80036a2:	3714      	adds	r7, #20
 80036a4:	46bd      	mov	sp, r7
 80036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036aa:	4770      	bx	lr
 80036ac:	e000ed00 	.word	0xe000ed00

080036b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80036b0:	b480      	push	{r7}
 80036b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80036b4:	4b04      	ldr	r3, [pc, #16]	; (80036c8 <__NVIC_GetPriorityGrouping+0x18>)
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	0a1b      	lsrs	r3, r3, #8
 80036ba:	f003 0307 	and.w	r3, r3, #7
}
 80036be:	4618      	mov	r0, r3
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr
 80036c8:	e000ed00 	.word	0xe000ed00

080036cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b083      	sub	sp, #12
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	4603      	mov	r3, r0
 80036d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	db0b      	blt.n	80036f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036de:	79fb      	ldrb	r3, [r7, #7]
 80036e0:	f003 021f 	and.w	r2, r3, #31
 80036e4:	4907      	ldr	r1, [pc, #28]	; (8003704 <__NVIC_EnableIRQ+0x38>)
 80036e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036ea:	095b      	lsrs	r3, r3, #5
 80036ec:	2001      	movs	r0, #1
 80036ee:	fa00 f202 	lsl.w	r2, r0, r2
 80036f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80036f6:	bf00      	nop
 80036f8:	370c      	adds	r7, #12
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr
 8003702:	bf00      	nop
 8003704:	e000e100 	.word	0xe000e100

08003708 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003708:	b480      	push	{r7}
 800370a:	b083      	sub	sp, #12
 800370c:	af00      	add	r7, sp, #0
 800370e:	4603      	mov	r3, r0
 8003710:	6039      	str	r1, [r7, #0]
 8003712:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003714:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003718:	2b00      	cmp	r3, #0
 800371a:	db0a      	blt.n	8003732 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	b2da      	uxtb	r2, r3
 8003720:	490c      	ldr	r1, [pc, #48]	; (8003754 <__NVIC_SetPriority+0x4c>)
 8003722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003726:	0112      	lsls	r2, r2, #4
 8003728:	b2d2      	uxtb	r2, r2
 800372a:	440b      	add	r3, r1
 800372c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003730:	e00a      	b.n	8003748 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	b2da      	uxtb	r2, r3
 8003736:	4908      	ldr	r1, [pc, #32]	; (8003758 <__NVIC_SetPriority+0x50>)
 8003738:	79fb      	ldrb	r3, [r7, #7]
 800373a:	f003 030f 	and.w	r3, r3, #15
 800373e:	3b04      	subs	r3, #4
 8003740:	0112      	lsls	r2, r2, #4
 8003742:	b2d2      	uxtb	r2, r2
 8003744:	440b      	add	r3, r1
 8003746:	761a      	strb	r2, [r3, #24]
}
 8003748:	bf00      	nop
 800374a:	370c      	adds	r7, #12
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr
 8003754:	e000e100 	.word	0xe000e100
 8003758:	e000ed00 	.word	0xe000ed00

0800375c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800375c:	b480      	push	{r7}
 800375e:	b089      	sub	sp, #36	; 0x24
 8003760:	af00      	add	r7, sp, #0
 8003762:	60f8      	str	r0, [r7, #12]
 8003764:	60b9      	str	r1, [r7, #8]
 8003766:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f003 0307 	and.w	r3, r3, #7
 800376e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003770:	69fb      	ldr	r3, [r7, #28]
 8003772:	f1c3 0307 	rsb	r3, r3, #7
 8003776:	2b04      	cmp	r3, #4
 8003778:	bf28      	it	cs
 800377a:	2304      	movcs	r3, #4
 800377c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	3304      	adds	r3, #4
 8003782:	2b06      	cmp	r3, #6
 8003784:	d902      	bls.n	800378c <NVIC_EncodePriority+0x30>
 8003786:	69fb      	ldr	r3, [r7, #28]
 8003788:	3b03      	subs	r3, #3
 800378a:	e000      	b.n	800378e <NVIC_EncodePriority+0x32>
 800378c:	2300      	movs	r3, #0
 800378e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003790:	f04f 32ff 	mov.w	r2, #4294967295
 8003794:	69bb      	ldr	r3, [r7, #24]
 8003796:	fa02 f303 	lsl.w	r3, r2, r3
 800379a:	43da      	mvns	r2, r3
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	401a      	ands	r2, r3
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80037a4:	f04f 31ff 	mov.w	r1, #4294967295
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	fa01 f303 	lsl.w	r3, r1, r3
 80037ae:	43d9      	mvns	r1, r3
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037b4:	4313      	orrs	r3, r2
         );
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3724      	adds	r7, #36	; 0x24
 80037ba:	46bd      	mov	sp, r7
 80037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c0:	4770      	bx	lr
	...

080037c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b082      	sub	sp, #8
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	3b01      	subs	r3, #1
 80037d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80037d4:	d301      	bcc.n	80037da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80037d6:	2301      	movs	r3, #1
 80037d8:	e00f      	b.n	80037fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037da:	4a0a      	ldr	r2, [pc, #40]	; (8003804 <SysTick_Config+0x40>)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	3b01      	subs	r3, #1
 80037e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80037e2:	210f      	movs	r1, #15
 80037e4:	f04f 30ff 	mov.w	r0, #4294967295
 80037e8:	f7ff ff8e 	bl	8003708 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80037ec:	4b05      	ldr	r3, [pc, #20]	; (8003804 <SysTick_Config+0x40>)
 80037ee:	2200      	movs	r2, #0
 80037f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80037f2:	4b04      	ldr	r3, [pc, #16]	; (8003804 <SysTick_Config+0x40>)
 80037f4:	2207      	movs	r2, #7
 80037f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80037f8:	2300      	movs	r3, #0
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3708      	adds	r7, #8
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
 8003802:	bf00      	nop
 8003804:	e000e010 	.word	0xe000e010

08003808 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b082      	sub	sp, #8
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	f7ff ff29 	bl	8003668 <__NVIC_SetPriorityGrouping>
}
 8003816:	bf00      	nop
 8003818:	3708      	adds	r7, #8
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}

0800381e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800381e:	b580      	push	{r7, lr}
 8003820:	b086      	sub	sp, #24
 8003822:	af00      	add	r7, sp, #0
 8003824:	4603      	mov	r3, r0
 8003826:	60b9      	str	r1, [r7, #8]
 8003828:	607a      	str	r2, [r7, #4]
 800382a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800382c:	2300      	movs	r3, #0
 800382e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003830:	f7ff ff3e 	bl	80036b0 <__NVIC_GetPriorityGrouping>
 8003834:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003836:	687a      	ldr	r2, [r7, #4]
 8003838:	68b9      	ldr	r1, [r7, #8]
 800383a:	6978      	ldr	r0, [r7, #20]
 800383c:	f7ff ff8e 	bl	800375c <NVIC_EncodePriority>
 8003840:	4602      	mov	r2, r0
 8003842:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003846:	4611      	mov	r1, r2
 8003848:	4618      	mov	r0, r3
 800384a:	f7ff ff5d 	bl	8003708 <__NVIC_SetPriority>
}
 800384e:	bf00      	nop
 8003850:	3718      	adds	r7, #24
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}

08003856 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003856:	b580      	push	{r7, lr}
 8003858:	b082      	sub	sp, #8
 800385a:	af00      	add	r7, sp, #0
 800385c:	4603      	mov	r3, r0
 800385e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003860:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003864:	4618      	mov	r0, r3
 8003866:	f7ff ff31 	bl	80036cc <__NVIC_EnableIRQ>
}
 800386a:	bf00      	nop
 800386c:	3708      	adds	r7, #8
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}

08003872 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003872:	b580      	push	{r7, lr}
 8003874:	b082      	sub	sp, #8
 8003876:	af00      	add	r7, sp, #0
 8003878:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f7ff ffa2 	bl	80037c4 <SysTick_Config>
 8003880:	4603      	mov	r3, r0
}
 8003882:	4618      	mov	r0, r3
 8003884:	3708      	adds	r7, #8
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}
	...

0800388c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b086      	sub	sp, #24
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003894:	2300      	movs	r3, #0
 8003896:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003898:	f7ff f984 	bl	8002ba4 <HAL_GetTick>
 800389c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d101      	bne.n	80038a8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	e099      	b.n	80039dc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2200      	movs	r2, #0
 80038ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2202      	movs	r2, #2
 80038b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f022 0201 	bic.w	r2, r2, #1
 80038c6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80038c8:	e00f      	b.n	80038ea <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80038ca:	f7ff f96b 	bl	8002ba4 <HAL_GetTick>
 80038ce:	4602      	mov	r2, r0
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	1ad3      	subs	r3, r2, r3
 80038d4:	2b05      	cmp	r3, #5
 80038d6:	d908      	bls.n	80038ea <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2220      	movs	r2, #32
 80038dc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2203      	movs	r2, #3
 80038e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80038e6:	2303      	movs	r3, #3
 80038e8:	e078      	b.n	80039dc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f003 0301 	and.w	r3, r3, #1
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d1e8      	bne.n	80038ca <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003900:	697a      	ldr	r2, [r7, #20]
 8003902:	4b38      	ldr	r3, [pc, #224]	; (80039e4 <HAL_DMA_Init+0x158>)
 8003904:	4013      	ands	r3, r2
 8003906:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	685a      	ldr	r2, [r3, #4]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003916:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	691b      	ldr	r3, [r3, #16]
 800391c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003922:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	699b      	ldr	r3, [r3, #24]
 8003928:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800392e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6a1b      	ldr	r3, [r3, #32]
 8003934:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003936:	697a      	ldr	r2, [r7, #20]
 8003938:	4313      	orrs	r3, r2
 800393a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003940:	2b04      	cmp	r3, #4
 8003942:	d107      	bne.n	8003954 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800394c:	4313      	orrs	r3, r2
 800394e:	697a      	ldr	r2, [r7, #20]
 8003950:	4313      	orrs	r3, r2
 8003952:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	697a      	ldr	r2, [r7, #20]
 800395a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	695b      	ldr	r3, [r3, #20]
 8003962:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	f023 0307 	bic.w	r3, r3, #7
 800396a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003970:	697a      	ldr	r2, [r7, #20]
 8003972:	4313      	orrs	r3, r2
 8003974:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397a:	2b04      	cmp	r3, #4
 800397c:	d117      	bne.n	80039ae <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003982:	697a      	ldr	r2, [r7, #20]
 8003984:	4313      	orrs	r3, r2
 8003986:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800398c:	2b00      	cmp	r3, #0
 800398e:	d00e      	beq.n	80039ae <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003990:	6878      	ldr	r0, [r7, #4]
 8003992:	f000 fb01 	bl	8003f98 <DMA_CheckFifoParam>
 8003996:	4603      	mov	r3, r0
 8003998:	2b00      	cmp	r3, #0
 800399a:	d008      	beq.n	80039ae <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2240      	movs	r2, #64	; 0x40
 80039a0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2201      	movs	r2, #1
 80039a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80039aa:	2301      	movs	r3, #1
 80039ac:	e016      	b.n	80039dc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	697a      	ldr	r2, [r7, #20]
 80039b4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f000 fab8 	bl	8003f2c <DMA_CalcBaseAndBitshift>
 80039bc:	4603      	mov	r3, r0
 80039be:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039c4:	223f      	movs	r2, #63	; 0x3f
 80039c6:	409a      	lsls	r2, r3
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2200      	movs	r2, #0
 80039d0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2201      	movs	r2, #1
 80039d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80039da:	2300      	movs	r3, #0
}
 80039dc:	4618      	mov	r0, r3
 80039de:	3718      	adds	r7, #24
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}
 80039e4:	f010803f 	.word	0xf010803f

080039e8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b086      	sub	sp, #24
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	60f8      	str	r0, [r7, #12]
 80039f0:	60b9      	str	r1, [r7, #8]
 80039f2:	607a      	str	r2, [r7, #4]
 80039f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039f6:	2300      	movs	r3, #0
 80039f8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039fe:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d101      	bne.n	8003a0e <HAL_DMA_Start_IT+0x26>
 8003a0a:	2302      	movs	r3, #2
 8003a0c:	e040      	b.n	8003a90 <HAL_DMA_Start_IT+0xa8>
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2201      	movs	r2, #1
 8003a12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d12f      	bne.n	8003a82 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2202      	movs	r2, #2
 8003a26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	68b9      	ldr	r1, [r7, #8]
 8003a36:	68f8      	ldr	r0, [r7, #12]
 8003a38:	f000 fa4a 	bl	8003ed0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a40:	223f      	movs	r2, #63	; 0x3f
 8003a42:	409a      	lsls	r2, r3
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f042 0216 	orr.w	r2, r2, #22
 8003a56:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d007      	beq.n	8003a70 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f042 0208 	orr.w	r2, r2, #8
 8003a6e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f042 0201 	orr.w	r2, r2, #1
 8003a7e:	601a      	str	r2, [r3, #0]
 8003a80:	e005      	b.n	8003a8e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2200      	movs	r2, #0
 8003a86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003a8a:	2302      	movs	r3, #2
 8003a8c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003a8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3718      	adds	r7, #24
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}

08003a98 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b084      	sub	sp, #16
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aa4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003aa6:	f7ff f87d 	bl	8002ba4 <HAL_GetTick>
 8003aaa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	2b02      	cmp	r3, #2
 8003ab6:	d008      	beq.n	8003aca <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2280      	movs	r2, #128	; 0x80
 8003abc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e052      	b.n	8003b70 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f022 0216 	bic.w	r2, r2, #22
 8003ad8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	695a      	ldr	r2, [r3, #20]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ae8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d103      	bne.n	8003afa <HAL_DMA_Abort+0x62>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d007      	beq.n	8003b0a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f022 0208 	bic.w	r2, r2, #8
 8003b08:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f022 0201 	bic.w	r2, r2, #1
 8003b18:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b1a:	e013      	b.n	8003b44 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003b1c:	f7ff f842 	bl	8002ba4 <HAL_GetTick>
 8003b20:	4602      	mov	r2, r0
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	1ad3      	subs	r3, r2, r3
 8003b26:	2b05      	cmp	r3, #5
 8003b28:	d90c      	bls.n	8003b44 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2220      	movs	r2, #32
 8003b2e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2200      	movs	r2, #0
 8003b34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2203      	movs	r2, #3
 8003b3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8003b40:	2303      	movs	r3, #3
 8003b42:	e015      	b.n	8003b70 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0301 	and.w	r3, r3, #1
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d1e4      	bne.n	8003b1c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b56:	223f      	movs	r2, #63	; 0x3f
 8003b58:	409a      	lsls	r2, r3
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2200      	movs	r2, #0
 8003b62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2201      	movs	r2, #1
 8003b6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8003b6e:	2300      	movs	r3, #0
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	3710      	adds	r7, #16
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}

08003b78 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b083      	sub	sp, #12
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	2b02      	cmp	r3, #2
 8003b8a:	d004      	beq.n	8003b96 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2280      	movs	r2, #128	; 0x80
 8003b90:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e00c      	b.n	8003bb0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2205      	movs	r2, #5
 8003b9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f022 0201 	bic.w	r2, r2, #1
 8003bac:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003bae:	2300      	movs	r3, #0
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	370c      	adds	r7, #12
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bba:	4770      	bx	lr

08003bbc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b086      	sub	sp, #24
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003bc8:	4b92      	ldr	r3, [pc, #584]	; (8003e14 <HAL_DMA_IRQHandler+0x258>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a92      	ldr	r2, [pc, #584]	; (8003e18 <HAL_DMA_IRQHandler+0x25c>)
 8003bce:	fba2 2303 	umull	r2, r3, r2, r3
 8003bd2:	0a9b      	lsrs	r3, r3, #10
 8003bd4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bda:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003be6:	2208      	movs	r2, #8
 8003be8:	409a      	lsls	r2, r3
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	4013      	ands	r3, r2
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d01a      	beq.n	8003c28 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 0304 	and.w	r3, r3, #4
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d013      	beq.n	8003c28 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f022 0204 	bic.w	r2, r2, #4
 8003c0e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c14:	2208      	movs	r2, #8
 8003c16:	409a      	lsls	r2, r3
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c20:	f043 0201 	orr.w	r2, r3, #1
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	409a      	lsls	r2, r3
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	4013      	ands	r3, r2
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d012      	beq.n	8003c5e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	695b      	ldr	r3, [r3, #20]
 8003c3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d00b      	beq.n	8003c5e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	409a      	lsls	r2, r3
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c56:	f043 0202 	orr.w	r2, r3, #2
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c62:	2204      	movs	r2, #4
 8003c64:	409a      	lsls	r2, r3
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	4013      	ands	r3, r2
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d012      	beq.n	8003c94 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 0302 	and.w	r3, r3, #2
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d00b      	beq.n	8003c94 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c80:	2204      	movs	r2, #4
 8003c82:	409a      	lsls	r2, r3
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c8c:	f043 0204 	orr.w	r2, r3, #4
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c98:	2210      	movs	r2, #16
 8003c9a:	409a      	lsls	r2, r3
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d043      	beq.n	8003d2c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 0308 	and.w	r3, r3, #8
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d03c      	beq.n	8003d2c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cb6:	2210      	movs	r2, #16
 8003cb8:	409a      	lsls	r2, r3
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d018      	beq.n	8003cfe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d108      	bne.n	8003cec <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d024      	beq.n	8003d2c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	4798      	blx	r3
 8003cea:	e01f      	b.n	8003d2c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d01b      	beq.n	8003d2c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cf8:	6878      	ldr	r0, [r7, #4]
 8003cfa:	4798      	blx	r3
 8003cfc:	e016      	b.n	8003d2c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d107      	bne.n	8003d1c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f022 0208 	bic.w	r2, r2, #8
 8003d1a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d003      	beq.n	8003d2c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d30:	2220      	movs	r2, #32
 8003d32:	409a      	lsls	r2, r3
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	4013      	ands	r3, r2
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	f000 808e 	beq.w	8003e5a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f003 0310 	and.w	r3, r3, #16
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	f000 8086 	beq.w	8003e5a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d52:	2220      	movs	r2, #32
 8003d54:	409a      	lsls	r2, r3
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	2b05      	cmp	r3, #5
 8003d64:	d136      	bne.n	8003dd4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f022 0216 	bic.w	r2, r2, #22
 8003d74:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	695a      	ldr	r2, [r3, #20]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d84:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d103      	bne.n	8003d96 <HAL_DMA_IRQHandler+0x1da>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d007      	beq.n	8003da6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f022 0208 	bic.w	r2, r2, #8
 8003da4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003daa:	223f      	movs	r2, #63	; 0x3f
 8003dac:	409a      	lsls	r2, r3
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2200      	movs	r2, #0
 8003db6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d07d      	beq.n	8003ec6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	4798      	blx	r3
        }
        return;
 8003dd2:	e078      	b.n	8003ec6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d01c      	beq.n	8003e1c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d108      	bne.n	8003e02 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d030      	beq.n	8003e5a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	4798      	blx	r3
 8003e00:	e02b      	b.n	8003e5a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d027      	beq.n	8003e5a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	4798      	blx	r3
 8003e12:	e022      	b.n	8003e5a <HAL_DMA_IRQHandler+0x29e>
 8003e14:	20000244 	.word	0x20000244
 8003e18:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d10f      	bne.n	8003e4a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f022 0210 	bic.w	r2, r2, #16
 8003e38:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2201      	movs	r2, #1
 8003e46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d003      	beq.n	8003e5a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d032      	beq.n	8003ec8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e66:	f003 0301 	and.w	r3, r3, #1
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d022      	beq.n	8003eb4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2205      	movs	r2, #5
 8003e72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f022 0201 	bic.w	r2, r2, #1
 8003e84:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	3301      	adds	r3, #1
 8003e8a:	60bb      	str	r3, [r7, #8]
 8003e8c:	697a      	ldr	r2, [r7, #20]
 8003e8e:	429a      	cmp	r2, r3
 8003e90:	d307      	bcc.n	8003ea2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 0301 	and.w	r3, r3, #1
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d1f2      	bne.n	8003e86 <HAL_DMA_IRQHandler+0x2ca>
 8003ea0:	e000      	b.n	8003ea4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003ea2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d005      	beq.n	8003ec8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	4798      	blx	r3
 8003ec4:	e000      	b.n	8003ec8 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003ec6:	bf00      	nop
    }
  }
}
 8003ec8:	3718      	adds	r7, #24
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}
 8003ece:	bf00      	nop

08003ed0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b085      	sub	sp, #20
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	60f8      	str	r0, [r7, #12]
 8003ed8:	60b9      	str	r1, [r7, #8]
 8003eda:	607a      	str	r2, [r7, #4]
 8003edc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003eec:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	683a      	ldr	r2, [r7, #0]
 8003ef4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	2b40      	cmp	r3, #64	; 0x40
 8003efc:	d108      	bne.n	8003f10 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	687a      	ldr	r2, [r7, #4]
 8003f04:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	68ba      	ldr	r2, [r7, #8]
 8003f0c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003f0e:	e007      	b.n	8003f20 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	68ba      	ldr	r2, [r7, #8]
 8003f16:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	687a      	ldr	r2, [r7, #4]
 8003f1e:	60da      	str	r2, [r3, #12]
}
 8003f20:	bf00      	nop
 8003f22:	3714      	adds	r7, #20
 8003f24:	46bd      	mov	sp, r7
 8003f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2a:	4770      	bx	lr

08003f2c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b085      	sub	sp, #20
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	b2db      	uxtb	r3, r3
 8003f3a:	3b10      	subs	r3, #16
 8003f3c:	4a14      	ldr	r2, [pc, #80]	; (8003f90 <DMA_CalcBaseAndBitshift+0x64>)
 8003f3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f42:	091b      	lsrs	r3, r3, #4
 8003f44:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003f46:	4a13      	ldr	r2, [pc, #76]	; (8003f94 <DMA_CalcBaseAndBitshift+0x68>)
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	4413      	add	r3, r2
 8003f4c:	781b      	ldrb	r3, [r3, #0]
 8003f4e:	461a      	mov	r2, r3
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2b03      	cmp	r3, #3
 8003f58:	d909      	bls.n	8003f6e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003f62:	f023 0303 	bic.w	r3, r3, #3
 8003f66:	1d1a      	adds	r2, r3, #4
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	659a      	str	r2, [r3, #88]	; 0x58
 8003f6c:	e007      	b.n	8003f7e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003f76:	f023 0303 	bic.w	r3, r3, #3
 8003f7a:	687a      	ldr	r2, [r7, #4]
 8003f7c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	3714      	adds	r7, #20
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr
 8003f8e:	bf00      	nop
 8003f90:	aaaaaaab 	.word	0xaaaaaaab
 8003f94:	08007c30 	.word	0x08007c30

08003f98 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b085      	sub	sp, #20
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fa8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	699b      	ldr	r3, [r3, #24]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d11f      	bne.n	8003ff2 <DMA_CheckFifoParam+0x5a>
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	2b03      	cmp	r3, #3
 8003fb6:	d856      	bhi.n	8004066 <DMA_CheckFifoParam+0xce>
 8003fb8:	a201      	add	r2, pc, #4	; (adr r2, 8003fc0 <DMA_CheckFifoParam+0x28>)
 8003fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fbe:	bf00      	nop
 8003fc0:	08003fd1 	.word	0x08003fd1
 8003fc4:	08003fe3 	.word	0x08003fe3
 8003fc8:	08003fd1 	.word	0x08003fd1
 8003fcc:	08004067 	.word	0x08004067
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d046      	beq.n	800406a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fe0:	e043      	b.n	800406a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003fea:	d140      	bne.n	800406e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ff0:	e03d      	b.n	800406e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	699b      	ldr	r3, [r3, #24]
 8003ff6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ffa:	d121      	bne.n	8004040 <DMA_CheckFifoParam+0xa8>
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	2b03      	cmp	r3, #3
 8004000:	d837      	bhi.n	8004072 <DMA_CheckFifoParam+0xda>
 8004002:	a201      	add	r2, pc, #4	; (adr r2, 8004008 <DMA_CheckFifoParam+0x70>)
 8004004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004008:	08004019 	.word	0x08004019
 800400c:	0800401f 	.word	0x0800401f
 8004010:	08004019 	.word	0x08004019
 8004014:	08004031 	.word	0x08004031
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	73fb      	strb	r3, [r7, #15]
      break;
 800401c:	e030      	b.n	8004080 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004022:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004026:	2b00      	cmp	r3, #0
 8004028:	d025      	beq.n	8004076 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800402e:	e022      	b.n	8004076 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004034:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004038:	d11f      	bne.n	800407a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800403e:	e01c      	b.n	800407a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	2b02      	cmp	r3, #2
 8004044:	d903      	bls.n	800404e <DMA_CheckFifoParam+0xb6>
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	2b03      	cmp	r3, #3
 800404a:	d003      	beq.n	8004054 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800404c:	e018      	b.n	8004080 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	73fb      	strb	r3, [r7, #15]
      break;
 8004052:	e015      	b.n	8004080 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004058:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800405c:	2b00      	cmp	r3, #0
 800405e:	d00e      	beq.n	800407e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	73fb      	strb	r3, [r7, #15]
      break;
 8004064:	e00b      	b.n	800407e <DMA_CheckFifoParam+0xe6>
      break;
 8004066:	bf00      	nop
 8004068:	e00a      	b.n	8004080 <DMA_CheckFifoParam+0xe8>
      break;
 800406a:	bf00      	nop
 800406c:	e008      	b.n	8004080 <DMA_CheckFifoParam+0xe8>
      break;
 800406e:	bf00      	nop
 8004070:	e006      	b.n	8004080 <DMA_CheckFifoParam+0xe8>
      break;
 8004072:	bf00      	nop
 8004074:	e004      	b.n	8004080 <DMA_CheckFifoParam+0xe8>
      break;
 8004076:	bf00      	nop
 8004078:	e002      	b.n	8004080 <DMA_CheckFifoParam+0xe8>
      break;   
 800407a:	bf00      	nop
 800407c:	e000      	b.n	8004080 <DMA_CheckFifoParam+0xe8>
      break;
 800407e:	bf00      	nop
    }
  } 
  
  return status; 
 8004080:	7bfb      	ldrb	r3, [r7, #15]
}
 8004082:	4618      	mov	r0, r3
 8004084:	3714      	adds	r7, #20
 8004086:	46bd      	mov	sp, r7
 8004088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408c:	4770      	bx	lr
 800408e:	bf00      	nop

08004090 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004090:	b480      	push	{r7}
 8004092:	b089      	sub	sp, #36	; 0x24
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
 8004098:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800409a:	2300      	movs	r3, #0
 800409c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800409e:	2300      	movs	r3, #0
 80040a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80040a2:	2300      	movs	r3, #0
 80040a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80040a6:	2300      	movs	r3, #0
 80040a8:	61fb      	str	r3, [r7, #28]
 80040aa:	e159      	b.n	8004360 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80040ac:	2201      	movs	r2, #1
 80040ae:	69fb      	ldr	r3, [r7, #28]
 80040b0:	fa02 f303 	lsl.w	r3, r2, r3
 80040b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	697a      	ldr	r2, [r7, #20]
 80040bc:	4013      	ands	r3, r2
 80040be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80040c0:	693a      	ldr	r2, [r7, #16]
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	429a      	cmp	r2, r3
 80040c6:	f040 8148 	bne.w	800435a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	f003 0303 	and.w	r3, r3, #3
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	d005      	beq.n	80040e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80040de:	2b02      	cmp	r3, #2
 80040e0:	d130      	bne.n	8004144 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80040e8:	69fb      	ldr	r3, [r7, #28]
 80040ea:	005b      	lsls	r3, r3, #1
 80040ec:	2203      	movs	r2, #3
 80040ee:	fa02 f303 	lsl.w	r3, r2, r3
 80040f2:	43db      	mvns	r3, r3
 80040f4:	69ba      	ldr	r2, [r7, #24]
 80040f6:	4013      	ands	r3, r2
 80040f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	68da      	ldr	r2, [r3, #12]
 80040fe:	69fb      	ldr	r3, [r7, #28]
 8004100:	005b      	lsls	r3, r3, #1
 8004102:	fa02 f303 	lsl.w	r3, r2, r3
 8004106:	69ba      	ldr	r2, [r7, #24]
 8004108:	4313      	orrs	r3, r2
 800410a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	69ba      	ldr	r2, [r7, #24]
 8004110:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004118:	2201      	movs	r2, #1
 800411a:	69fb      	ldr	r3, [r7, #28]
 800411c:	fa02 f303 	lsl.w	r3, r2, r3
 8004120:	43db      	mvns	r3, r3
 8004122:	69ba      	ldr	r2, [r7, #24]
 8004124:	4013      	ands	r3, r2
 8004126:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	091b      	lsrs	r3, r3, #4
 800412e:	f003 0201 	and.w	r2, r3, #1
 8004132:	69fb      	ldr	r3, [r7, #28]
 8004134:	fa02 f303 	lsl.w	r3, r2, r3
 8004138:	69ba      	ldr	r2, [r7, #24]
 800413a:	4313      	orrs	r3, r2
 800413c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	69ba      	ldr	r2, [r7, #24]
 8004142:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	f003 0303 	and.w	r3, r3, #3
 800414c:	2b03      	cmp	r3, #3
 800414e:	d017      	beq.n	8004180 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	68db      	ldr	r3, [r3, #12]
 8004154:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004156:	69fb      	ldr	r3, [r7, #28]
 8004158:	005b      	lsls	r3, r3, #1
 800415a:	2203      	movs	r2, #3
 800415c:	fa02 f303 	lsl.w	r3, r2, r3
 8004160:	43db      	mvns	r3, r3
 8004162:	69ba      	ldr	r2, [r7, #24]
 8004164:	4013      	ands	r3, r2
 8004166:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	689a      	ldr	r2, [r3, #8]
 800416c:	69fb      	ldr	r3, [r7, #28]
 800416e:	005b      	lsls	r3, r3, #1
 8004170:	fa02 f303 	lsl.w	r3, r2, r3
 8004174:	69ba      	ldr	r2, [r7, #24]
 8004176:	4313      	orrs	r3, r2
 8004178:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	69ba      	ldr	r2, [r7, #24]
 800417e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	f003 0303 	and.w	r3, r3, #3
 8004188:	2b02      	cmp	r3, #2
 800418a:	d123      	bne.n	80041d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800418c:	69fb      	ldr	r3, [r7, #28]
 800418e:	08da      	lsrs	r2, r3, #3
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	3208      	adds	r2, #8
 8004194:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004198:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800419a:	69fb      	ldr	r3, [r7, #28]
 800419c:	f003 0307 	and.w	r3, r3, #7
 80041a0:	009b      	lsls	r3, r3, #2
 80041a2:	220f      	movs	r2, #15
 80041a4:	fa02 f303 	lsl.w	r3, r2, r3
 80041a8:	43db      	mvns	r3, r3
 80041aa:	69ba      	ldr	r2, [r7, #24]
 80041ac:	4013      	ands	r3, r2
 80041ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	691a      	ldr	r2, [r3, #16]
 80041b4:	69fb      	ldr	r3, [r7, #28]
 80041b6:	f003 0307 	and.w	r3, r3, #7
 80041ba:	009b      	lsls	r3, r3, #2
 80041bc:	fa02 f303 	lsl.w	r3, r2, r3
 80041c0:	69ba      	ldr	r2, [r7, #24]
 80041c2:	4313      	orrs	r3, r2
 80041c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80041c6:	69fb      	ldr	r3, [r7, #28]
 80041c8:	08da      	lsrs	r2, r3, #3
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	3208      	adds	r2, #8
 80041ce:	69b9      	ldr	r1, [r7, #24]
 80041d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80041da:	69fb      	ldr	r3, [r7, #28]
 80041dc:	005b      	lsls	r3, r3, #1
 80041de:	2203      	movs	r2, #3
 80041e0:	fa02 f303 	lsl.w	r3, r2, r3
 80041e4:	43db      	mvns	r3, r3
 80041e6:	69ba      	ldr	r2, [r7, #24]
 80041e8:	4013      	ands	r3, r2
 80041ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	f003 0203 	and.w	r2, r3, #3
 80041f4:	69fb      	ldr	r3, [r7, #28]
 80041f6:	005b      	lsls	r3, r3, #1
 80041f8:	fa02 f303 	lsl.w	r3, r2, r3
 80041fc:	69ba      	ldr	r2, [r7, #24]
 80041fe:	4313      	orrs	r3, r2
 8004200:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	69ba      	ldr	r2, [r7, #24]
 8004206:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004210:	2b00      	cmp	r3, #0
 8004212:	f000 80a2 	beq.w	800435a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004216:	2300      	movs	r3, #0
 8004218:	60fb      	str	r3, [r7, #12]
 800421a:	4b57      	ldr	r3, [pc, #348]	; (8004378 <HAL_GPIO_Init+0x2e8>)
 800421c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800421e:	4a56      	ldr	r2, [pc, #344]	; (8004378 <HAL_GPIO_Init+0x2e8>)
 8004220:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004224:	6453      	str	r3, [r2, #68]	; 0x44
 8004226:	4b54      	ldr	r3, [pc, #336]	; (8004378 <HAL_GPIO_Init+0x2e8>)
 8004228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800422a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800422e:	60fb      	str	r3, [r7, #12]
 8004230:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004232:	4a52      	ldr	r2, [pc, #328]	; (800437c <HAL_GPIO_Init+0x2ec>)
 8004234:	69fb      	ldr	r3, [r7, #28]
 8004236:	089b      	lsrs	r3, r3, #2
 8004238:	3302      	adds	r3, #2
 800423a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800423e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004240:	69fb      	ldr	r3, [r7, #28]
 8004242:	f003 0303 	and.w	r3, r3, #3
 8004246:	009b      	lsls	r3, r3, #2
 8004248:	220f      	movs	r2, #15
 800424a:	fa02 f303 	lsl.w	r3, r2, r3
 800424e:	43db      	mvns	r3, r3
 8004250:	69ba      	ldr	r2, [r7, #24]
 8004252:	4013      	ands	r3, r2
 8004254:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	4a49      	ldr	r2, [pc, #292]	; (8004380 <HAL_GPIO_Init+0x2f0>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d019      	beq.n	8004292 <HAL_GPIO_Init+0x202>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	4a48      	ldr	r2, [pc, #288]	; (8004384 <HAL_GPIO_Init+0x2f4>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d013      	beq.n	800428e <HAL_GPIO_Init+0x1fe>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	4a47      	ldr	r2, [pc, #284]	; (8004388 <HAL_GPIO_Init+0x2f8>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d00d      	beq.n	800428a <HAL_GPIO_Init+0x1fa>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	4a46      	ldr	r2, [pc, #280]	; (800438c <HAL_GPIO_Init+0x2fc>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d007      	beq.n	8004286 <HAL_GPIO_Init+0x1f6>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	4a45      	ldr	r2, [pc, #276]	; (8004390 <HAL_GPIO_Init+0x300>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d101      	bne.n	8004282 <HAL_GPIO_Init+0x1f2>
 800427e:	2304      	movs	r3, #4
 8004280:	e008      	b.n	8004294 <HAL_GPIO_Init+0x204>
 8004282:	2307      	movs	r3, #7
 8004284:	e006      	b.n	8004294 <HAL_GPIO_Init+0x204>
 8004286:	2303      	movs	r3, #3
 8004288:	e004      	b.n	8004294 <HAL_GPIO_Init+0x204>
 800428a:	2302      	movs	r3, #2
 800428c:	e002      	b.n	8004294 <HAL_GPIO_Init+0x204>
 800428e:	2301      	movs	r3, #1
 8004290:	e000      	b.n	8004294 <HAL_GPIO_Init+0x204>
 8004292:	2300      	movs	r3, #0
 8004294:	69fa      	ldr	r2, [r7, #28]
 8004296:	f002 0203 	and.w	r2, r2, #3
 800429a:	0092      	lsls	r2, r2, #2
 800429c:	4093      	lsls	r3, r2
 800429e:	69ba      	ldr	r2, [r7, #24]
 80042a0:	4313      	orrs	r3, r2
 80042a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80042a4:	4935      	ldr	r1, [pc, #212]	; (800437c <HAL_GPIO_Init+0x2ec>)
 80042a6:	69fb      	ldr	r3, [r7, #28]
 80042a8:	089b      	lsrs	r3, r3, #2
 80042aa:	3302      	adds	r3, #2
 80042ac:	69ba      	ldr	r2, [r7, #24]
 80042ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80042b2:	4b38      	ldr	r3, [pc, #224]	; (8004394 <HAL_GPIO_Init+0x304>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	43db      	mvns	r3, r3
 80042bc:	69ba      	ldr	r2, [r7, #24]
 80042be:	4013      	ands	r3, r2
 80042c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d003      	beq.n	80042d6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80042ce:	69ba      	ldr	r2, [r7, #24]
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	4313      	orrs	r3, r2
 80042d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80042d6:	4a2f      	ldr	r2, [pc, #188]	; (8004394 <HAL_GPIO_Init+0x304>)
 80042d8:	69bb      	ldr	r3, [r7, #24]
 80042da:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80042dc:	4b2d      	ldr	r3, [pc, #180]	; (8004394 <HAL_GPIO_Init+0x304>)
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	43db      	mvns	r3, r3
 80042e6:	69ba      	ldr	r2, [r7, #24]
 80042e8:	4013      	ands	r3, r2
 80042ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d003      	beq.n	8004300 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80042f8:	69ba      	ldr	r2, [r7, #24]
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	4313      	orrs	r3, r2
 80042fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004300:	4a24      	ldr	r2, [pc, #144]	; (8004394 <HAL_GPIO_Init+0x304>)
 8004302:	69bb      	ldr	r3, [r7, #24]
 8004304:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004306:	4b23      	ldr	r3, [pc, #140]	; (8004394 <HAL_GPIO_Init+0x304>)
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	43db      	mvns	r3, r3
 8004310:	69ba      	ldr	r2, [r7, #24]
 8004312:	4013      	ands	r3, r2
 8004314:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800431e:	2b00      	cmp	r3, #0
 8004320:	d003      	beq.n	800432a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004322:	69ba      	ldr	r2, [r7, #24]
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	4313      	orrs	r3, r2
 8004328:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800432a:	4a1a      	ldr	r2, [pc, #104]	; (8004394 <HAL_GPIO_Init+0x304>)
 800432c:	69bb      	ldr	r3, [r7, #24]
 800432e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004330:	4b18      	ldr	r3, [pc, #96]	; (8004394 <HAL_GPIO_Init+0x304>)
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	43db      	mvns	r3, r3
 800433a:	69ba      	ldr	r2, [r7, #24]
 800433c:	4013      	ands	r3, r2
 800433e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004348:	2b00      	cmp	r3, #0
 800434a:	d003      	beq.n	8004354 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800434c:	69ba      	ldr	r2, [r7, #24]
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	4313      	orrs	r3, r2
 8004352:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004354:	4a0f      	ldr	r2, [pc, #60]	; (8004394 <HAL_GPIO_Init+0x304>)
 8004356:	69bb      	ldr	r3, [r7, #24]
 8004358:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800435a:	69fb      	ldr	r3, [r7, #28]
 800435c:	3301      	adds	r3, #1
 800435e:	61fb      	str	r3, [r7, #28]
 8004360:	69fb      	ldr	r3, [r7, #28]
 8004362:	2b0f      	cmp	r3, #15
 8004364:	f67f aea2 	bls.w	80040ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004368:	bf00      	nop
 800436a:	bf00      	nop
 800436c:	3724      	adds	r7, #36	; 0x24
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr
 8004376:	bf00      	nop
 8004378:	40023800 	.word	0x40023800
 800437c:	40013800 	.word	0x40013800
 8004380:	40020000 	.word	0x40020000
 8004384:	40020400 	.word	0x40020400
 8004388:	40020800 	.word	0x40020800
 800438c:	40020c00 	.word	0x40020c00
 8004390:	40021000 	.word	0x40021000
 8004394:	40013c00 	.word	0x40013c00

08004398 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004398:	b480      	push	{r7}
 800439a:	b085      	sub	sp, #20
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
 80043a0:	460b      	mov	r3, r1
 80043a2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	691a      	ldr	r2, [r3, #16]
 80043a8:	887b      	ldrh	r3, [r7, #2]
 80043aa:	4013      	ands	r3, r2
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d002      	beq.n	80043b6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80043b0:	2301      	movs	r3, #1
 80043b2:	73fb      	strb	r3, [r7, #15]
 80043b4:	e001      	b.n	80043ba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80043b6:	2300      	movs	r3, #0
 80043b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80043ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80043bc:	4618      	mov	r0, r3
 80043be:	3714      	adds	r7, #20
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr

080043c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b083      	sub	sp, #12
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
 80043d0:	460b      	mov	r3, r1
 80043d2:	807b      	strh	r3, [r7, #2]
 80043d4:	4613      	mov	r3, r2
 80043d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80043d8:	787b      	ldrb	r3, [r7, #1]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d003      	beq.n	80043e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80043de:	887a      	ldrh	r2, [r7, #2]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80043e4:	e003      	b.n	80043ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80043e6:	887b      	ldrh	r3, [r7, #2]
 80043e8:	041a      	lsls	r2, r3, #16
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	619a      	str	r2, [r3, #24]
}
 80043ee:	bf00      	nop
 80043f0:	370c      	adds	r7, #12
 80043f2:	46bd      	mov	sp, r7
 80043f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f8:	4770      	bx	lr
	...

080043fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b086      	sub	sp, #24
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d101      	bne.n	800440e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	e264      	b.n	80048d8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f003 0301 	and.w	r3, r3, #1
 8004416:	2b00      	cmp	r3, #0
 8004418:	d075      	beq.n	8004506 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800441a:	4ba3      	ldr	r3, [pc, #652]	; (80046a8 <HAL_RCC_OscConfig+0x2ac>)
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	f003 030c 	and.w	r3, r3, #12
 8004422:	2b04      	cmp	r3, #4
 8004424:	d00c      	beq.n	8004440 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004426:	4ba0      	ldr	r3, [pc, #640]	; (80046a8 <HAL_RCC_OscConfig+0x2ac>)
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800442e:	2b08      	cmp	r3, #8
 8004430:	d112      	bne.n	8004458 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004432:	4b9d      	ldr	r3, [pc, #628]	; (80046a8 <HAL_RCC_OscConfig+0x2ac>)
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800443a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800443e:	d10b      	bne.n	8004458 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004440:	4b99      	ldr	r3, [pc, #612]	; (80046a8 <HAL_RCC_OscConfig+0x2ac>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004448:	2b00      	cmp	r3, #0
 800444a:	d05b      	beq.n	8004504 <HAL_RCC_OscConfig+0x108>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d157      	bne.n	8004504 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	e23f      	b.n	80048d8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004460:	d106      	bne.n	8004470 <HAL_RCC_OscConfig+0x74>
 8004462:	4b91      	ldr	r3, [pc, #580]	; (80046a8 <HAL_RCC_OscConfig+0x2ac>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a90      	ldr	r2, [pc, #576]	; (80046a8 <HAL_RCC_OscConfig+0x2ac>)
 8004468:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800446c:	6013      	str	r3, [r2, #0]
 800446e:	e01d      	b.n	80044ac <HAL_RCC_OscConfig+0xb0>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004478:	d10c      	bne.n	8004494 <HAL_RCC_OscConfig+0x98>
 800447a:	4b8b      	ldr	r3, [pc, #556]	; (80046a8 <HAL_RCC_OscConfig+0x2ac>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a8a      	ldr	r2, [pc, #552]	; (80046a8 <HAL_RCC_OscConfig+0x2ac>)
 8004480:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004484:	6013      	str	r3, [r2, #0]
 8004486:	4b88      	ldr	r3, [pc, #544]	; (80046a8 <HAL_RCC_OscConfig+0x2ac>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a87      	ldr	r2, [pc, #540]	; (80046a8 <HAL_RCC_OscConfig+0x2ac>)
 800448c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004490:	6013      	str	r3, [r2, #0]
 8004492:	e00b      	b.n	80044ac <HAL_RCC_OscConfig+0xb0>
 8004494:	4b84      	ldr	r3, [pc, #528]	; (80046a8 <HAL_RCC_OscConfig+0x2ac>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a83      	ldr	r2, [pc, #524]	; (80046a8 <HAL_RCC_OscConfig+0x2ac>)
 800449a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800449e:	6013      	str	r3, [r2, #0]
 80044a0:	4b81      	ldr	r3, [pc, #516]	; (80046a8 <HAL_RCC_OscConfig+0x2ac>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a80      	ldr	r2, [pc, #512]	; (80046a8 <HAL_RCC_OscConfig+0x2ac>)
 80044a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d013      	beq.n	80044dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044b4:	f7fe fb76 	bl	8002ba4 <HAL_GetTick>
 80044b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044ba:	e008      	b.n	80044ce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044bc:	f7fe fb72 	bl	8002ba4 <HAL_GetTick>
 80044c0:	4602      	mov	r2, r0
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	2b64      	cmp	r3, #100	; 0x64
 80044c8:	d901      	bls.n	80044ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80044ca:	2303      	movs	r3, #3
 80044cc:	e204      	b.n	80048d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044ce:	4b76      	ldr	r3, [pc, #472]	; (80046a8 <HAL_RCC_OscConfig+0x2ac>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d0f0      	beq.n	80044bc <HAL_RCC_OscConfig+0xc0>
 80044da:	e014      	b.n	8004506 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044dc:	f7fe fb62 	bl	8002ba4 <HAL_GetTick>
 80044e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044e2:	e008      	b.n	80044f6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044e4:	f7fe fb5e 	bl	8002ba4 <HAL_GetTick>
 80044e8:	4602      	mov	r2, r0
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	2b64      	cmp	r3, #100	; 0x64
 80044f0:	d901      	bls.n	80044f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80044f2:	2303      	movs	r3, #3
 80044f4:	e1f0      	b.n	80048d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044f6:	4b6c      	ldr	r3, [pc, #432]	; (80046a8 <HAL_RCC_OscConfig+0x2ac>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d1f0      	bne.n	80044e4 <HAL_RCC_OscConfig+0xe8>
 8004502:	e000      	b.n	8004506 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004504:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 0302 	and.w	r3, r3, #2
 800450e:	2b00      	cmp	r3, #0
 8004510:	d063      	beq.n	80045da <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004512:	4b65      	ldr	r3, [pc, #404]	; (80046a8 <HAL_RCC_OscConfig+0x2ac>)
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	f003 030c 	and.w	r3, r3, #12
 800451a:	2b00      	cmp	r3, #0
 800451c:	d00b      	beq.n	8004536 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800451e:	4b62      	ldr	r3, [pc, #392]	; (80046a8 <HAL_RCC_OscConfig+0x2ac>)
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004526:	2b08      	cmp	r3, #8
 8004528:	d11c      	bne.n	8004564 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800452a:	4b5f      	ldr	r3, [pc, #380]	; (80046a8 <HAL_RCC_OscConfig+0x2ac>)
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004532:	2b00      	cmp	r3, #0
 8004534:	d116      	bne.n	8004564 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004536:	4b5c      	ldr	r3, [pc, #368]	; (80046a8 <HAL_RCC_OscConfig+0x2ac>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 0302 	and.w	r3, r3, #2
 800453e:	2b00      	cmp	r3, #0
 8004540:	d005      	beq.n	800454e <HAL_RCC_OscConfig+0x152>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	68db      	ldr	r3, [r3, #12]
 8004546:	2b01      	cmp	r3, #1
 8004548:	d001      	beq.n	800454e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	e1c4      	b.n	80048d8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800454e:	4b56      	ldr	r3, [pc, #344]	; (80046a8 <HAL_RCC_OscConfig+0x2ac>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	691b      	ldr	r3, [r3, #16]
 800455a:	00db      	lsls	r3, r3, #3
 800455c:	4952      	ldr	r1, [pc, #328]	; (80046a8 <HAL_RCC_OscConfig+0x2ac>)
 800455e:	4313      	orrs	r3, r2
 8004560:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004562:	e03a      	b.n	80045da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	68db      	ldr	r3, [r3, #12]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d020      	beq.n	80045ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800456c:	4b4f      	ldr	r3, [pc, #316]	; (80046ac <HAL_RCC_OscConfig+0x2b0>)
 800456e:	2201      	movs	r2, #1
 8004570:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004572:	f7fe fb17 	bl	8002ba4 <HAL_GetTick>
 8004576:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004578:	e008      	b.n	800458c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800457a:	f7fe fb13 	bl	8002ba4 <HAL_GetTick>
 800457e:	4602      	mov	r2, r0
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	1ad3      	subs	r3, r2, r3
 8004584:	2b02      	cmp	r3, #2
 8004586:	d901      	bls.n	800458c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004588:	2303      	movs	r3, #3
 800458a:	e1a5      	b.n	80048d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800458c:	4b46      	ldr	r3, [pc, #280]	; (80046a8 <HAL_RCC_OscConfig+0x2ac>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f003 0302 	and.w	r3, r3, #2
 8004594:	2b00      	cmp	r3, #0
 8004596:	d0f0      	beq.n	800457a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004598:	4b43      	ldr	r3, [pc, #268]	; (80046a8 <HAL_RCC_OscConfig+0x2ac>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	691b      	ldr	r3, [r3, #16]
 80045a4:	00db      	lsls	r3, r3, #3
 80045a6:	4940      	ldr	r1, [pc, #256]	; (80046a8 <HAL_RCC_OscConfig+0x2ac>)
 80045a8:	4313      	orrs	r3, r2
 80045aa:	600b      	str	r3, [r1, #0]
 80045ac:	e015      	b.n	80045da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045ae:	4b3f      	ldr	r3, [pc, #252]	; (80046ac <HAL_RCC_OscConfig+0x2b0>)
 80045b0:	2200      	movs	r2, #0
 80045b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045b4:	f7fe faf6 	bl	8002ba4 <HAL_GetTick>
 80045b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045ba:	e008      	b.n	80045ce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045bc:	f7fe faf2 	bl	8002ba4 <HAL_GetTick>
 80045c0:	4602      	mov	r2, r0
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	1ad3      	subs	r3, r2, r3
 80045c6:	2b02      	cmp	r3, #2
 80045c8:	d901      	bls.n	80045ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80045ca:	2303      	movs	r3, #3
 80045cc:	e184      	b.n	80048d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045ce:	4b36      	ldr	r3, [pc, #216]	; (80046a8 <HAL_RCC_OscConfig+0x2ac>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f003 0302 	and.w	r3, r3, #2
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d1f0      	bne.n	80045bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 0308 	and.w	r3, r3, #8
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d030      	beq.n	8004648 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	695b      	ldr	r3, [r3, #20]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d016      	beq.n	800461c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045ee:	4b30      	ldr	r3, [pc, #192]	; (80046b0 <HAL_RCC_OscConfig+0x2b4>)
 80045f0:	2201      	movs	r2, #1
 80045f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045f4:	f7fe fad6 	bl	8002ba4 <HAL_GetTick>
 80045f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045fa:	e008      	b.n	800460e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045fc:	f7fe fad2 	bl	8002ba4 <HAL_GetTick>
 8004600:	4602      	mov	r2, r0
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	1ad3      	subs	r3, r2, r3
 8004606:	2b02      	cmp	r3, #2
 8004608:	d901      	bls.n	800460e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800460a:	2303      	movs	r3, #3
 800460c:	e164      	b.n	80048d8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800460e:	4b26      	ldr	r3, [pc, #152]	; (80046a8 <HAL_RCC_OscConfig+0x2ac>)
 8004610:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004612:	f003 0302 	and.w	r3, r3, #2
 8004616:	2b00      	cmp	r3, #0
 8004618:	d0f0      	beq.n	80045fc <HAL_RCC_OscConfig+0x200>
 800461a:	e015      	b.n	8004648 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800461c:	4b24      	ldr	r3, [pc, #144]	; (80046b0 <HAL_RCC_OscConfig+0x2b4>)
 800461e:	2200      	movs	r2, #0
 8004620:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004622:	f7fe fabf 	bl	8002ba4 <HAL_GetTick>
 8004626:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004628:	e008      	b.n	800463c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800462a:	f7fe fabb 	bl	8002ba4 <HAL_GetTick>
 800462e:	4602      	mov	r2, r0
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	1ad3      	subs	r3, r2, r3
 8004634:	2b02      	cmp	r3, #2
 8004636:	d901      	bls.n	800463c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004638:	2303      	movs	r3, #3
 800463a:	e14d      	b.n	80048d8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800463c:	4b1a      	ldr	r3, [pc, #104]	; (80046a8 <HAL_RCC_OscConfig+0x2ac>)
 800463e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004640:	f003 0302 	and.w	r3, r3, #2
 8004644:	2b00      	cmp	r3, #0
 8004646:	d1f0      	bne.n	800462a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f003 0304 	and.w	r3, r3, #4
 8004650:	2b00      	cmp	r3, #0
 8004652:	f000 80a0 	beq.w	8004796 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004656:	2300      	movs	r3, #0
 8004658:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800465a:	4b13      	ldr	r3, [pc, #76]	; (80046a8 <HAL_RCC_OscConfig+0x2ac>)
 800465c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800465e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004662:	2b00      	cmp	r3, #0
 8004664:	d10f      	bne.n	8004686 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004666:	2300      	movs	r3, #0
 8004668:	60bb      	str	r3, [r7, #8]
 800466a:	4b0f      	ldr	r3, [pc, #60]	; (80046a8 <HAL_RCC_OscConfig+0x2ac>)
 800466c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800466e:	4a0e      	ldr	r2, [pc, #56]	; (80046a8 <HAL_RCC_OscConfig+0x2ac>)
 8004670:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004674:	6413      	str	r3, [r2, #64]	; 0x40
 8004676:	4b0c      	ldr	r3, [pc, #48]	; (80046a8 <HAL_RCC_OscConfig+0x2ac>)
 8004678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800467a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800467e:	60bb      	str	r3, [r7, #8]
 8004680:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004682:	2301      	movs	r3, #1
 8004684:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004686:	4b0b      	ldr	r3, [pc, #44]	; (80046b4 <HAL_RCC_OscConfig+0x2b8>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800468e:	2b00      	cmp	r3, #0
 8004690:	d121      	bne.n	80046d6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004692:	4b08      	ldr	r3, [pc, #32]	; (80046b4 <HAL_RCC_OscConfig+0x2b8>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a07      	ldr	r2, [pc, #28]	; (80046b4 <HAL_RCC_OscConfig+0x2b8>)
 8004698:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800469c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800469e:	f7fe fa81 	bl	8002ba4 <HAL_GetTick>
 80046a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046a4:	e011      	b.n	80046ca <HAL_RCC_OscConfig+0x2ce>
 80046a6:	bf00      	nop
 80046a8:	40023800 	.word	0x40023800
 80046ac:	42470000 	.word	0x42470000
 80046b0:	42470e80 	.word	0x42470e80
 80046b4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046b8:	f7fe fa74 	bl	8002ba4 <HAL_GetTick>
 80046bc:	4602      	mov	r2, r0
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	2b02      	cmp	r3, #2
 80046c4:	d901      	bls.n	80046ca <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80046c6:	2303      	movs	r3, #3
 80046c8:	e106      	b.n	80048d8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046ca:	4b85      	ldr	r3, [pc, #532]	; (80048e0 <HAL_RCC_OscConfig+0x4e4>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d0f0      	beq.n	80046b8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	2b01      	cmp	r3, #1
 80046dc:	d106      	bne.n	80046ec <HAL_RCC_OscConfig+0x2f0>
 80046de:	4b81      	ldr	r3, [pc, #516]	; (80048e4 <HAL_RCC_OscConfig+0x4e8>)
 80046e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046e2:	4a80      	ldr	r2, [pc, #512]	; (80048e4 <HAL_RCC_OscConfig+0x4e8>)
 80046e4:	f043 0301 	orr.w	r3, r3, #1
 80046e8:	6713      	str	r3, [r2, #112]	; 0x70
 80046ea:	e01c      	b.n	8004726 <HAL_RCC_OscConfig+0x32a>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	2b05      	cmp	r3, #5
 80046f2:	d10c      	bne.n	800470e <HAL_RCC_OscConfig+0x312>
 80046f4:	4b7b      	ldr	r3, [pc, #492]	; (80048e4 <HAL_RCC_OscConfig+0x4e8>)
 80046f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046f8:	4a7a      	ldr	r2, [pc, #488]	; (80048e4 <HAL_RCC_OscConfig+0x4e8>)
 80046fa:	f043 0304 	orr.w	r3, r3, #4
 80046fe:	6713      	str	r3, [r2, #112]	; 0x70
 8004700:	4b78      	ldr	r3, [pc, #480]	; (80048e4 <HAL_RCC_OscConfig+0x4e8>)
 8004702:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004704:	4a77      	ldr	r2, [pc, #476]	; (80048e4 <HAL_RCC_OscConfig+0x4e8>)
 8004706:	f043 0301 	orr.w	r3, r3, #1
 800470a:	6713      	str	r3, [r2, #112]	; 0x70
 800470c:	e00b      	b.n	8004726 <HAL_RCC_OscConfig+0x32a>
 800470e:	4b75      	ldr	r3, [pc, #468]	; (80048e4 <HAL_RCC_OscConfig+0x4e8>)
 8004710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004712:	4a74      	ldr	r2, [pc, #464]	; (80048e4 <HAL_RCC_OscConfig+0x4e8>)
 8004714:	f023 0301 	bic.w	r3, r3, #1
 8004718:	6713      	str	r3, [r2, #112]	; 0x70
 800471a:	4b72      	ldr	r3, [pc, #456]	; (80048e4 <HAL_RCC_OscConfig+0x4e8>)
 800471c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800471e:	4a71      	ldr	r2, [pc, #452]	; (80048e4 <HAL_RCC_OscConfig+0x4e8>)
 8004720:	f023 0304 	bic.w	r3, r3, #4
 8004724:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d015      	beq.n	800475a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800472e:	f7fe fa39 	bl	8002ba4 <HAL_GetTick>
 8004732:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004734:	e00a      	b.n	800474c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004736:	f7fe fa35 	bl	8002ba4 <HAL_GetTick>
 800473a:	4602      	mov	r2, r0
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	1ad3      	subs	r3, r2, r3
 8004740:	f241 3288 	movw	r2, #5000	; 0x1388
 8004744:	4293      	cmp	r3, r2
 8004746:	d901      	bls.n	800474c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004748:	2303      	movs	r3, #3
 800474a:	e0c5      	b.n	80048d8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800474c:	4b65      	ldr	r3, [pc, #404]	; (80048e4 <HAL_RCC_OscConfig+0x4e8>)
 800474e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004750:	f003 0302 	and.w	r3, r3, #2
 8004754:	2b00      	cmp	r3, #0
 8004756:	d0ee      	beq.n	8004736 <HAL_RCC_OscConfig+0x33a>
 8004758:	e014      	b.n	8004784 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800475a:	f7fe fa23 	bl	8002ba4 <HAL_GetTick>
 800475e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004760:	e00a      	b.n	8004778 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004762:	f7fe fa1f 	bl	8002ba4 <HAL_GetTick>
 8004766:	4602      	mov	r2, r0
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	1ad3      	subs	r3, r2, r3
 800476c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004770:	4293      	cmp	r3, r2
 8004772:	d901      	bls.n	8004778 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004774:	2303      	movs	r3, #3
 8004776:	e0af      	b.n	80048d8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004778:	4b5a      	ldr	r3, [pc, #360]	; (80048e4 <HAL_RCC_OscConfig+0x4e8>)
 800477a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800477c:	f003 0302 	and.w	r3, r3, #2
 8004780:	2b00      	cmp	r3, #0
 8004782:	d1ee      	bne.n	8004762 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004784:	7dfb      	ldrb	r3, [r7, #23]
 8004786:	2b01      	cmp	r3, #1
 8004788:	d105      	bne.n	8004796 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800478a:	4b56      	ldr	r3, [pc, #344]	; (80048e4 <HAL_RCC_OscConfig+0x4e8>)
 800478c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800478e:	4a55      	ldr	r2, [pc, #340]	; (80048e4 <HAL_RCC_OscConfig+0x4e8>)
 8004790:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004794:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	699b      	ldr	r3, [r3, #24]
 800479a:	2b00      	cmp	r3, #0
 800479c:	f000 809b 	beq.w	80048d6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80047a0:	4b50      	ldr	r3, [pc, #320]	; (80048e4 <HAL_RCC_OscConfig+0x4e8>)
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	f003 030c 	and.w	r3, r3, #12
 80047a8:	2b08      	cmp	r3, #8
 80047aa:	d05c      	beq.n	8004866 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	699b      	ldr	r3, [r3, #24]
 80047b0:	2b02      	cmp	r3, #2
 80047b2:	d141      	bne.n	8004838 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047b4:	4b4c      	ldr	r3, [pc, #304]	; (80048e8 <HAL_RCC_OscConfig+0x4ec>)
 80047b6:	2200      	movs	r2, #0
 80047b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047ba:	f7fe f9f3 	bl	8002ba4 <HAL_GetTick>
 80047be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047c0:	e008      	b.n	80047d4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047c2:	f7fe f9ef 	bl	8002ba4 <HAL_GetTick>
 80047c6:	4602      	mov	r2, r0
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	1ad3      	subs	r3, r2, r3
 80047cc:	2b02      	cmp	r3, #2
 80047ce:	d901      	bls.n	80047d4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80047d0:	2303      	movs	r3, #3
 80047d2:	e081      	b.n	80048d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047d4:	4b43      	ldr	r3, [pc, #268]	; (80048e4 <HAL_RCC_OscConfig+0x4e8>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d1f0      	bne.n	80047c2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	69da      	ldr	r2, [r3, #28]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6a1b      	ldr	r3, [r3, #32]
 80047e8:	431a      	orrs	r2, r3
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ee:	019b      	lsls	r3, r3, #6
 80047f0:	431a      	orrs	r2, r3
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047f6:	085b      	lsrs	r3, r3, #1
 80047f8:	3b01      	subs	r3, #1
 80047fa:	041b      	lsls	r3, r3, #16
 80047fc:	431a      	orrs	r2, r3
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004802:	061b      	lsls	r3, r3, #24
 8004804:	4937      	ldr	r1, [pc, #220]	; (80048e4 <HAL_RCC_OscConfig+0x4e8>)
 8004806:	4313      	orrs	r3, r2
 8004808:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800480a:	4b37      	ldr	r3, [pc, #220]	; (80048e8 <HAL_RCC_OscConfig+0x4ec>)
 800480c:	2201      	movs	r2, #1
 800480e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004810:	f7fe f9c8 	bl	8002ba4 <HAL_GetTick>
 8004814:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004816:	e008      	b.n	800482a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004818:	f7fe f9c4 	bl	8002ba4 <HAL_GetTick>
 800481c:	4602      	mov	r2, r0
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	1ad3      	subs	r3, r2, r3
 8004822:	2b02      	cmp	r3, #2
 8004824:	d901      	bls.n	800482a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004826:	2303      	movs	r3, #3
 8004828:	e056      	b.n	80048d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800482a:	4b2e      	ldr	r3, [pc, #184]	; (80048e4 <HAL_RCC_OscConfig+0x4e8>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004832:	2b00      	cmp	r3, #0
 8004834:	d0f0      	beq.n	8004818 <HAL_RCC_OscConfig+0x41c>
 8004836:	e04e      	b.n	80048d6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004838:	4b2b      	ldr	r3, [pc, #172]	; (80048e8 <HAL_RCC_OscConfig+0x4ec>)
 800483a:	2200      	movs	r2, #0
 800483c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800483e:	f7fe f9b1 	bl	8002ba4 <HAL_GetTick>
 8004842:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004844:	e008      	b.n	8004858 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004846:	f7fe f9ad 	bl	8002ba4 <HAL_GetTick>
 800484a:	4602      	mov	r2, r0
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	1ad3      	subs	r3, r2, r3
 8004850:	2b02      	cmp	r3, #2
 8004852:	d901      	bls.n	8004858 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004854:	2303      	movs	r3, #3
 8004856:	e03f      	b.n	80048d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004858:	4b22      	ldr	r3, [pc, #136]	; (80048e4 <HAL_RCC_OscConfig+0x4e8>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004860:	2b00      	cmp	r3, #0
 8004862:	d1f0      	bne.n	8004846 <HAL_RCC_OscConfig+0x44a>
 8004864:	e037      	b.n	80048d6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	699b      	ldr	r3, [r3, #24]
 800486a:	2b01      	cmp	r3, #1
 800486c:	d101      	bne.n	8004872 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	e032      	b.n	80048d8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004872:	4b1c      	ldr	r3, [pc, #112]	; (80048e4 <HAL_RCC_OscConfig+0x4e8>)
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	699b      	ldr	r3, [r3, #24]
 800487c:	2b01      	cmp	r3, #1
 800487e:	d028      	beq.n	80048d2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800488a:	429a      	cmp	r2, r3
 800488c:	d121      	bne.n	80048d2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004898:	429a      	cmp	r2, r3
 800489a:	d11a      	bne.n	80048d2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800489c:	68fa      	ldr	r2, [r7, #12]
 800489e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80048a2:	4013      	ands	r3, r2
 80048a4:	687a      	ldr	r2, [r7, #4]
 80048a6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80048a8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d111      	bne.n	80048d2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048b8:	085b      	lsrs	r3, r3, #1
 80048ba:	3b01      	subs	r3, #1
 80048bc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80048be:	429a      	cmp	r2, r3
 80048c0:	d107      	bne.n	80048d2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048cc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80048ce:	429a      	cmp	r2, r3
 80048d0:	d001      	beq.n	80048d6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	e000      	b.n	80048d8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80048d6:	2300      	movs	r3, #0
}
 80048d8:	4618      	mov	r0, r3
 80048da:	3718      	adds	r7, #24
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}
 80048e0:	40007000 	.word	0x40007000
 80048e4:	40023800 	.word	0x40023800
 80048e8:	42470060 	.word	0x42470060

080048ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b084      	sub	sp, #16
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
 80048f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d101      	bne.n	8004900 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80048fc:	2301      	movs	r3, #1
 80048fe:	e0cc      	b.n	8004a9a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004900:	4b68      	ldr	r3, [pc, #416]	; (8004aa4 <HAL_RCC_ClockConfig+0x1b8>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f003 0307 	and.w	r3, r3, #7
 8004908:	683a      	ldr	r2, [r7, #0]
 800490a:	429a      	cmp	r2, r3
 800490c:	d90c      	bls.n	8004928 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800490e:	4b65      	ldr	r3, [pc, #404]	; (8004aa4 <HAL_RCC_ClockConfig+0x1b8>)
 8004910:	683a      	ldr	r2, [r7, #0]
 8004912:	b2d2      	uxtb	r2, r2
 8004914:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004916:	4b63      	ldr	r3, [pc, #396]	; (8004aa4 <HAL_RCC_ClockConfig+0x1b8>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f003 0307 	and.w	r3, r3, #7
 800491e:	683a      	ldr	r2, [r7, #0]
 8004920:	429a      	cmp	r2, r3
 8004922:	d001      	beq.n	8004928 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004924:	2301      	movs	r3, #1
 8004926:	e0b8      	b.n	8004a9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f003 0302 	and.w	r3, r3, #2
 8004930:	2b00      	cmp	r3, #0
 8004932:	d020      	beq.n	8004976 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f003 0304 	and.w	r3, r3, #4
 800493c:	2b00      	cmp	r3, #0
 800493e:	d005      	beq.n	800494c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004940:	4b59      	ldr	r3, [pc, #356]	; (8004aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	4a58      	ldr	r2, [pc, #352]	; (8004aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8004946:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800494a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f003 0308 	and.w	r3, r3, #8
 8004954:	2b00      	cmp	r3, #0
 8004956:	d005      	beq.n	8004964 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004958:	4b53      	ldr	r3, [pc, #332]	; (8004aa8 <HAL_RCC_ClockConfig+0x1bc>)
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	4a52      	ldr	r2, [pc, #328]	; (8004aa8 <HAL_RCC_ClockConfig+0x1bc>)
 800495e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004962:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004964:	4b50      	ldr	r3, [pc, #320]	; (8004aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	494d      	ldr	r1, [pc, #308]	; (8004aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8004972:	4313      	orrs	r3, r2
 8004974:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f003 0301 	and.w	r3, r3, #1
 800497e:	2b00      	cmp	r3, #0
 8004980:	d044      	beq.n	8004a0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	2b01      	cmp	r3, #1
 8004988:	d107      	bne.n	800499a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800498a:	4b47      	ldr	r3, [pc, #284]	; (8004aa8 <HAL_RCC_ClockConfig+0x1bc>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004992:	2b00      	cmp	r3, #0
 8004994:	d119      	bne.n	80049ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	e07f      	b.n	8004a9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	2b02      	cmp	r3, #2
 80049a0:	d003      	beq.n	80049aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80049a6:	2b03      	cmp	r3, #3
 80049a8:	d107      	bne.n	80049ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049aa:	4b3f      	ldr	r3, [pc, #252]	; (8004aa8 <HAL_RCC_ClockConfig+0x1bc>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d109      	bne.n	80049ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	e06f      	b.n	8004a9a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049ba:	4b3b      	ldr	r3, [pc, #236]	; (8004aa8 <HAL_RCC_ClockConfig+0x1bc>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f003 0302 	and.w	r3, r3, #2
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d101      	bne.n	80049ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	e067      	b.n	8004a9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80049ca:	4b37      	ldr	r3, [pc, #220]	; (8004aa8 <HAL_RCC_ClockConfig+0x1bc>)
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	f023 0203 	bic.w	r2, r3, #3
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	4934      	ldr	r1, [pc, #208]	; (8004aa8 <HAL_RCC_ClockConfig+0x1bc>)
 80049d8:	4313      	orrs	r3, r2
 80049da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80049dc:	f7fe f8e2 	bl	8002ba4 <HAL_GetTick>
 80049e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049e2:	e00a      	b.n	80049fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049e4:	f7fe f8de 	bl	8002ba4 <HAL_GetTick>
 80049e8:	4602      	mov	r2, r0
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	1ad3      	subs	r3, r2, r3
 80049ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d901      	bls.n	80049fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80049f6:	2303      	movs	r3, #3
 80049f8:	e04f      	b.n	8004a9a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049fa:	4b2b      	ldr	r3, [pc, #172]	; (8004aa8 <HAL_RCC_ClockConfig+0x1bc>)
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	f003 020c 	and.w	r2, r3, #12
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	009b      	lsls	r3, r3, #2
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	d1eb      	bne.n	80049e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a0c:	4b25      	ldr	r3, [pc, #148]	; (8004aa4 <HAL_RCC_ClockConfig+0x1b8>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f003 0307 	and.w	r3, r3, #7
 8004a14:	683a      	ldr	r2, [r7, #0]
 8004a16:	429a      	cmp	r2, r3
 8004a18:	d20c      	bcs.n	8004a34 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a1a:	4b22      	ldr	r3, [pc, #136]	; (8004aa4 <HAL_RCC_ClockConfig+0x1b8>)
 8004a1c:	683a      	ldr	r2, [r7, #0]
 8004a1e:	b2d2      	uxtb	r2, r2
 8004a20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a22:	4b20      	ldr	r3, [pc, #128]	; (8004aa4 <HAL_RCC_ClockConfig+0x1b8>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 0307 	and.w	r3, r3, #7
 8004a2a:	683a      	ldr	r2, [r7, #0]
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d001      	beq.n	8004a34 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	e032      	b.n	8004a9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f003 0304 	and.w	r3, r3, #4
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d008      	beq.n	8004a52 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a40:	4b19      	ldr	r3, [pc, #100]	; (8004aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	4916      	ldr	r1, [pc, #88]	; (8004aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 0308 	and.w	r3, r3, #8
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d009      	beq.n	8004a72 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a5e:	4b12      	ldr	r3, [pc, #72]	; (8004aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	691b      	ldr	r3, [r3, #16]
 8004a6a:	00db      	lsls	r3, r3, #3
 8004a6c:	490e      	ldr	r1, [pc, #56]	; (8004aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004a72:	f000 f821 	bl	8004ab8 <HAL_RCC_GetSysClockFreq>
 8004a76:	4602      	mov	r2, r0
 8004a78:	4b0b      	ldr	r3, [pc, #44]	; (8004aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	091b      	lsrs	r3, r3, #4
 8004a7e:	f003 030f 	and.w	r3, r3, #15
 8004a82:	490a      	ldr	r1, [pc, #40]	; (8004aac <HAL_RCC_ClockConfig+0x1c0>)
 8004a84:	5ccb      	ldrb	r3, [r1, r3]
 8004a86:	fa22 f303 	lsr.w	r3, r2, r3
 8004a8a:	4a09      	ldr	r2, [pc, #36]	; (8004ab0 <HAL_RCC_ClockConfig+0x1c4>)
 8004a8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004a8e:	4b09      	ldr	r3, [pc, #36]	; (8004ab4 <HAL_RCC_ClockConfig+0x1c8>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4618      	mov	r0, r3
 8004a94:	f7fe f842 	bl	8002b1c <HAL_InitTick>

  return HAL_OK;
 8004a98:	2300      	movs	r3, #0
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3710      	adds	r7, #16
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}
 8004aa2:	bf00      	nop
 8004aa4:	40023c00 	.word	0x40023c00
 8004aa8:	40023800 	.word	0x40023800
 8004aac:	08007c18 	.word	0x08007c18
 8004ab0:	20000244 	.word	0x20000244
 8004ab4:	20000248 	.word	0x20000248

08004ab8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ab8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004abc:	b084      	sub	sp, #16
 8004abe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	607b      	str	r3, [r7, #4]
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	60fb      	str	r3, [r7, #12]
 8004ac8:	2300      	movs	r3, #0
 8004aca:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004acc:	2300      	movs	r3, #0
 8004ace:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ad0:	4b67      	ldr	r3, [pc, #412]	; (8004c70 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004ad2:	689b      	ldr	r3, [r3, #8]
 8004ad4:	f003 030c 	and.w	r3, r3, #12
 8004ad8:	2b08      	cmp	r3, #8
 8004ada:	d00d      	beq.n	8004af8 <HAL_RCC_GetSysClockFreq+0x40>
 8004adc:	2b08      	cmp	r3, #8
 8004ade:	f200 80bd 	bhi.w	8004c5c <HAL_RCC_GetSysClockFreq+0x1a4>
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d002      	beq.n	8004aec <HAL_RCC_GetSysClockFreq+0x34>
 8004ae6:	2b04      	cmp	r3, #4
 8004ae8:	d003      	beq.n	8004af2 <HAL_RCC_GetSysClockFreq+0x3a>
 8004aea:	e0b7      	b.n	8004c5c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004aec:	4b61      	ldr	r3, [pc, #388]	; (8004c74 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004aee:	60bb      	str	r3, [r7, #8]
       break;
 8004af0:	e0b7      	b.n	8004c62 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004af2:	4b61      	ldr	r3, [pc, #388]	; (8004c78 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004af4:	60bb      	str	r3, [r7, #8]
      break;
 8004af6:	e0b4      	b.n	8004c62 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004af8:	4b5d      	ldr	r3, [pc, #372]	; (8004c70 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b00:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004b02:	4b5b      	ldr	r3, [pc, #364]	; (8004c70 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d04d      	beq.n	8004baa <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b0e:	4b58      	ldr	r3, [pc, #352]	; (8004c70 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	099b      	lsrs	r3, r3, #6
 8004b14:	461a      	mov	r2, r3
 8004b16:	f04f 0300 	mov.w	r3, #0
 8004b1a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004b1e:	f04f 0100 	mov.w	r1, #0
 8004b22:	ea02 0800 	and.w	r8, r2, r0
 8004b26:	ea03 0901 	and.w	r9, r3, r1
 8004b2a:	4640      	mov	r0, r8
 8004b2c:	4649      	mov	r1, r9
 8004b2e:	f04f 0200 	mov.w	r2, #0
 8004b32:	f04f 0300 	mov.w	r3, #0
 8004b36:	014b      	lsls	r3, r1, #5
 8004b38:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004b3c:	0142      	lsls	r2, r0, #5
 8004b3e:	4610      	mov	r0, r2
 8004b40:	4619      	mov	r1, r3
 8004b42:	ebb0 0008 	subs.w	r0, r0, r8
 8004b46:	eb61 0109 	sbc.w	r1, r1, r9
 8004b4a:	f04f 0200 	mov.w	r2, #0
 8004b4e:	f04f 0300 	mov.w	r3, #0
 8004b52:	018b      	lsls	r3, r1, #6
 8004b54:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004b58:	0182      	lsls	r2, r0, #6
 8004b5a:	1a12      	subs	r2, r2, r0
 8004b5c:	eb63 0301 	sbc.w	r3, r3, r1
 8004b60:	f04f 0000 	mov.w	r0, #0
 8004b64:	f04f 0100 	mov.w	r1, #0
 8004b68:	00d9      	lsls	r1, r3, #3
 8004b6a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004b6e:	00d0      	lsls	r0, r2, #3
 8004b70:	4602      	mov	r2, r0
 8004b72:	460b      	mov	r3, r1
 8004b74:	eb12 0208 	adds.w	r2, r2, r8
 8004b78:	eb43 0309 	adc.w	r3, r3, r9
 8004b7c:	f04f 0000 	mov.w	r0, #0
 8004b80:	f04f 0100 	mov.w	r1, #0
 8004b84:	0259      	lsls	r1, r3, #9
 8004b86:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004b8a:	0250      	lsls	r0, r2, #9
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	460b      	mov	r3, r1
 8004b90:	4610      	mov	r0, r2
 8004b92:	4619      	mov	r1, r3
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	461a      	mov	r2, r3
 8004b98:	f04f 0300 	mov.w	r3, #0
 8004b9c:	f7fc f900 	bl	8000da0 <__aeabi_uldivmod>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	460b      	mov	r3, r1
 8004ba4:	4613      	mov	r3, r2
 8004ba6:	60fb      	str	r3, [r7, #12]
 8004ba8:	e04a      	b.n	8004c40 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004baa:	4b31      	ldr	r3, [pc, #196]	; (8004c70 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	099b      	lsrs	r3, r3, #6
 8004bb0:	461a      	mov	r2, r3
 8004bb2:	f04f 0300 	mov.w	r3, #0
 8004bb6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004bba:	f04f 0100 	mov.w	r1, #0
 8004bbe:	ea02 0400 	and.w	r4, r2, r0
 8004bc2:	ea03 0501 	and.w	r5, r3, r1
 8004bc6:	4620      	mov	r0, r4
 8004bc8:	4629      	mov	r1, r5
 8004bca:	f04f 0200 	mov.w	r2, #0
 8004bce:	f04f 0300 	mov.w	r3, #0
 8004bd2:	014b      	lsls	r3, r1, #5
 8004bd4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004bd8:	0142      	lsls	r2, r0, #5
 8004bda:	4610      	mov	r0, r2
 8004bdc:	4619      	mov	r1, r3
 8004bde:	1b00      	subs	r0, r0, r4
 8004be0:	eb61 0105 	sbc.w	r1, r1, r5
 8004be4:	f04f 0200 	mov.w	r2, #0
 8004be8:	f04f 0300 	mov.w	r3, #0
 8004bec:	018b      	lsls	r3, r1, #6
 8004bee:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004bf2:	0182      	lsls	r2, r0, #6
 8004bf4:	1a12      	subs	r2, r2, r0
 8004bf6:	eb63 0301 	sbc.w	r3, r3, r1
 8004bfa:	f04f 0000 	mov.w	r0, #0
 8004bfe:	f04f 0100 	mov.w	r1, #0
 8004c02:	00d9      	lsls	r1, r3, #3
 8004c04:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004c08:	00d0      	lsls	r0, r2, #3
 8004c0a:	4602      	mov	r2, r0
 8004c0c:	460b      	mov	r3, r1
 8004c0e:	1912      	adds	r2, r2, r4
 8004c10:	eb45 0303 	adc.w	r3, r5, r3
 8004c14:	f04f 0000 	mov.w	r0, #0
 8004c18:	f04f 0100 	mov.w	r1, #0
 8004c1c:	0299      	lsls	r1, r3, #10
 8004c1e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004c22:	0290      	lsls	r0, r2, #10
 8004c24:	4602      	mov	r2, r0
 8004c26:	460b      	mov	r3, r1
 8004c28:	4610      	mov	r0, r2
 8004c2a:	4619      	mov	r1, r3
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	461a      	mov	r2, r3
 8004c30:	f04f 0300 	mov.w	r3, #0
 8004c34:	f7fc f8b4 	bl	8000da0 <__aeabi_uldivmod>
 8004c38:	4602      	mov	r2, r0
 8004c3a:	460b      	mov	r3, r1
 8004c3c:	4613      	mov	r3, r2
 8004c3e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004c40:	4b0b      	ldr	r3, [pc, #44]	; (8004c70 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	0c1b      	lsrs	r3, r3, #16
 8004c46:	f003 0303 	and.w	r3, r3, #3
 8004c4a:	3301      	adds	r3, #1
 8004c4c:	005b      	lsls	r3, r3, #1
 8004c4e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004c50:	68fa      	ldr	r2, [r7, #12]
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c58:	60bb      	str	r3, [r7, #8]
      break;
 8004c5a:	e002      	b.n	8004c62 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c5c:	4b05      	ldr	r3, [pc, #20]	; (8004c74 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004c5e:	60bb      	str	r3, [r7, #8]
      break;
 8004c60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c62:	68bb      	ldr	r3, [r7, #8]
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	3710      	adds	r7, #16
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004c6e:	bf00      	nop
 8004c70:	40023800 	.word	0x40023800
 8004c74:	00f42400 	.word	0x00f42400
 8004c78:	007a1200 	.word	0x007a1200

08004c7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c80:	4b03      	ldr	r3, [pc, #12]	; (8004c90 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c82:	681b      	ldr	r3, [r3, #0]
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	46bd      	mov	sp, r7
 8004c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8c:	4770      	bx	lr
 8004c8e:	bf00      	nop
 8004c90:	20000244 	.word	0x20000244

08004c94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004c98:	f7ff fff0 	bl	8004c7c <HAL_RCC_GetHCLKFreq>
 8004c9c:	4602      	mov	r2, r0
 8004c9e:	4b05      	ldr	r3, [pc, #20]	; (8004cb4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	0a9b      	lsrs	r3, r3, #10
 8004ca4:	f003 0307 	and.w	r3, r3, #7
 8004ca8:	4903      	ldr	r1, [pc, #12]	; (8004cb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004caa:	5ccb      	ldrb	r3, [r1, r3]
 8004cac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	bd80      	pop	{r7, pc}
 8004cb4:	40023800 	.word	0x40023800
 8004cb8:	08007c28 	.word	0x08007c28

08004cbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004cc0:	f7ff ffdc 	bl	8004c7c <HAL_RCC_GetHCLKFreq>
 8004cc4:	4602      	mov	r2, r0
 8004cc6:	4b05      	ldr	r3, [pc, #20]	; (8004cdc <HAL_RCC_GetPCLK2Freq+0x20>)
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	0b5b      	lsrs	r3, r3, #13
 8004ccc:	f003 0307 	and.w	r3, r3, #7
 8004cd0:	4903      	ldr	r1, [pc, #12]	; (8004ce0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004cd2:	5ccb      	ldrb	r3, [r1, r3]
 8004cd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	bd80      	pop	{r7, pc}
 8004cdc:	40023800 	.word	0x40023800
 8004ce0:	08007c28 	.word	0x08007c28

08004ce4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b082      	sub	sp, #8
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d101      	bne.n	8004cf6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e07b      	b.n	8004dee <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d108      	bne.n	8004d10 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d06:	d009      	beq.n	8004d1c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	61da      	str	r2, [r3, #28]
 8004d0e:	e005      	b.n	8004d1c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2200      	movs	r2, #0
 8004d14:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d28:	b2db      	uxtb	r3, r3
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d106      	bne.n	8004d3c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2200      	movs	r2, #0
 8004d32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f7fd fd5a 	bl	80027f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2202      	movs	r2, #2
 8004d40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d52:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	689b      	ldr	r3, [r3, #8]
 8004d60:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004d64:	431a      	orrs	r2, r3
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	68db      	ldr	r3, [r3, #12]
 8004d6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d6e:	431a      	orrs	r2, r3
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	691b      	ldr	r3, [r3, #16]
 8004d74:	f003 0302 	and.w	r3, r3, #2
 8004d78:	431a      	orrs	r2, r3
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	695b      	ldr	r3, [r3, #20]
 8004d7e:	f003 0301 	and.w	r3, r3, #1
 8004d82:	431a      	orrs	r2, r3
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	699b      	ldr	r3, [r3, #24]
 8004d88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d8c:	431a      	orrs	r2, r3
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	69db      	ldr	r3, [r3, #28]
 8004d92:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004d96:	431a      	orrs	r2, r3
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6a1b      	ldr	r3, [r3, #32]
 8004d9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004da0:	ea42 0103 	orr.w	r1, r2, r3
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004da8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	430a      	orrs	r2, r1
 8004db2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	699b      	ldr	r3, [r3, #24]
 8004db8:	0c1b      	lsrs	r3, r3, #16
 8004dba:	f003 0104 	and.w	r1, r3, #4
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc2:	f003 0210 	and.w	r2, r3, #16
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	430a      	orrs	r2, r1
 8004dcc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	69da      	ldr	r2, [r3, #28]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ddc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2200      	movs	r2, #0
 8004de2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2201      	movs	r2, #1
 8004de8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004dec:	2300      	movs	r3, #0
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	3708      	adds	r7, #8
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}
	...

08004df8 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b087      	sub	sp, #28
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	60f8      	str	r0, [r7, #12]
 8004e00:	60b9      	str	r1, [r7, #8]
 8004e02:	4613      	mov	r3, r2
 8004e04:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004e06:	2300      	movs	r3, #0
 8004e08:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	d101      	bne.n	8004e18 <HAL_SPI_Transmit_IT+0x20>
 8004e14:	2302      	movs	r3, #2
 8004e16:	e06f      	b.n	8004ef8 <HAL_SPI_Transmit_IT+0x100>
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if ((pData == NULL) || (Size == 0U))
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d002      	beq.n	8004e2c <HAL_SPI_Transmit_IT+0x34>
 8004e26:	88fb      	ldrh	r3, [r7, #6]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d102      	bne.n	8004e32 <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004e30:	e05d      	b.n	8004eee <HAL_SPI_Transmit_IT+0xf6>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e38:	b2db      	uxtb	r3, r3
 8004e3a:	2b01      	cmp	r3, #1
 8004e3c:	d002      	beq.n	8004e44 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 8004e3e:	2302      	movs	r3, #2
 8004e40:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004e42:	e054      	b.n	8004eee <HAL_SPI_Transmit_IT+0xf6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2203      	movs	r2, #3
 8004e48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	68ba      	ldr	r2, [r7, #8]
 8004e56:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	88fa      	ldrh	r2, [r7, #6]
 8004e5c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	88fa      	ldrh	r2, [r7, #6]
 8004e62:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	2200      	movs	r2, #0
 8004e68:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2200      	movs	r2, #0
 8004e74:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	68db      	ldr	r3, [r3, #12]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d003      	beq.n	8004e8c <HAL_SPI_Transmit_IT+0x94>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	4a1f      	ldr	r2, [pc, #124]	; (8004f04 <HAL_SPI_Transmit_IT+0x10c>)
 8004e88:	645a      	str	r2, [r3, #68]	; 0x44
 8004e8a:	e002      	b.n	8004e92 <HAL_SPI_Transmit_IT+0x9a>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	4a1e      	ldr	r2, [pc, #120]	; (8004f08 <HAL_SPI_Transmit_IT+0x110>)
 8004e90:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e9a:	d10f      	bne.n	8004ebc <HAL_SPI_Transmit_IT+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	681a      	ldr	r2, [r3, #0]
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004eaa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004eba:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	685a      	ldr	r2, [r3, #4]
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8004eca:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ed6:	2b40      	cmp	r3, #64	; 0x40
 8004ed8:	d008      	beq.n	8004eec <HAL_SPI_Transmit_IT+0xf4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	681a      	ldr	r2, [r3, #0]
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ee8:	601a      	str	r2, [r3, #0]
 8004eea:	e000      	b.n	8004eee <HAL_SPI_Transmit_IT+0xf6>
  }

error :
 8004eec:	bf00      	nop
  __HAL_UNLOCK(hspi);
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004ef6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	371c      	adds	r7, #28
 8004efc:	46bd      	mov	sp, r7
 8004efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f02:	4770      	bx	lr
 8004f04:	0800518f 	.word	0x0800518f
 8004f08:	08005149 	.word	0x08005149

08004f0c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b088      	sub	sp, #32
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004f24:	69bb      	ldr	r3, [r7, #24]
 8004f26:	099b      	lsrs	r3, r3, #6
 8004f28:	f003 0301 	and.w	r3, r3, #1
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d10f      	bne.n	8004f50 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004f30:	69bb      	ldr	r3, [r7, #24]
 8004f32:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d00a      	beq.n	8004f50 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004f3a:	69fb      	ldr	r3, [r7, #28]
 8004f3c:	099b      	lsrs	r3, r3, #6
 8004f3e:	f003 0301 	and.w	r3, r3, #1
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d004      	beq.n	8004f50 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	4798      	blx	r3
    return;
 8004f4e:	e0d7      	b.n	8005100 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004f50:	69bb      	ldr	r3, [r7, #24]
 8004f52:	085b      	lsrs	r3, r3, #1
 8004f54:	f003 0301 	and.w	r3, r3, #1
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d00a      	beq.n	8004f72 <HAL_SPI_IRQHandler+0x66>
 8004f5c:	69fb      	ldr	r3, [r7, #28]
 8004f5e:	09db      	lsrs	r3, r3, #7
 8004f60:	f003 0301 	and.w	r3, r3, #1
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d004      	beq.n	8004f72 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f6c:	6878      	ldr	r0, [r7, #4]
 8004f6e:	4798      	blx	r3
    return;
 8004f70:	e0c6      	b.n	8005100 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004f72:	69bb      	ldr	r3, [r7, #24]
 8004f74:	095b      	lsrs	r3, r3, #5
 8004f76:	f003 0301 	and.w	r3, r3, #1
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d10c      	bne.n	8004f98 <HAL_SPI_IRQHandler+0x8c>
 8004f7e:	69bb      	ldr	r3, [r7, #24]
 8004f80:	099b      	lsrs	r3, r3, #6
 8004f82:	f003 0301 	and.w	r3, r3, #1
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d106      	bne.n	8004f98 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004f8a:	69bb      	ldr	r3, [r7, #24]
 8004f8c:	0a1b      	lsrs	r3, r3, #8
 8004f8e:	f003 0301 	and.w	r3, r3, #1
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	f000 80b4 	beq.w	8005100 <HAL_SPI_IRQHandler+0x1f4>
 8004f98:	69fb      	ldr	r3, [r7, #28]
 8004f9a:	095b      	lsrs	r3, r3, #5
 8004f9c:	f003 0301 	and.w	r3, r3, #1
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	f000 80ad 	beq.w	8005100 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004fa6:	69bb      	ldr	r3, [r7, #24]
 8004fa8:	099b      	lsrs	r3, r3, #6
 8004faa:	f003 0301 	and.w	r3, r3, #1
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d023      	beq.n	8004ffa <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004fb8:	b2db      	uxtb	r3, r3
 8004fba:	2b03      	cmp	r3, #3
 8004fbc:	d011      	beq.n	8004fe2 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fc2:	f043 0204 	orr.w	r2, r3, #4
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004fca:	2300      	movs	r3, #0
 8004fcc:	617b      	str	r3, [r7, #20]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	68db      	ldr	r3, [r3, #12]
 8004fd4:	617b      	str	r3, [r7, #20]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	689b      	ldr	r3, [r3, #8]
 8004fdc:	617b      	str	r3, [r7, #20]
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	e00b      	b.n	8004ffa <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	613b      	str	r3, [r7, #16]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	68db      	ldr	r3, [r3, #12]
 8004fec:	613b      	str	r3, [r7, #16]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	689b      	ldr	r3, [r3, #8]
 8004ff4:	613b      	str	r3, [r7, #16]
 8004ff6:	693b      	ldr	r3, [r7, #16]
        return;
 8004ff8:	e082      	b.n	8005100 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004ffa:	69bb      	ldr	r3, [r7, #24]
 8004ffc:	095b      	lsrs	r3, r3, #5
 8004ffe:	f003 0301 	and.w	r3, r3, #1
 8005002:	2b00      	cmp	r3, #0
 8005004:	d014      	beq.n	8005030 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800500a:	f043 0201 	orr.w	r2, r3, #1
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005012:	2300      	movs	r3, #0
 8005014:	60fb      	str	r3, [r7, #12]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	60fb      	str	r3, [r7, #12]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	681a      	ldr	r2, [r3, #0]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800502c:	601a      	str	r2, [r3, #0]
 800502e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005030:	69bb      	ldr	r3, [r7, #24]
 8005032:	0a1b      	lsrs	r3, r3, #8
 8005034:	f003 0301 	and.w	r3, r3, #1
 8005038:	2b00      	cmp	r3, #0
 800503a:	d00c      	beq.n	8005056 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005040:	f043 0208 	orr.w	r2, r3, #8
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005048:	2300      	movs	r3, #0
 800504a:	60bb      	str	r3, [r7, #8]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	689b      	ldr	r3, [r3, #8]
 8005052:	60bb      	str	r3, [r7, #8]
 8005054:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800505a:	2b00      	cmp	r3, #0
 800505c:	d04f      	beq.n	80050fe <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	685a      	ldr	r2, [r3, #4]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800506c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2201      	movs	r2, #1
 8005072:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005076:	69fb      	ldr	r3, [r7, #28]
 8005078:	f003 0302 	and.w	r3, r3, #2
 800507c:	2b00      	cmp	r3, #0
 800507e:	d104      	bne.n	800508a <HAL_SPI_IRQHandler+0x17e>
 8005080:	69fb      	ldr	r3, [r7, #28]
 8005082:	f003 0301 	and.w	r3, r3, #1
 8005086:	2b00      	cmp	r3, #0
 8005088:	d034      	beq.n	80050f4 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	685a      	ldr	r2, [r3, #4]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f022 0203 	bic.w	r2, r2, #3
 8005098:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d011      	beq.n	80050c6 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050a6:	4a18      	ldr	r2, [pc, #96]	; (8005108 <HAL_SPI_IRQHandler+0x1fc>)
 80050a8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050ae:	4618      	mov	r0, r3
 80050b0:	f7fe fd62 	bl	8003b78 <HAL_DMA_Abort_IT>
 80050b4:	4603      	mov	r3, r0
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d005      	beq.n	80050c6 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050be:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d016      	beq.n	80050fc <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050d2:	4a0d      	ldr	r2, [pc, #52]	; (8005108 <HAL_SPI_IRQHandler+0x1fc>)
 80050d4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050da:	4618      	mov	r0, r3
 80050dc:	f7fe fd4c 	bl	8003b78 <HAL_DMA_Abort_IT>
 80050e0:	4603      	mov	r3, r0
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d00a      	beq.n	80050fc <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050ea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80050f2:	e003      	b.n	80050fc <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80050f4:	6878      	ldr	r0, [r7, #4]
 80050f6:	f000 f809 	bl	800510c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80050fa:	e000      	b.n	80050fe <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80050fc:	bf00      	nop
    return;
 80050fe:	bf00      	nop
  }
}
 8005100:	3720      	adds	r7, #32
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}
 8005106:	bf00      	nop
 8005108:	08005121 	.word	0x08005121

0800510c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800510c:	b480      	push	{r7}
 800510e:	b083      	sub	sp, #12
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005114:	bf00      	nop
 8005116:	370c      	adds	r7, #12
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr

08005120 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b084      	sub	sp, #16
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800512c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	2200      	movs	r2, #0
 8005132:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2200      	movs	r2, #0
 8005138:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800513a:	68f8      	ldr	r0, [r7, #12]
 800513c:	f7ff ffe6 	bl	800510c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005140:	bf00      	nop
 8005142:	3710      	adds	r7, #16
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}

08005148 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b082      	sub	sp, #8
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	330c      	adds	r3, #12
 800515a:	7812      	ldrb	r2, [r2, #0]
 800515c:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005162:	1c5a      	adds	r2, r3, #1
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800516c:	b29b      	uxth	r3, r3
 800516e:	3b01      	subs	r3, #1
 8005170:	b29a      	uxth	r2, r3
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800517a:	b29b      	uxth	r3, r3
 800517c:	2b00      	cmp	r3, #0
 800517e:	d102      	bne.n	8005186 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8005180:	6878      	ldr	r0, [r7, #4]
 8005182:	f000 f8f1 	bl	8005368 <SPI_CloseTx_ISR>
  }
}
 8005186:	bf00      	nop
 8005188:	3708      	adds	r7, #8
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}

0800518e <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800518e:	b580      	push	{r7, lr}
 8005190:	b082      	sub	sp, #8
 8005192:	af00      	add	r7, sp, #0
 8005194:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800519a:	881a      	ldrh	r2, [r3, #0]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051a6:	1c9a      	adds	r2, r3, #2
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051b0:	b29b      	uxth	r3, r3
 80051b2:	3b01      	subs	r3, #1
 80051b4:	b29a      	uxth	r2, r3
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051be:	b29b      	uxth	r3, r3
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d102      	bne.n	80051ca <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 80051c4:	6878      	ldr	r0, [r7, #4]
 80051c6:	f000 f8cf 	bl	8005368 <SPI_CloseTx_ISR>
  }
}
 80051ca:	bf00      	nop
 80051cc:	3708      	adds	r7, #8
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}
	...

080051d4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b088      	sub	sp, #32
 80051d8:	af00      	add	r7, sp, #0
 80051da:	60f8      	str	r0, [r7, #12]
 80051dc:	60b9      	str	r1, [r7, #8]
 80051de:	603b      	str	r3, [r7, #0]
 80051e0:	4613      	mov	r3, r2
 80051e2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80051e4:	f7fd fcde 	bl	8002ba4 <HAL_GetTick>
 80051e8:	4602      	mov	r2, r0
 80051ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ec:	1a9b      	subs	r3, r3, r2
 80051ee:	683a      	ldr	r2, [r7, #0]
 80051f0:	4413      	add	r3, r2
 80051f2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80051f4:	f7fd fcd6 	bl	8002ba4 <HAL_GetTick>
 80051f8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80051fa:	4b39      	ldr	r3, [pc, #228]	; (80052e0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	015b      	lsls	r3, r3, #5
 8005200:	0d1b      	lsrs	r3, r3, #20
 8005202:	69fa      	ldr	r2, [r7, #28]
 8005204:	fb02 f303 	mul.w	r3, r2, r3
 8005208:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800520a:	e054      	b.n	80052b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005212:	d050      	beq.n	80052b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005214:	f7fd fcc6 	bl	8002ba4 <HAL_GetTick>
 8005218:	4602      	mov	r2, r0
 800521a:	69bb      	ldr	r3, [r7, #24]
 800521c:	1ad3      	subs	r3, r2, r3
 800521e:	69fa      	ldr	r2, [r7, #28]
 8005220:	429a      	cmp	r2, r3
 8005222:	d902      	bls.n	800522a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005224:	69fb      	ldr	r3, [r7, #28]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d13d      	bne.n	80052a6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	685a      	ldr	r2, [r3, #4]
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005238:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005242:	d111      	bne.n	8005268 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800524c:	d004      	beq.n	8005258 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	689b      	ldr	r3, [r3, #8]
 8005252:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005256:	d107      	bne.n	8005268 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	681a      	ldr	r2, [r3, #0]
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005266:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800526c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005270:	d10f      	bne.n	8005292 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005280:	601a      	str	r2, [r3, #0]
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	681a      	ldr	r2, [r3, #0]
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005290:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2201      	movs	r2, #1
 8005296:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2200      	movs	r2, #0
 800529e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80052a2:	2303      	movs	r3, #3
 80052a4:	e017      	b.n	80052d6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d101      	bne.n	80052b0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80052ac:	2300      	movs	r3, #0
 80052ae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	3b01      	subs	r3, #1
 80052b4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	689a      	ldr	r2, [r3, #8]
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	4013      	ands	r3, r2
 80052c0:	68ba      	ldr	r2, [r7, #8]
 80052c2:	429a      	cmp	r2, r3
 80052c4:	bf0c      	ite	eq
 80052c6:	2301      	moveq	r3, #1
 80052c8:	2300      	movne	r3, #0
 80052ca:	b2db      	uxtb	r3, r3
 80052cc:	461a      	mov	r2, r3
 80052ce:	79fb      	ldrb	r3, [r7, #7]
 80052d0:	429a      	cmp	r2, r3
 80052d2:	d19b      	bne.n	800520c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80052d4:	2300      	movs	r3, #0
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	3720      	adds	r7, #32
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}
 80052de:	bf00      	nop
 80052e0:	20000244 	.word	0x20000244

080052e4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b088      	sub	sp, #32
 80052e8:	af02      	add	r7, sp, #8
 80052ea:	60f8      	str	r0, [r7, #12]
 80052ec:	60b9      	str	r1, [r7, #8]
 80052ee:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80052f0:	4b1b      	ldr	r3, [pc, #108]	; (8005360 <SPI_EndRxTxTransaction+0x7c>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a1b      	ldr	r2, [pc, #108]	; (8005364 <SPI_EndRxTxTransaction+0x80>)
 80052f6:	fba2 2303 	umull	r2, r3, r2, r3
 80052fa:	0d5b      	lsrs	r3, r3, #21
 80052fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005300:	fb02 f303 	mul.w	r3, r2, r3
 8005304:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800530e:	d112      	bne.n	8005336 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	9300      	str	r3, [sp, #0]
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	2200      	movs	r2, #0
 8005318:	2180      	movs	r1, #128	; 0x80
 800531a:	68f8      	ldr	r0, [r7, #12]
 800531c:	f7ff ff5a 	bl	80051d4 <SPI_WaitFlagStateUntilTimeout>
 8005320:	4603      	mov	r3, r0
 8005322:	2b00      	cmp	r3, #0
 8005324:	d016      	beq.n	8005354 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800532a:	f043 0220 	orr.w	r2, r3, #32
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005332:	2303      	movs	r3, #3
 8005334:	e00f      	b.n	8005356 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d00a      	beq.n	8005352 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	3b01      	subs	r3, #1
 8005340:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	689b      	ldr	r3, [r3, #8]
 8005348:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800534c:	2b80      	cmp	r3, #128	; 0x80
 800534e:	d0f2      	beq.n	8005336 <SPI_EndRxTxTransaction+0x52>
 8005350:	e000      	b.n	8005354 <SPI_EndRxTxTransaction+0x70>
        break;
 8005352:	bf00      	nop
  }

  return HAL_OK;
 8005354:	2300      	movs	r3, #0
}
 8005356:	4618      	mov	r0, r3
 8005358:	3718      	adds	r7, #24
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}
 800535e:	bf00      	nop
 8005360:	20000244 	.word	0x20000244
 8005364:	165e9f81 	.word	0x165e9f81

08005368 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b086      	sub	sp, #24
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8005370:	4b2c      	ldr	r3, [pc, #176]	; (8005424 <SPI_CloseTx_ISR+0xbc>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a2c      	ldr	r2, [pc, #176]	; (8005428 <SPI_CloseTx_ISR+0xc0>)
 8005376:	fba2 2303 	umull	r2, r3, r2, r3
 800537a:	0a5b      	lsrs	r3, r3, #9
 800537c:	2264      	movs	r2, #100	; 0x64
 800537e:	fb02 f303 	mul.w	r3, r2, r3
 8005382:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005384:	f7fd fc0e 	bl	8002ba4 <HAL_GetTick>
 8005388:	6178      	str	r0, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d106      	bne.n	800539e <SPI_CloseTx_ISR+0x36>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005394:	f043 0220 	orr.w	r2, r3, #32
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800539c:	e009      	b.n	80053b2 <SPI_CloseTx_ISR+0x4a>
    }
    count--;
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	3b01      	subs	r3, #1
 80053a2:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	f003 0302 	and.w	r3, r3, #2
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d0eb      	beq.n	800538a <SPI_CloseTx_ISR+0x22>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	685a      	ldr	r2, [r3, #4]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80053c0:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80053c2:	697a      	ldr	r2, [r7, #20]
 80053c4:	2164      	movs	r1, #100	; 0x64
 80053c6:	6878      	ldr	r0, [r7, #4]
 80053c8:	f7ff ff8c 	bl	80052e4 <SPI_EndRxTxTransaction>
 80053cc:	4603      	mov	r3, r0
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d005      	beq.n	80053de <SPI_CloseTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053d6:	f043 0220 	orr.w	r2, r3, #32
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	689b      	ldr	r3, [r3, #8]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d10a      	bne.n	80053fc <SPI_CloseTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80053e6:	2300      	movs	r3, #0
 80053e8:	60fb      	str	r3, [r7, #12]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	68db      	ldr	r3, [r3, #12]
 80053f0:	60fb      	str	r3, [r7, #12]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	689b      	ldr	r3, [r3, #8]
 80053f8:	60fb      	str	r3, [r7, #12]
 80053fa:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2201      	movs	r2, #1
 8005400:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005408:	2b00      	cmp	r3, #0
 800540a:	d003      	beq.n	8005414 <SPI_CloseTx_ISR+0xac>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 800540c:	6878      	ldr	r0, [r7, #4]
 800540e:	f7ff fe7d 	bl	800510c <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8005412:	e002      	b.n	800541a <SPI_CloseTx_ISR+0xb2>
    HAL_SPI_TxCpltCallback(hspi);
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f7fd f8f1 	bl	80025fc <HAL_SPI_TxCpltCallback>
}
 800541a:	bf00      	nop
 800541c:	3718      	adds	r7, #24
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}
 8005422:	bf00      	nop
 8005424:	20000244 	.word	0x20000244
 8005428:	057619f1 	.word	0x057619f1

0800542c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b082      	sub	sp, #8
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d101      	bne.n	800543e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800543a:	2301      	movs	r3, #1
 800543c:	e041      	b.n	80054c2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005444:	b2db      	uxtb	r3, r3
 8005446:	2b00      	cmp	r3, #0
 8005448:	d106      	bne.n	8005458 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2200      	movs	r2, #0
 800544e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f7fd fa1c 	bl	8002890 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2202      	movs	r2, #2
 800545c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681a      	ldr	r2, [r3, #0]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	3304      	adds	r3, #4
 8005468:	4619      	mov	r1, r3
 800546a:	4610      	mov	r0, r2
 800546c:	f000 fade 	bl	8005a2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2201      	movs	r2, #1
 8005474:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2201      	movs	r2, #1
 800547c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2201      	movs	r2, #1
 8005484:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2201      	movs	r2, #1
 800548c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2201      	movs	r2, #1
 8005494:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2201      	movs	r2, #1
 800549c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2201      	movs	r2, #1
 80054a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2201      	movs	r2, #1
 80054ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2201      	movs	r2, #1
 80054b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2201      	movs	r2, #1
 80054bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80054c0:	2300      	movs	r3, #0
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	3708      	adds	r7, #8
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}
	...

080054cc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b085      	sub	sp, #20
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054da:	b2db      	uxtb	r3, r3
 80054dc:	2b01      	cmp	r3, #1
 80054de:	d001      	beq.n	80054e4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80054e0:	2301      	movs	r3, #1
 80054e2:	e03c      	b.n	800555e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2202      	movs	r2, #2
 80054e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a1e      	ldr	r2, [pc, #120]	; (800556c <HAL_TIM_Base_Start+0xa0>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d018      	beq.n	8005528 <HAL_TIM_Base_Start+0x5c>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054fe:	d013      	beq.n	8005528 <HAL_TIM_Base_Start+0x5c>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a1a      	ldr	r2, [pc, #104]	; (8005570 <HAL_TIM_Base_Start+0xa4>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d00e      	beq.n	8005528 <HAL_TIM_Base_Start+0x5c>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a19      	ldr	r2, [pc, #100]	; (8005574 <HAL_TIM_Base_Start+0xa8>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d009      	beq.n	8005528 <HAL_TIM_Base_Start+0x5c>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a17      	ldr	r2, [pc, #92]	; (8005578 <HAL_TIM_Base_Start+0xac>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d004      	beq.n	8005528 <HAL_TIM_Base_Start+0x5c>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a16      	ldr	r2, [pc, #88]	; (800557c <HAL_TIM_Base_Start+0xb0>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d111      	bne.n	800554c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	689b      	ldr	r3, [r3, #8]
 800552e:	f003 0307 	and.w	r3, r3, #7
 8005532:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2b06      	cmp	r3, #6
 8005538:	d010      	beq.n	800555c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	681a      	ldr	r2, [r3, #0]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f042 0201 	orr.w	r2, r2, #1
 8005548:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800554a:	e007      	b.n	800555c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	681a      	ldr	r2, [r3, #0]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f042 0201 	orr.w	r2, r2, #1
 800555a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800555c:	2300      	movs	r3, #0
}
 800555e:	4618      	mov	r0, r3
 8005560:	3714      	adds	r7, #20
 8005562:	46bd      	mov	sp, r7
 8005564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005568:	4770      	bx	lr
 800556a:	bf00      	nop
 800556c:	40010000 	.word	0x40010000
 8005570:	40000400 	.word	0x40000400
 8005574:	40000800 	.word	0x40000800
 8005578:	40000c00 	.word	0x40000c00
 800557c:	40014000 	.word	0x40014000

08005580 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005580:	b480      	push	{r7}
 8005582:	b085      	sub	sp, #20
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800558e:	b2db      	uxtb	r3, r3
 8005590:	2b01      	cmp	r3, #1
 8005592:	d001      	beq.n	8005598 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005594:	2301      	movs	r3, #1
 8005596:	e044      	b.n	8005622 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2202      	movs	r2, #2
 800559c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	68da      	ldr	r2, [r3, #12]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f042 0201 	orr.w	r2, r2, #1
 80055ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a1e      	ldr	r2, [pc, #120]	; (8005630 <HAL_TIM_Base_Start_IT+0xb0>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d018      	beq.n	80055ec <HAL_TIM_Base_Start_IT+0x6c>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055c2:	d013      	beq.n	80055ec <HAL_TIM_Base_Start_IT+0x6c>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a1a      	ldr	r2, [pc, #104]	; (8005634 <HAL_TIM_Base_Start_IT+0xb4>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d00e      	beq.n	80055ec <HAL_TIM_Base_Start_IT+0x6c>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a19      	ldr	r2, [pc, #100]	; (8005638 <HAL_TIM_Base_Start_IT+0xb8>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d009      	beq.n	80055ec <HAL_TIM_Base_Start_IT+0x6c>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a17      	ldr	r2, [pc, #92]	; (800563c <HAL_TIM_Base_Start_IT+0xbc>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d004      	beq.n	80055ec <HAL_TIM_Base_Start_IT+0x6c>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4a16      	ldr	r2, [pc, #88]	; (8005640 <HAL_TIM_Base_Start_IT+0xc0>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d111      	bne.n	8005610 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	689b      	ldr	r3, [r3, #8]
 80055f2:	f003 0307 	and.w	r3, r3, #7
 80055f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2b06      	cmp	r3, #6
 80055fc:	d010      	beq.n	8005620 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	681a      	ldr	r2, [r3, #0]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f042 0201 	orr.w	r2, r2, #1
 800560c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800560e:	e007      	b.n	8005620 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	681a      	ldr	r2, [r3, #0]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f042 0201 	orr.w	r2, r2, #1
 800561e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005620:	2300      	movs	r3, #0
}
 8005622:	4618      	mov	r0, r3
 8005624:	3714      	adds	r7, #20
 8005626:	46bd      	mov	sp, r7
 8005628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562c:	4770      	bx	lr
 800562e:	bf00      	nop
 8005630:	40010000 	.word	0x40010000
 8005634:	40000400 	.word	0x40000400
 8005638:	40000800 	.word	0x40000800
 800563c:	40000c00 	.word	0x40000c00
 8005640:	40014000 	.word	0x40014000

08005644 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b082      	sub	sp, #8
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	691b      	ldr	r3, [r3, #16]
 8005652:	f003 0302 	and.w	r3, r3, #2
 8005656:	2b02      	cmp	r3, #2
 8005658:	d122      	bne.n	80056a0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	68db      	ldr	r3, [r3, #12]
 8005660:	f003 0302 	and.w	r3, r3, #2
 8005664:	2b02      	cmp	r3, #2
 8005666:	d11b      	bne.n	80056a0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f06f 0202 	mvn.w	r2, #2
 8005670:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2201      	movs	r2, #1
 8005676:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	699b      	ldr	r3, [r3, #24]
 800567e:	f003 0303 	and.w	r3, r3, #3
 8005682:	2b00      	cmp	r3, #0
 8005684:	d003      	beq.n	800568e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f000 f9b2 	bl	80059f0 <HAL_TIM_IC_CaptureCallback>
 800568c:	e005      	b.n	800569a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f000 f9a4 	bl	80059dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005694:	6878      	ldr	r0, [r7, #4]
 8005696:	f000 f9b5 	bl	8005a04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2200      	movs	r2, #0
 800569e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	691b      	ldr	r3, [r3, #16]
 80056a6:	f003 0304 	and.w	r3, r3, #4
 80056aa:	2b04      	cmp	r3, #4
 80056ac:	d122      	bne.n	80056f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	68db      	ldr	r3, [r3, #12]
 80056b4:	f003 0304 	and.w	r3, r3, #4
 80056b8:	2b04      	cmp	r3, #4
 80056ba:	d11b      	bne.n	80056f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f06f 0204 	mvn.w	r2, #4
 80056c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2202      	movs	r2, #2
 80056ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	699b      	ldr	r3, [r3, #24]
 80056d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d003      	beq.n	80056e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f000 f988 	bl	80059f0 <HAL_TIM_IC_CaptureCallback>
 80056e0:	e005      	b.n	80056ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f000 f97a 	bl	80059dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f000 f98b 	bl	8005a04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2200      	movs	r2, #0
 80056f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	691b      	ldr	r3, [r3, #16]
 80056fa:	f003 0308 	and.w	r3, r3, #8
 80056fe:	2b08      	cmp	r3, #8
 8005700:	d122      	bne.n	8005748 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	68db      	ldr	r3, [r3, #12]
 8005708:	f003 0308 	and.w	r3, r3, #8
 800570c:	2b08      	cmp	r3, #8
 800570e:	d11b      	bne.n	8005748 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f06f 0208 	mvn.w	r2, #8
 8005718:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2204      	movs	r2, #4
 800571e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	69db      	ldr	r3, [r3, #28]
 8005726:	f003 0303 	and.w	r3, r3, #3
 800572a:	2b00      	cmp	r3, #0
 800572c:	d003      	beq.n	8005736 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f000 f95e 	bl	80059f0 <HAL_TIM_IC_CaptureCallback>
 8005734:	e005      	b.n	8005742 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f000 f950 	bl	80059dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	f000 f961 	bl	8005a04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2200      	movs	r2, #0
 8005746:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	691b      	ldr	r3, [r3, #16]
 800574e:	f003 0310 	and.w	r3, r3, #16
 8005752:	2b10      	cmp	r3, #16
 8005754:	d122      	bne.n	800579c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	68db      	ldr	r3, [r3, #12]
 800575c:	f003 0310 	and.w	r3, r3, #16
 8005760:	2b10      	cmp	r3, #16
 8005762:	d11b      	bne.n	800579c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f06f 0210 	mvn.w	r2, #16
 800576c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2208      	movs	r2, #8
 8005772:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	69db      	ldr	r3, [r3, #28]
 800577a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800577e:	2b00      	cmp	r3, #0
 8005780:	d003      	beq.n	800578a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f000 f934 	bl	80059f0 <HAL_TIM_IC_CaptureCallback>
 8005788:	e005      	b.n	8005796 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f000 f926 	bl	80059dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005790:	6878      	ldr	r0, [r7, #4]
 8005792:	f000 f937 	bl	8005a04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2200      	movs	r2, #0
 800579a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	691b      	ldr	r3, [r3, #16]
 80057a2:	f003 0301 	and.w	r3, r3, #1
 80057a6:	2b01      	cmp	r3, #1
 80057a8:	d10e      	bne.n	80057c8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	68db      	ldr	r3, [r3, #12]
 80057b0:	f003 0301 	and.w	r3, r3, #1
 80057b4:	2b01      	cmp	r3, #1
 80057b6:	d107      	bne.n	80057c8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f06f 0201 	mvn.w	r2, #1
 80057c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80057c2:	6878      	ldr	r0, [r7, #4]
 80057c4:	f7fc ff30 	bl	8002628 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	691b      	ldr	r3, [r3, #16]
 80057ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057d2:	2b80      	cmp	r3, #128	; 0x80
 80057d4:	d10e      	bne.n	80057f4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	68db      	ldr	r3, [r3, #12]
 80057dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057e0:	2b80      	cmp	r3, #128	; 0x80
 80057e2:	d107      	bne.n	80057f4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80057ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f000 faae 	bl	8005d50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	691b      	ldr	r3, [r3, #16]
 80057fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057fe:	2b40      	cmp	r3, #64	; 0x40
 8005800:	d10e      	bne.n	8005820 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	68db      	ldr	r3, [r3, #12]
 8005808:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800580c:	2b40      	cmp	r3, #64	; 0x40
 800580e:	d107      	bne.n	8005820 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005818:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f000 f8fc 	bl	8005a18 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	691b      	ldr	r3, [r3, #16]
 8005826:	f003 0320 	and.w	r3, r3, #32
 800582a:	2b20      	cmp	r3, #32
 800582c:	d10e      	bne.n	800584c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	68db      	ldr	r3, [r3, #12]
 8005834:	f003 0320 	and.w	r3, r3, #32
 8005838:	2b20      	cmp	r3, #32
 800583a:	d107      	bne.n	800584c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f06f 0220 	mvn.w	r2, #32
 8005844:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f000 fa78 	bl	8005d3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800584c:	bf00      	nop
 800584e:	3708      	adds	r7, #8
 8005850:	46bd      	mov	sp, r7
 8005852:	bd80      	pop	{r7, pc}

08005854 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b084      	sub	sp, #16
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
 800585c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005864:	2b01      	cmp	r3, #1
 8005866:	d101      	bne.n	800586c <HAL_TIM_ConfigClockSource+0x18>
 8005868:	2302      	movs	r3, #2
 800586a:	e0b3      	b.n	80059d4 <HAL_TIM_ConfigClockSource+0x180>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2201      	movs	r2, #1
 8005870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2202      	movs	r2, #2
 8005878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	689b      	ldr	r3, [r3, #8]
 8005882:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800588a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005892:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	68fa      	ldr	r2, [r7, #12]
 800589a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058a4:	d03e      	beq.n	8005924 <HAL_TIM_ConfigClockSource+0xd0>
 80058a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058aa:	f200 8087 	bhi.w	80059bc <HAL_TIM_ConfigClockSource+0x168>
 80058ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058b2:	f000 8085 	beq.w	80059c0 <HAL_TIM_ConfigClockSource+0x16c>
 80058b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058ba:	d87f      	bhi.n	80059bc <HAL_TIM_ConfigClockSource+0x168>
 80058bc:	2b70      	cmp	r3, #112	; 0x70
 80058be:	d01a      	beq.n	80058f6 <HAL_TIM_ConfigClockSource+0xa2>
 80058c0:	2b70      	cmp	r3, #112	; 0x70
 80058c2:	d87b      	bhi.n	80059bc <HAL_TIM_ConfigClockSource+0x168>
 80058c4:	2b60      	cmp	r3, #96	; 0x60
 80058c6:	d050      	beq.n	800596a <HAL_TIM_ConfigClockSource+0x116>
 80058c8:	2b60      	cmp	r3, #96	; 0x60
 80058ca:	d877      	bhi.n	80059bc <HAL_TIM_ConfigClockSource+0x168>
 80058cc:	2b50      	cmp	r3, #80	; 0x50
 80058ce:	d03c      	beq.n	800594a <HAL_TIM_ConfigClockSource+0xf6>
 80058d0:	2b50      	cmp	r3, #80	; 0x50
 80058d2:	d873      	bhi.n	80059bc <HAL_TIM_ConfigClockSource+0x168>
 80058d4:	2b40      	cmp	r3, #64	; 0x40
 80058d6:	d058      	beq.n	800598a <HAL_TIM_ConfigClockSource+0x136>
 80058d8:	2b40      	cmp	r3, #64	; 0x40
 80058da:	d86f      	bhi.n	80059bc <HAL_TIM_ConfigClockSource+0x168>
 80058dc:	2b30      	cmp	r3, #48	; 0x30
 80058de:	d064      	beq.n	80059aa <HAL_TIM_ConfigClockSource+0x156>
 80058e0:	2b30      	cmp	r3, #48	; 0x30
 80058e2:	d86b      	bhi.n	80059bc <HAL_TIM_ConfigClockSource+0x168>
 80058e4:	2b20      	cmp	r3, #32
 80058e6:	d060      	beq.n	80059aa <HAL_TIM_ConfigClockSource+0x156>
 80058e8:	2b20      	cmp	r3, #32
 80058ea:	d867      	bhi.n	80059bc <HAL_TIM_ConfigClockSource+0x168>
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d05c      	beq.n	80059aa <HAL_TIM_ConfigClockSource+0x156>
 80058f0:	2b10      	cmp	r3, #16
 80058f2:	d05a      	beq.n	80059aa <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80058f4:	e062      	b.n	80059bc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6818      	ldr	r0, [r3, #0]
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	6899      	ldr	r1, [r3, #8]
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	685a      	ldr	r2, [r3, #4]
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	68db      	ldr	r3, [r3, #12]
 8005906:	f000 f98b 	bl	8005c20 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	689b      	ldr	r3, [r3, #8]
 8005910:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005918:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	68fa      	ldr	r2, [r7, #12]
 8005920:	609a      	str	r2, [r3, #8]
      break;
 8005922:	e04e      	b.n	80059c2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6818      	ldr	r0, [r3, #0]
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	6899      	ldr	r1, [r3, #8]
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	685a      	ldr	r2, [r3, #4]
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	68db      	ldr	r3, [r3, #12]
 8005934:	f000 f974 	bl	8005c20 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	689a      	ldr	r2, [r3, #8]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005946:	609a      	str	r2, [r3, #8]
      break;
 8005948:	e03b      	b.n	80059c2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6818      	ldr	r0, [r3, #0]
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	6859      	ldr	r1, [r3, #4]
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	68db      	ldr	r3, [r3, #12]
 8005956:	461a      	mov	r2, r3
 8005958:	f000 f8e8 	bl	8005b2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	2150      	movs	r1, #80	; 0x50
 8005962:	4618      	mov	r0, r3
 8005964:	f000 f941 	bl	8005bea <TIM_ITRx_SetConfig>
      break;
 8005968:	e02b      	b.n	80059c2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6818      	ldr	r0, [r3, #0]
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	6859      	ldr	r1, [r3, #4]
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	68db      	ldr	r3, [r3, #12]
 8005976:	461a      	mov	r2, r3
 8005978:	f000 f907 	bl	8005b8a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	2160      	movs	r1, #96	; 0x60
 8005982:	4618      	mov	r0, r3
 8005984:	f000 f931 	bl	8005bea <TIM_ITRx_SetConfig>
      break;
 8005988:	e01b      	b.n	80059c2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6818      	ldr	r0, [r3, #0]
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	6859      	ldr	r1, [r3, #4]
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	68db      	ldr	r3, [r3, #12]
 8005996:	461a      	mov	r2, r3
 8005998:	f000 f8c8 	bl	8005b2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	2140      	movs	r1, #64	; 0x40
 80059a2:	4618      	mov	r0, r3
 80059a4:	f000 f921 	bl	8005bea <TIM_ITRx_SetConfig>
      break;
 80059a8:	e00b      	b.n	80059c2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681a      	ldr	r2, [r3, #0]
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4619      	mov	r1, r3
 80059b4:	4610      	mov	r0, r2
 80059b6:	f000 f918 	bl	8005bea <TIM_ITRx_SetConfig>
        break;
 80059ba:	e002      	b.n	80059c2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80059bc:	bf00      	nop
 80059be:	e000      	b.n	80059c2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80059c0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2201      	movs	r2, #1
 80059c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2200      	movs	r2, #0
 80059ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059d2:	2300      	movs	r3, #0
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	3710      	adds	r7, #16
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}

080059dc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80059dc:	b480      	push	{r7}
 80059de:	b083      	sub	sp, #12
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80059e4:	bf00      	nop
 80059e6:	370c      	adds	r7, #12
 80059e8:	46bd      	mov	sp, r7
 80059ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ee:	4770      	bx	lr

080059f0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b083      	sub	sp, #12
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80059f8:	bf00      	nop
 80059fa:	370c      	adds	r7, #12
 80059fc:	46bd      	mov	sp, r7
 80059fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a02:	4770      	bx	lr

08005a04 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005a04:	b480      	push	{r7}
 8005a06:	b083      	sub	sp, #12
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005a0c:	bf00      	nop
 8005a0e:	370c      	adds	r7, #12
 8005a10:	46bd      	mov	sp, r7
 8005a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a16:	4770      	bx	lr

08005a18 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b083      	sub	sp, #12
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005a20:	bf00      	nop
 8005a22:	370c      	adds	r7, #12
 8005a24:	46bd      	mov	sp, r7
 8005a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2a:	4770      	bx	lr

08005a2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b085      	sub	sp, #20
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
 8005a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	4a34      	ldr	r2, [pc, #208]	; (8005b10 <TIM_Base_SetConfig+0xe4>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d00f      	beq.n	8005a64 <TIM_Base_SetConfig+0x38>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a4a:	d00b      	beq.n	8005a64 <TIM_Base_SetConfig+0x38>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	4a31      	ldr	r2, [pc, #196]	; (8005b14 <TIM_Base_SetConfig+0xe8>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d007      	beq.n	8005a64 <TIM_Base_SetConfig+0x38>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	4a30      	ldr	r2, [pc, #192]	; (8005b18 <TIM_Base_SetConfig+0xec>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d003      	beq.n	8005a64 <TIM_Base_SetConfig+0x38>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	4a2f      	ldr	r2, [pc, #188]	; (8005b1c <TIM_Base_SetConfig+0xf0>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d108      	bne.n	8005a76 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	68fa      	ldr	r2, [r7, #12]
 8005a72:	4313      	orrs	r3, r2
 8005a74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	4a25      	ldr	r2, [pc, #148]	; (8005b10 <TIM_Base_SetConfig+0xe4>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d01b      	beq.n	8005ab6 <TIM_Base_SetConfig+0x8a>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a84:	d017      	beq.n	8005ab6 <TIM_Base_SetConfig+0x8a>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	4a22      	ldr	r2, [pc, #136]	; (8005b14 <TIM_Base_SetConfig+0xe8>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d013      	beq.n	8005ab6 <TIM_Base_SetConfig+0x8a>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	4a21      	ldr	r2, [pc, #132]	; (8005b18 <TIM_Base_SetConfig+0xec>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d00f      	beq.n	8005ab6 <TIM_Base_SetConfig+0x8a>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	4a20      	ldr	r2, [pc, #128]	; (8005b1c <TIM_Base_SetConfig+0xf0>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d00b      	beq.n	8005ab6 <TIM_Base_SetConfig+0x8a>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	4a1f      	ldr	r2, [pc, #124]	; (8005b20 <TIM_Base_SetConfig+0xf4>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d007      	beq.n	8005ab6 <TIM_Base_SetConfig+0x8a>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	4a1e      	ldr	r2, [pc, #120]	; (8005b24 <TIM_Base_SetConfig+0xf8>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d003      	beq.n	8005ab6 <TIM_Base_SetConfig+0x8a>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	4a1d      	ldr	r2, [pc, #116]	; (8005b28 <TIM_Base_SetConfig+0xfc>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d108      	bne.n	8005ac8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005abc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	68db      	ldr	r3, [r3, #12]
 8005ac2:	68fa      	ldr	r2, [r7, #12]
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	695b      	ldr	r3, [r3, #20]
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	68fa      	ldr	r2, [r7, #12]
 8005ada:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	689a      	ldr	r2, [r3, #8]
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	681a      	ldr	r2, [r3, #0]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	4a08      	ldr	r2, [pc, #32]	; (8005b10 <TIM_Base_SetConfig+0xe4>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d103      	bne.n	8005afc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	691a      	ldr	r2, [r3, #16]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2201      	movs	r2, #1
 8005b00:	615a      	str	r2, [r3, #20]
}
 8005b02:	bf00      	nop
 8005b04:	3714      	adds	r7, #20
 8005b06:	46bd      	mov	sp, r7
 8005b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0c:	4770      	bx	lr
 8005b0e:	bf00      	nop
 8005b10:	40010000 	.word	0x40010000
 8005b14:	40000400 	.word	0x40000400
 8005b18:	40000800 	.word	0x40000800
 8005b1c:	40000c00 	.word	0x40000c00
 8005b20:	40014000 	.word	0x40014000
 8005b24:	40014400 	.word	0x40014400
 8005b28:	40014800 	.word	0x40014800

08005b2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b087      	sub	sp, #28
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	60f8      	str	r0, [r7, #12]
 8005b34:	60b9      	str	r1, [r7, #8]
 8005b36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	6a1b      	ldr	r3, [r3, #32]
 8005b3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	6a1b      	ldr	r3, [r3, #32]
 8005b42:	f023 0201 	bic.w	r2, r3, #1
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	699b      	ldr	r3, [r3, #24]
 8005b4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	011b      	lsls	r3, r3, #4
 8005b5c:	693a      	ldr	r2, [r7, #16]
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	f023 030a 	bic.w	r3, r3, #10
 8005b68:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005b6a:	697a      	ldr	r2, [r7, #20]
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	693a      	ldr	r2, [r7, #16]
 8005b76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	697a      	ldr	r2, [r7, #20]
 8005b7c:	621a      	str	r2, [r3, #32]
}
 8005b7e:	bf00      	nop
 8005b80:	371c      	adds	r7, #28
 8005b82:	46bd      	mov	sp, r7
 8005b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b88:	4770      	bx	lr

08005b8a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b8a:	b480      	push	{r7}
 8005b8c:	b087      	sub	sp, #28
 8005b8e:	af00      	add	r7, sp, #0
 8005b90:	60f8      	str	r0, [r7, #12]
 8005b92:	60b9      	str	r1, [r7, #8]
 8005b94:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	6a1b      	ldr	r3, [r3, #32]
 8005b9a:	f023 0210 	bic.w	r2, r3, #16
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	699b      	ldr	r3, [r3, #24]
 8005ba6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	6a1b      	ldr	r3, [r3, #32]
 8005bac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005bb4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	031b      	lsls	r3, r3, #12
 8005bba:	697a      	ldr	r2, [r7, #20]
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005bc6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	011b      	lsls	r3, r3, #4
 8005bcc:	693a      	ldr	r2, [r7, #16]
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	697a      	ldr	r2, [r7, #20]
 8005bd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	693a      	ldr	r2, [r7, #16]
 8005bdc:	621a      	str	r2, [r3, #32]
}
 8005bde:	bf00      	nop
 8005be0:	371c      	adds	r7, #28
 8005be2:	46bd      	mov	sp, r7
 8005be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be8:	4770      	bx	lr

08005bea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005bea:	b480      	push	{r7}
 8005bec:	b085      	sub	sp, #20
 8005bee:	af00      	add	r7, sp, #0
 8005bf0:	6078      	str	r0, [r7, #4]
 8005bf2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c00:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005c02:	683a      	ldr	r2, [r7, #0]
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	4313      	orrs	r3, r2
 8005c08:	f043 0307 	orr.w	r3, r3, #7
 8005c0c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	68fa      	ldr	r2, [r7, #12]
 8005c12:	609a      	str	r2, [r3, #8]
}
 8005c14:	bf00      	nop
 8005c16:	3714      	adds	r7, #20
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1e:	4770      	bx	lr

08005c20 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b087      	sub	sp, #28
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	60f8      	str	r0, [r7, #12]
 8005c28:	60b9      	str	r1, [r7, #8]
 8005c2a:	607a      	str	r2, [r7, #4]
 8005c2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	689b      	ldr	r3, [r3, #8]
 8005c32:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c3a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	021a      	lsls	r2, r3, #8
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	431a      	orrs	r2, r3
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	4313      	orrs	r3, r2
 8005c48:	697a      	ldr	r2, [r7, #20]
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	697a      	ldr	r2, [r7, #20]
 8005c52:	609a      	str	r2, [r3, #8]
}
 8005c54:	bf00      	nop
 8005c56:	371c      	adds	r7, #28
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5e:	4770      	bx	lr

08005c60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b085      	sub	sp, #20
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
 8005c68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c70:	2b01      	cmp	r3, #1
 8005c72:	d101      	bne.n	8005c78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c74:	2302      	movs	r3, #2
 8005c76:	e050      	b.n	8005d1a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2202      	movs	r2, #2
 8005c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	689b      	ldr	r3, [r3, #8]
 8005c96:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c9e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	68fa      	ldr	r2, [r7, #12]
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	68fa      	ldr	r2, [r7, #12]
 8005cb0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a1c      	ldr	r2, [pc, #112]	; (8005d28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d018      	beq.n	8005cee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cc4:	d013      	beq.n	8005cee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a18      	ldr	r2, [pc, #96]	; (8005d2c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d00e      	beq.n	8005cee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a16      	ldr	r2, [pc, #88]	; (8005d30 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d009      	beq.n	8005cee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a15      	ldr	r2, [pc, #84]	; (8005d34 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d004      	beq.n	8005cee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a13      	ldr	r2, [pc, #76]	; (8005d38 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d10c      	bne.n	8005d08 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005cf4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	68ba      	ldr	r2, [r7, #8]
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	68ba      	ldr	r2, [r7, #8]
 8005d06:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2200      	movs	r2, #0
 8005d14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d18:	2300      	movs	r3, #0
}
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	3714      	adds	r7, #20
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d24:	4770      	bx	lr
 8005d26:	bf00      	nop
 8005d28:	40010000 	.word	0x40010000
 8005d2c:	40000400 	.word	0x40000400
 8005d30:	40000800 	.word	0x40000800
 8005d34:	40000c00 	.word	0x40000c00
 8005d38:	40014000 	.word	0x40014000

08005d3c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b083      	sub	sp, #12
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005d44:	bf00      	nop
 8005d46:	370c      	adds	r7, #12
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4e:	4770      	bx	lr

08005d50 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005d50:	b480      	push	{r7}
 8005d52:	b083      	sub	sp, #12
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005d58:	bf00      	nop
 8005d5a:	370c      	adds	r7, #12
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d62:	4770      	bx	lr

08005d64 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b082      	sub	sp, #8
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d101      	bne.n	8005d76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d72:	2301      	movs	r3, #1
 8005d74:	e03f      	b.n	8005df6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d7c:	b2db      	uxtb	r3, r3
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d106      	bne.n	8005d90 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2200      	movs	r2, #0
 8005d86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	f7fc fdbc 	bl	8002908 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2224      	movs	r2, #36	; 0x24
 8005d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	68da      	ldr	r2, [r3, #12]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005da6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005da8:	6878      	ldr	r0, [r7, #4]
 8005daa:	f000 fc85 	bl	80066b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	691a      	ldr	r2, [r3, #16]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005dbc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	695a      	ldr	r2, [r3, #20]
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005dcc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	68da      	ldr	r2, [r3, #12]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005ddc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2200      	movs	r2, #0
 8005de2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2220      	movs	r2, #32
 8005de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2220      	movs	r2, #32
 8005df0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005df4:	2300      	movs	r3, #0
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3708      	adds	r7, #8
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}

08005dfe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005dfe:	b580      	push	{r7, lr}
 8005e00:	b08a      	sub	sp, #40	; 0x28
 8005e02:	af02      	add	r7, sp, #8
 8005e04:	60f8      	str	r0, [r7, #12]
 8005e06:	60b9      	str	r1, [r7, #8]
 8005e08:	603b      	str	r3, [r7, #0]
 8005e0a:	4613      	mov	r3, r2
 8005e0c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005e0e:	2300      	movs	r3, #0
 8005e10:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e18:	b2db      	uxtb	r3, r3
 8005e1a:	2b20      	cmp	r3, #32
 8005e1c:	d17c      	bne.n	8005f18 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d002      	beq.n	8005e2a <HAL_UART_Transmit+0x2c>
 8005e24:	88fb      	ldrh	r3, [r7, #6]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d101      	bne.n	8005e2e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	e075      	b.n	8005f1a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e34:	2b01      	cmp	r3, #1
 8005e36:	d101      	bne.n	8005e3c <HAL_UART_Transmit+0x3e>
 8005e38:	2302      	movs	r3, #2
 8005e3a:	e06e      	b.n	8005f1a <HAL_UART_Transmit+0x11c>
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2201      	movs	r2, #1
 8005e40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	2200      	movs	r2, #0
 8005e48:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	2221      	movs	r2, #33	; 0x21
 8005e4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005e52:	f7fc fea7 	bl	8002ba4 <HAL_GetTick>
 8005e56:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	88fa      	ldrh	r2, [r7, #6]
 8005e5c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	88fa      	ldrh	r2, [r7, #6]
 8005e62:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	689b      	ldr	r3, [r3, #8]
 8005e68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e6c:	d108      	bne.n	8005e80 <HAL_UART_Transmit+0x82>
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	691b      	ldr	r3, [r3, #16]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d104      	bne.n	8005e80 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005e76:	2300      	movs	r3, #0
 8005e78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	61bb      	str	r3, [r7, #24]
 8005e7e:	e003      	b.n	8005e88 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005e84:	2300      	movs	r3, #0
 8005e86:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005e90:	e02a      	b.n	8005ee8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	9300      	str	r3, [sp, #0]
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	2180      	movs	r1, #128	; 0x80
 8005e9c:	68f8      	ldr	r0, [r7, #12]
 8005e9e:	f000 fa47 	bl	8006330 <UART_WaitOnFlagUntilTimeout>
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d001      	beq.n	8005eac <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005ea8:	2303      	movs	r3, #3
 8005eaa:	e036      	b.n	8005f1a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005eac:	69fb      	ldr	r3, [r7, #28]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d10b      	bne.n	8005eca <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005eb2:	69bb      	ldr	r3, [r7, #24]
 8005eb4:	881b      	ldrh	r3, [r3, #0]
 8005eb6:	461a      	mov	r2, r3
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ec0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005ec2:	69bb      	ldr	r3, [r7, #24]
 8005ec4:	3302      	adds	r3, #2
 8005ec6:	61bb      	str	r3, [r7, #24]
 8005ec8:	e007      	b.n	8005eda <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005eca:	69fb      	ldr	r3, [r7, #28]
 8005ecc:	781a      	ldrb	r2, [r3, #0]
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005ed4:	69fb      	ldr	r3, [r7, #28]
 8005ed6:	3301      	adds	r3, #1
 8005ed8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005ede:	b29b      	uxth	r3, r3
 8005ee0:	3b01      	subs	r3, #1
 8005ee2:	b29a      	uxth	r2, r3
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005eec:	b29b      	uxth	r3, r3
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d1cf      	bne.n	8005e92 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	9300      	str	r3, [sp, #0]
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	2140      	movs	r1, #64	; 0x40
 8005efc:	68f8      	ldr	r0, [r7, #12]
 8005efe:	f000 fa17 	bl	8006330 <UART_WaitOnFlagUntilTimeout>
 8005f02:	4603      	mov	r3, r0
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d001      	beq.n	8005f0c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005f08:	2303      	movs	r3, #3
 8005f0a:	e006      	b.n	8005f1a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	2220      	movs	r2, #32
 8005f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005f14:	2300      	movs	r3, #0
 8005f16:	e000      	b.n	8005f1a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005f18:	2302      	movs	r3, #2
  }
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	3720      	adds	r7, #32
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bd80      	pop	{r7, pc}

08005f22 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005f22:	b580      	push	{r7, lr}
 8005f24:	b084      	sub	sp, #16
 8005f26:	af00      	add	r7, sp, #0
 8005f28:	60f8      	str	r0, [r7, #12]
 8005f2a:	60b9      	str	r1, [r7, #8]
 8005f2c:	4613      	mov	r3, r2
 8005f2e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f36:	b2db      	uxtb	r3, r3
 8005f38:	2b20      	cmp	r3, #32
 8005f3a:	d11d      	bne.n	8005f78 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d002      	beq.n	8005f48 <HAL_UART_Receive_IT+0x26>
 8005f42:	88fb      	ldrh	r3, [r7, #6]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d101      	bne.n	8005f4c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005f48:	2301      	movs	r3, #1
 8005f4a:	e016      	b.n	8005f7a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f52:	2b01      	cmp	r3, #1
 8005f54:	d101      	bne.n	8005f5a <HAL_UART_Receive_IT+0x38>
 8005f56:	2302      	movs	r3, #2
 8005f58:	e00f      	b.n	8005f7a <HAL_UART_Receive_IT+0x58>
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	2201      	movs	r2, #1
 8005f5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	2200      	movs	r2, #0
 8005f66:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8005f68:	88fb      	ldrh	r3, [r7, #6]
 8005f6a:	461a      	mov	r2, r3
 8005f6c:	68b9      	ldr	r1, [r7, #8]
 8005f6e:	68f8      	ldr	r0, [r7, #12]
 8005f70:	f000 fa28 	bl	80063c4 <UART_Start_Receive_IT>
 8005f74:	4603      	mov	r3, r0
 8005f76:	e000      	b.n	8005f7a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005f78:	2302      	movs	r3, #2
  }
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	3710      	adds	r7, #16
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}
	...

08005f84 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b08a      	sub	sp, #40	; 0x28
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	68db      	ldr	r3, [r3, #12]
 8005f9a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	695b      	ldr	r3, [r3, #20]
 8005fa2:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8005fa8:	2300      	movs	r3, #0
 8005faa:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fae:	f003 030f 	and.w	r3, r3, #15
 8005fb2:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8005fb4:	69bb      	ldr	r3, [r7, #24]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d10d      	bne.n	8005fd6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fbc:	f003 0320 	and.w	r3, r3, #32
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d008      	beq.n	8005fd6 <HAL_UART_IRQHandler+0x52>
 8005fc4:	6a3b      	ldr	r3, [r7, #32]
 8005fc6:	f003 0320 	and.w	r3, r3, #32
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d003      	beq.n	8005fd6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f000 fadb 	bl	800658a <UART_Receive_IT>
      return;
 8005fd4:	e17c      	b.n	80062d0 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005fd6:	69bb      	ldr	r3, [r7, #24]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	f000 80b1 	beq.w	8006140 <HAL_UART_IRQHandler+0x1bc>
 8005fde:	69fb      	ldr	r3, [r7, #28]
 8005fe0:	f003 0301 	and.w	r3, r3, #1
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d105      	bne.n	8005ff4 <HAL_UART_IRQHandler+0x70>
 8005fe8:	6a3b      	ldr	r3, [r7, #32]
 8005fea:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	f000 80a6 	beq.w	8006140 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff6:	f003 0301 	and.w	r3, r3, #1
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d00a      	beq.n	8006014 <HAL_UART_IRQHandler+0x90>
 8005ffe:	6a3b      	ldr	r3, [r7, #32]
 8006000:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006004:	2b00      	cmp	r3, #0
 8006006:	d005      	beq.n	8006014 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800600c:	f043 0201 	orr.w	r2, r3, #1
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006016:	f003 0304 	and.w	r3, r3, #4
 800601a:	2b00      	cmp	r3, #0
 800601c:	d00a      	beq.n	8006034 <HAL_UART_IRQHandler+0xb0>
 800601e:	69fb      	ldr	r3, [r7, #28]
 8006020:	f003 0301 	and.w	r3, r3, #1
 8006024:	2b00      	cmp	r3, #0
 8006026:	d005      	beq.n	8006034 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800602c:	f043 0202 	orr.w	r2, r3, #2
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006036:	f003 0302 	and.w	r3, r3, #2
 800603a:	2b00      	cmp	r3, #0
 800603c:	d00a      	beq.n	8006054 <HAL_UART_IRQHandler+0xd0>
 800603e:	69fb      	ldr	r3, [r7, #28]
 8006040:	f003 0301 	and.w	r3, r3, #1
 8006044:	2b00      	cmp	r3, #0
 8006046:	d005      	beq.n	8006054 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800604c:	f043 0204 	orr.w	r2, r3, #4
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006056:	f003 0308 	and.w	r3, r3, #8
 800605a:	2b00      	cmp	r3, #0
 800605c:	d00f      	beq.n	800607e <HAL_UART_IRQHandler+0xfa>
 800605e:	6a3b      	ldr	r3, [r7, #32]
 8006060:	f003 0320 	and.w	r3, r3, #32
 8006064:	2b00      	cmp	r3, #0
 8006066:	d104      	bne.n	8006072 <HAL_UART_IRQHandler+0xee>
 8006068:	69fb      	ldr	r3, [r7, #28]
 800606a:	f003 0301 	and.w	r3, r3, #1
 800606e:	2b00      	cmp	r3, #0
 8006070:	d005      	beq.n	800607e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006076:	f043 0208 	orr.w	r2, r3, #8
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006082:	2b00      	cmp	r3, #0
 8006084:	f000 811f 	beq.w	80062c6 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800608a:	f003 0320 	and.w	r3, r3, #32
 800608e:	2b00      	cmp	r3, #0
 8006090:	d007      	beq.n	80060a2 <HAL_UART_IRQHandler+0x11e>
 8006092:	6a3b      	ldr	r3, [r7, #32]
 8006094:	f003 0320 	and.w	r3, r3, #32
 8006098:	2b00      	cmp	r3, #0
 800609a:	d002      	beq.n	80060a2 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	f000 fa74 	bl	800658a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	695b      	ldr	r3, [r3, #20]
 80060a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060ac:	2b40      	cmp	r3, #64	; 0x40
 80060ae:	bf0c      	ite	eq
 80060b0:	2301      	moveq	r3, #1
 80060b2:	2300      	movne	r3, #0
 80060b4:	b2db      	uxtb	r3, r3
 80060b6:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060bc:	f003 0308 	and.w	r3, r3, #8
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d102      	bne.n	80060ca <HAL_UART_IRQHandler+0x146>
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d031      	beq.n	800612e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f000 f9b4 	bl	8006438 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	695b      	ldr	r3, [r3, #20]
 80060d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060da:	2b40      	cmp	r3, #64	; 0x40
 80060dc:	d123      	bne.n	8006126 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	695a      	ldr	r2, [r3, #20]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060ec:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d013      	beq.n	800611e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060fa:	4a77      	ldr	r2, [pc, #476]	; (80062d8 <HAL_UART_IRQHandler+0x354>)
 80060fc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006102:	4618      	mov	r0, r3
 8006104:	f7fd fd38 	bl	8003b78 <HAL_DMA_Abort_IT>
 8006108:	4603      	mov	r3, r0
 800610a:	2b00      	cmp	r3, #0
 800610c:	d016      	beq.n	800613c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006112:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006114:	687a      	ldr	r2, [r7, #4]
 8006116:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006118:	4610      	mov	r0, r2
 800611a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800611c:	e00e      	b.n	800613c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f000 f8f0 	bl	8006304 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006124:	e00a      	b.n	800613c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	f000 f8ec 	bl	8006304 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800612c:	e006      	b.n	800613c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800612e:	6878      	ldr	r0, [r7, #4]
 8006130:	f000 f8e8 	bl	8006304 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2200      	movs	r2, #0
 8006138:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800613a:	e0c4      	b.n	80062c6 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800613c:	bf00      	nop
    return;
 800613e:	e0c2      	b.n	80062c6 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006144:	2b01      	cmp	r3, #1
 8006146:	f040 80a2 	bne.w	800628e <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800614a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800614c:	f003 0310 	and.w	r3, r3, #16
 8006150:	2b00      	cmp	r3, #0
 8006152:	f000 809c 	beq.w	800628e <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8006156:	6a3b      	ldr	r3, [r7, #32]
 8006158:	f003 0310 	and.w	r3, r3, #16
 800615c:	2b00      	cmp	r3, #0
 800615e:	f000 8096 	beq.w	800628e <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006162:	2300      	movs	r3, #0
 8006164:	60fb      	str	r3, [r7, #12]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	60fb      	str	r3, [r7, #12]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	685b      	ldr	r3, [r3, #4]
 8006174:	60fb      	str	r3, [r7, #12]
 8006176:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	695b      	ldr	r3, [r3, #20]
 800617e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006182:	2b40      	cmp	r3, #64	; 0x40
 8006184:	d14f      	bne.n	8006226 <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8006190:	8a3b      	ldrh	r3, [r7, #16]
 8006192:	2b00      	cmp	r3, #0
 8006194:	f000 8099 	beq.w	80062ca <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800619c:	8a3a      	ldrh	r2, [r7, #16]
 800619e:	429a      	cmp	r2, r3
 80061a0:	f080 8093 	bcs.w	80062ca <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	8a3a      	ldrh	r2, [r7, #16]
 80061a8:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ae:	69db      	ldr	r3, [r3, #28]
 80061b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061b4:	d02b      	beq.n	800620e <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	68da      	ldr	r2, [r3, #12]
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80061c4:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	695a      	ldr	r2, [r3, #20]
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f022 0201 	bic.w	r2, r2, #1
 80061d4:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	695a      	ldr	r2, [r3, #20]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80061e4:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2220      	movs	r2, #32
 80061ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2200      	movs	r2, #0
 80061f2:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	68da      	ldr	r2, [r3, #12]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f022 0210 	bic.w	r2, r2, #16
 8006202:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006208:	4618      	mov	r0, r3
 800620a:	f7fd fc45 	bl	8003a98 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006216:	b29b      	uxth	r3, r3
 8006218:	1ad3      	subs	r3, r2, r3
 800621a:	b29b      	uxth	r3, r3
 800621c:	4619      	mov	r1, r3
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f000 f87a 	bl	8006318 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006224:	e051      	b.n	80062ca <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800622e:	b29b      	uxth	r3, r3
 8006230:	1ad3      	subs	r3, r2, r3
 8006232:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006238:	b29b      	uxth	r3, r3
 800623a:	2b00      	cmp	r3, #0
 800623c:	d047      	beq.n	80062ce <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 800623e:	8a7b      	ldrh	r3, [r7, #18]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d044      	beq.n	80062ce <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	68da      	ldr	r2, [r3, #12]
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006252:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	695a      	ldr	r2, [r3, #20]
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f022 0201 	bic.w	r2, r2, #1
 8006262:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2220      	movs	r2, #32
 8006268:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2200      	movs	r2, #0
 8006270:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	68da      	ldr	r2, [r3, #12]
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f022 0210 	bic.w	r2, r2, #16
 8006280:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006282:	8a7b      	ldrh	r3, [r7, #18]
 8006284:	4619      	mov	r1, r3
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f000 f846 	bl	8006318 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800628c:	e01f      	b.n	80062ce <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800628e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006290:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006294:	2b00      	cmp	r3, #0
 8006296:	d008      	beq.n	80062aa <HAL_UART_IRQHandler+0x326>
 8006298:	6a3b      	ldr	r3, [r7, #32]
 800629a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d003      	beq.n	80062aa <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f000 f909 	bl	80064ba <UART_Transmit_IT>
    return;
 80062a8:	e012      	b.n	80062d0 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80062aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d00d      	beq.n	80062d0 <HAL_UART_IRQHandler+0x34c>
 80062b4:	6a3b      	ldr	r3, [r7, #32]
 80062b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d008      	beq.n	80062d0 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f000 f94b 	bl	800655a <UART_EndTransmit_IT>
    return;
 80062c4:	e004      	b.n	80062d0 <HAL_UART_IRQHandler+0x34c>
    return;
 80062c6:	bf00      	nop
 80062c8:	e002      	b.n	80062d0 <HAL_UART_IRQHandler+0x34c>
      return;
 80062ca:	bf00      	nop
 80062cc:	e000      	b.n	80062d0 <HAL_UART_IRQHandler+0x34c>
      return;
 80062ce:	bf00      	nop
  }
}
 80062d0:	3728      	adds	r7, #40	; 0x28
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}
 80062d6:	bf00      	nop
 80062d8:	08006493 	.word	0x08006493

080062dc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80062dc:	b480      	push	{r7}
 80062de:	b083      	sub	sp, #12
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80062e4:	bf00      	nop
 80062e6:	370c      	adds	r7, #12
 80062e8:	46bd      	mov	sp, r7
 80062ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ee:	4770      	bx	lr

080062f0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80062f0:	b480      	push	{r7}
 80062f2:	b083      	sub	sp, #12
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80062f8:	bf00      	nop
 80062fa:	370c      	adds	r7, #12
 80062fc:	46bd      	mov	sp, r7
 80062fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006302:	4770      	bx	lr

08006304 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006304:	b480      	push	{r7}
 8006306:	b083      	sub	sp, #12
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800630c:	bf00      	nop
 800630e:	370c      	adds	r7, #12
 8006310:	46bd      	mov	sp, r7
 8006312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006316:	4770      	bx	lr

08006318 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006318:	b480      	push	{r7}
 800631a:	b083      	sub	sp, #12
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
 8006320:	460b      	mov	r3, r1
 8006322:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006324:	bf00      	nop
 8006326:	370c      	adds	r7, #12
 8006328:	46bd      	mov	sp, r7
 800632a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632e:	4770      	bx	lr

08006330 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b084      	sub	sp, #16
 8006334:	af00      	add	r7, sp, #0
 8006336:	60f8      	str	r0, [r7, #12]
 8006338:	60b9      	str	r1, [r7, #8]
 800633a:	603b      	str	r3, [r7, #0]
 800633c:	4613      	mov	r3, r2
 800633e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006340:	e02c      	b.n	800639c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006342:	69bb      	ldr	r3, [r7, #24]
 8006344:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006348:	d028      	beq.n	800639c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800634a:	69bb      	ldr	r3, [r7, #24]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d007      	beq.n	8006360 <UART_WaitOnFlagUntilTimeout+0x30>
 8006350:	f7fc fc28 	bl	8002ba4 <HAL_GetTick>
 8006354:	4602      	mov	r2, r0
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	1ad3      	subs	r3, r2, r3
 800635a:	69ba      	ldr	r2, [r7, #24]
 800635c:	429a      	cmp	r2, r3
 800635e:	d21d      	bcs.n	800639c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	68da      	ldr	r2, [r3, #12]
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800636e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	695a      	ldr	r2, [r3, #20]
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f022 0201 	bic.w	r2, r2, #1
 800637e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	2220      	movs	r2, #32
 8006384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	2220      	movs	r2, #32
 800638c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	2200      	movs	r2, #0
 8006394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006398:	2303      	movs	r3, #3
 800639a:	e00f      	b.n	80063bc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	681a      	ldr	r2, [r3, #0]
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	4013      	ands	r3, r2
 80063a6:	68ba      	ldr	r2, [r7, #8]
 80063a8:	429a      	cmp	r2, r3
 80063aa:	bf0c      	ite	eq
 80063ac:	2301      	moveq	r3, #1
 80063ae:	2300      	movne	r3, #0
 80063b0:	b2db      	uxtb	r3, r3
 80063b2:	461a      	mov	r2, r3
 80063b4:	79fb      	ldrb	r3, [r7, #7]
 80063b6:	429a      	cmp	r2, r3
 80063b8:	d0c3      	beq.n	8006342 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80063ba:	2300      	movs	r3, #0
}
 80063bc:	4618      	mov	r0, r3
 80063be:	3710      	adds	r7, #16
 80063c0:	46bd      	mov	sp, r7
 80063c2:	bd80      	pop	{r7, pc}

080063c4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80063c4:	b480      	push	{r7}
 80063c6:	b085      	sub	sp, #20
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	60f8      	str	r0, [r7, #12]
 80063cc:	60b9      	str	r1, [r7, #8]
 80063ce:	4613      	mov	r3, r2
 80063d0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	68ba      	ldr	r2, [r7, #8]
 80063d6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	88fa      	ldrh	r2, [r7, #6]
 80063dc:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	88fa      	ldrh	r2, [r7, #6]
 80063e2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	2200      	movs	r2, #0
 80063e8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	2222      	movs	r2, #34	; 0x22
 80063ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	2200      	movs	r2, #0
 80063f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	68da      	ldr	r2, [r3, #12]
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006408:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	695a      	ldr	r2, [r3, #20]
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f042 0201 	orr.w	r2, r2, #1
 8006418:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	68da      	ldr	r2, [r3, #12]
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f042 0220 	orr.w	r2, r2, #32
 8006428:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800642a:	2300      	movs	r3, #0
}
 800642c:	4618      	mov	r0, r3
 800642e:	3714      	adds	r7, #20
 8006430:	46bd      	mov	sp, r7
 8006432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006436:	4770      	bx	lr

08006438 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006438:	b480      	push	{r7}
 800643a:	b083      	sub	sp, #12
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	68da      	ldr	r2, [r3, #12]
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800644e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	695a      	ldr	r2, [r3, #20]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f022 0201 	bic.w	r2, r2, #1
 800645e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006464:	2b01      	cmp	r3, #1
 8006466:	d107      	bne.n	8006478 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	68da      	ldr	r2, [r3, #12]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f022 0210 	bic.w	r2, r2, #16
 8006476:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2220      	movs	r2, #32
 800647c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2200      	movs	r2, #0
 8006484:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006486:	bf00      	nop
 8006488:	370c      	adds	r7, #12
 800648a:	46bd      	mov	sp, r7
 800648c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006490:	4770      	bx	lr

08006492 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006492:	b580      	push	{r7, lr}
 8006494:	b084      	sub	sp, #16
 8006496:	af00      	add	r7, sp, #0
 8006498:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800649e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	2200      	movs	r2, #0
 80064a4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	2200      	movs	r2, #0
 80064aa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80064ac:	68f8      	ldr	r0, [r7, #12]
 80064ae:	f7ff ff29 	bl	8006304 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80064b2:	bf00      	nop
 80064b4:	3710      	adds	r7, #16
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bd80      	pop	{r7, pc}

080064ba <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80064ba:	b480      	push	{r7}
 80064bc:	b085      	sub	sp, #20
 80064be:	af00      	add	r7, sp, #0
 80064c0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064c8:	b2db      	uxtb	r3, r3
 80064ca:	2b21      	cmp	r3, #33	; 0x21
 80064cc:	d13e      	bne.n	800654c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	689b      	ldr	r3, [r3, #8]
 80064d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064d6:	d114      	bne.n	8006502 <UART_Transmit_IT+0x48>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	691b      	ldr	r3, [r3, #16]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d110      	bne.n	8006502 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6a1b      	ldr	r3, [r3, #32]
 80064e4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	881b      	ldrh	r3, [r3, #0]
 80064ea:	461a      	mov	r2, r3
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80064f4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6a1b      	ldr	r3, [r3, #32]
 80064fa:	1c9a      	adds	r2, r3, #2
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	621a      	str	r2, [r3, #32]
 8006500:	e008      	b.n	8006514 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6a1b      	ldr	r3, [r3, #32]
 8006506:	1c59      	adds	r1, r3, #1
 8006508:	687a      	ldr	r2, [r7, #4]
 800650a:	6211      	str	r1, [r2, #32]
 800650c:	781a      	ldrb	r2, [r3, #0]
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006518:	b29b      	uxth	r3, r3
 800651a:	3b01      	subs	r3, #1
 800651c:	b29b      	uxth	r3, r3
 800651e:	687a      	ldr	r2, [r7, #4]
 8006520:	4619      	mov	r1, r3
 8006522:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006524:	2b00      	cmp	r3, #0
 8006526:	d10f      	bne.n	8006548 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	68da      	ldr	r2, [r3, #12]
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006536:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	68da      	ldr	r2, [r3, #12]
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006546:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006548:	2300      	movs	r3, #0
 800654a:	e000      	b.n	800654e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800654c:	2302      	movs	r3, #2
  }
}
 800654e:	4618      	mov	r0, r3
 8006550:	3714      	adds	r7, #20
 8006552:	46bd      	mov	sp, r7
 8006554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006558:	4770      	bx	lr

0800655a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800655a:	b580      	push	{r7, lr}
 800655c:	b082      	sub	sp, #8
 800655e:	af00      	add	r7, sp, #0
 8006560:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	68da      	ldr	r2, [r3, #12]
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006570:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2220      	movs	r2, #32
 8006576:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800657a:	6878      	ldr	r0, [r7, #4]
 800657c:	f7ff feae 	bl	80062dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006580:	2300      	movs	r3, #0
}
 8006582:	4618      	mov	r0, r3
 8006584:	3708      	adds	r7, #8
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}

0800658a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800658a:	b580      	push	{r7, lr}
 800658c:	b084      	sub	sp, #16
 800658e:	af00      	add	r7, sp, #0
 8006590:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006598:	b2db      	uxtb	r3, r3
 800659a:	2b22      	cmp	r3, #34	; 0x22
 800659c:	f040 8087 	bne.w	80066ae <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	689b      	ldr	r3, [r3, #8]
 80065a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065a8:	d117      	bne.n	80065da <UART_Receive_IT+0x50>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	691b      	ldr	r3, [r3, #16]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d113      	bne.n	80065da <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80065b2:	2300      	movs	r3, #0
 80065b4:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065ba:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	685b      	ldr	r3, [r3, #4]
 80065c2:	b29b      	uxth	r3, r3
 80065c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065c8:	b29a      	uxth	r2, r3
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065d2:	1c9a      	adds	r2, r3, #2
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	629a      	str	r2, [r3, #40]	; 0x28
 80065d8:	e026      	b.n	8006628 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065de:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 80065e0:	2300      	movs	r3, #0
 80065e2:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	689b      	ldr	r3, [r3, #8]
 80065e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065ec:	d007      	beq.n	80065fe <UART_Receive_IT+0x74>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	689b      	ldr	r3, [r3, #8]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d10a      	bne.n	800660c <UART_Receive_IT+0x82>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	691b      	ldr	r3, [r3, #16]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d106      	bne.n	800660c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	685b      	ldr	r3, [r3, #4]
 8006604:	b2da      	uxtb	r2, r3
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	701a      	strb	r2, [r3, #0]
 800660a:	e008      	b.n	800661e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	685b      	ldr	r3, [r3, #4]
 8006612:	b2db      	uxtb	r3, r3
 8006614:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006618:	b2da      	uxtb	r2, r3
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006622:	1c5a      	adds	r2, r3, #1
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800662c:	b29b      	uxth	r3, r3
 800662e:	3b01      	subs	r3, #1
 8006630:	b29b      	uxth	r3, r3
 8006632:	687a      	ldr	r2, [r7, #4]
 8006634:	4619      	mov	r1, r3
 8006636:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006638:	2b00      	cmp	r3, #0
 800663a:	d136      	bne.n	80066aa <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	68da      	ldr	r2, [r3, #12]
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f022 0220 	bic.w	r2, r2, #32
 800664a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	68da      	ldr	r2, [r3, #12]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800665a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	695a      	ldr	r2, [r3, #20]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f022 0201 	bic.w	r2, r2, #1
 800666a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2220      	movs	r2, #32
 8006670:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006678:	2b01      	cmp	r3, #1
 800667a:	d10e      	bne.n	800669a <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	68da      	ldr	r2, [r3, #12]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f022 0210 	bic.w	r2, r2, #16
 800668a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006690:	4619      	mov	r1, r3
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f7ff fe40 	bl	8006318 <HAL_UARTEx_RxEventCallback>
 8006698:	e002      	b.n	80066a0 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f7ff fe28 	bl	80062f0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2200      	movs	r2, #0
 80066a4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 80066a6:	2300      	movs	r3, #0
 80066a8:	e002      	b.n	80066b0 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 80066aa:	2300      	movs	r3, #0
 80066ac:	e000      	b.n	80066b0 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 80066ae:	2302      	movs	r3, #2
  }
}
 80066b0:	4618      	mov	r0, r3
 80066b2:	3710      	adds	r7, #16
 80066b4:	46bd      	mov	sp, r7
 80066b6:	bd80      	pop	{r7, pc}

080066b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80066b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066bc:	b09f      	sub	sp, #124	; 0x7c
 80066be:	af00      	add	r7, sp, #0
 80066c0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80066c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	691b      	ldr	r3, [r3, #16]
 80066c8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80066cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066ce:	68d9      	ldr	r1, [r3, #12]
 80066d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066d2:	681a      	ldr	r2, [r3, #0]
 80066d4:	ea40 0301 	orr.w	r3, r0, r1
 80066d8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80066da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066dc:	689a      	ldr	r2, [r3, #8]
 80066de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066e0:	691b      	ldr	r3, [r3, #16]
 80066e2:	431a      	orrs	r2, r3
 80066e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066e6:	695b      	ldr	r3, [r3, #20]
 80066e8:	431a      	orrs	r2, r3
 80066ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066ec:	69db      	ldr	r3, [r3, #28]
 80066ee:	4313      	orrs	r3, r2
 80066f0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80066f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	68db      	ldr	r3, [r3, #12]
 80066f8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80066fc:	f021 010c 	bic.w	r1, r1, #12
 8006700:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006702:	681a      	ldr	r2, [r3, #0]
 8006704:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006706:	430b      	orrs	r3, r1
 8006708:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800670a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	695b      	ldr	r3, [r3, #20]
 8006710:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006714:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006716:	6999      	ldr	r1, [r3, #24]
 8006718:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800671a:	681a      	ldr	r2, [r3, #0]
 800671c:	ea40 0301 	orr.w	r3, r0, r1
 8006720:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006722:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006724:	681a      	ldr	r2, [r3, #0]
 8006726:	4bc5      	ldr	r3, [pc, #788]	; (8006a3c <UART_SetConfig+0x384>)
 8006728:	429a      	cmp	r2, r3
 800672a:	d004      	beq.n	8006736 <UART_SetConfig+0x7e>
 800672c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800672e:	681a      	ldr	r2, [r3, #0]
 8006730:	4bc3      	ldr	r3, [pc, #780]	; (8006a40 <UART_SetConfig+0x388>)
 8006732:	429a      	cmp	r2, r3
 8006734:	d103      	bne.n	800673e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006736:	f7fe fac1 	bl	8004cbc <HAL_RCC_GetPCLK2Freq>
 800673a:	6778      	str	r0, [r7, #116]	; 0x74
 800673c:	e002      	b.n	8006744 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800673e:	f7fe faa9 	bl	8004c94 <HAL_RCC_GetPCLK1Freq>
 8006742:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006744:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006746:	69db      	ldr	r3, [r3, #28]
 8006748:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800674c:	f040 80b6 	bne.w	80068bc <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006750:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006752:	461c      	mov	r4, r3
 8006754:	f04f 0500 	mov.w	r5, #0
 8006758:	4622      	mov	r2, r4
 800675a:	462b      	mov	r3, r5
 800675c:	1891      	adds	r1, r2, r2
 800675e:	6439      	str	r1, [r7, #64]	; 0x40
 8006760:	415b      	adcs	r3, r3
 8006762:	647b      	str	r3, [r7, #68]	; 0x44
 8006764:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006768:	1912      	adds	r2, r2, r4
 800676a:	eb45 0303 	adc.w	r3, r5, r3
 800676e:	f04f 0000 	mov.w	r0, #0
 8006772:	f04f 0100 	mov.w	r1, #0
 8006776:	00d9      	lsls	r1, r3, #3
 8006778:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800677c:	00d0      	lsls	r0, r2, #3
 800677e:	4602      	mov	r2, r0
 8006780:	460b      	mov	r3, r1
 8006782:	1911      	adds	r1, r2, r4
 8006784:	6639      	str	r1, [r7, #96]	; 0x60
 8006786:	416b      	adcs	r3, r5
 8006788:	667b      	str	r3, [r7, #100]	; 0x64
 800678a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	461a      	mov	r2, r3
 8006790:	f04f 0300 	mov.w	r3, #0
 8006794:	1891      	adds	r1, r2, r2
 8006796:	63b9      	str	r1, [r7, #56]	; 0x38
 8006798:	415b      	adcs	r3, r3
 800679a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800679c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80067a0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80067a4:	f7fa fafc 	bl	8000da0 <__aeabi_uldivmod>
 80067a8:	4602      	mov	r2, r0
 80067aa:	460b      	mov	r3, r1
 80067ac:	4ba5      	ldr	r3, [pc, #660]	; (8006a44 <UART_SetConfig+0x38c>)
 80067ae:	fba3 2302 	umull	r2, r3, r3, r2
 80067b2:	095b      	lsrs	r3, r3, #5
 80067b4:	011e      	lsls	r6, r3, #4
 80067b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80067b8:	461c      	mov	r4, r3
 80067ba:	f04f 0500 	mov.w	r5, #0
 80067be:	4622      	mov	r2, r4
 80067c0:	462b      	mov	r3, r5
 80067c2:	1891      	adds	r1, r2, r2
 80067c4:	6339      	str	r1, [r7, #48]	; 0x30
 80067c6:	415b      	adcs	r3, r3
 80067c8:	637b      	str	r3, [r7, #52]	; 0x34
 80067ca:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80067ce:	1912      	adds	r2, r2, r4
 80067d0:	eb45 0303 	adc.w	r3, r5, r3
 80067d4:	f04f 0000 	mov.w	r0, #0
 80067d8:	f04f 0100 	mov.w	r1, #0
 80067dc:	00d9      	lsls	r1, r3, #3
 80067de:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80067e2:	00d0      	lsls	r0, r2, #3
 80067e4:	4602      	mov	r2, r0
 80067e6:	460b      	mov	r3, r1
 80067e8:	1911      	adds	r1, r2, r4
 80067ea:	65b9      	str	r1, [r7, #88]	; 0x58
 80067ec:	416b      	adcs	r3, r5
 80067ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80067f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067f2:	685b      	ldr	r3, [r3, #4]
 80067f4:	461a      	mov	r2, r3
 80067f6:	f04f 0300 	mov.w	r3, #0
 80067fa:	1891      	adds	r1, r2, r2
 80067fc:	62b9      	str	r1, [r7, #40]	; 0x28
 80067fe:	415b      	adcs	r3, r3
 8006800:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006802:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006806:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800680a:	f7fa fac9 	bl	8000da0 <__aeabi_uldivmod>
 800680e:	4602      	mov	r2, r0
 8006810:	460b      	mov	r3, r1
 8006812:	4b8c      	ldr	r3, [pc, #560]	; (8006a44 <UART_SetConfig+0x38c>)
 8006814:	fba3 1302 	umull	r1, r3, r3, r2
 8006818:	095b      	lsrs	r3, r3, #5
 800681a:	2164      	movs	r1, #100	; 0x64
 800681c:	fb01 f303 	mul.w	r3, r1, r3
 8006820:	1ad3      	subs	r3, r2, r3
 8006822:	00db      	lsls	r3, r3, #3
 8006824:	3332      	adds	r3, #50	; 0x32
 8006826:	4a87      	ldr	r2, [pc, #540]	; (8006a44 <UART_SetConfig+0x38c>)
 8006828:	fba2 2303 	umull	r2, r3, r2, r3
 800682c:	095b      	lsrs	r3, r3, #5
 800682e:	005b      	lsls	r3, r3, #1
 8006830:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006834:	441e      	add	r6, r3
 8006836:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006838:	4618      	mov	r0, r3
 800683a:	f04f 0100 	mov.w	r1, #0
 800683e:	4602      	mov	r2, r0
 8006840:	460b      	mov	r3, r1
 8006842:	1894      	adds	r4, r2, r2
 8006844:	623c      	str	r4, [r7, #32]
 8006846:	415b      	adcs	r3, r3
 8006848:	627b      	str	r3, [r7, #36]	; 0x24
 800684a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800684e:	1812      	adds	r2, r2, r0
 8006850:	eb41 0303 	adc.w	r3, r1, r3
 8006854:	f04f 0400 	mov.w	r4, #0
 8006858:	f04f 0500 	mov.w	r5, #0
 800685c:	00dd      	lsls	r5, r3, #3
 800685e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006862:	00d4      	lsls	r4, r2, #3
 8006864:	4622      	mov	r2, r4
 8006866:	462b      	mov	r3, r5
 8006868:	1814      	adds	r4, r2, r0
 800686a:	653c      	str	r4, [r7, #80]	; 0x50
 800686c:	414b      	adcs	r3, r1
 800686e:	657b      	str	r3, [r7, #84]	; 0x54
 8006870:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006872:	685b      	ldr	r3, [r3, #4]
 8006874:	461a      	mov	r2, r3
 8006876:	f04f 0300 	mov.w	r3, #0
 800687a:	1891      	adds	r1, r2, r2
 800687c:	61b9      	str	r1, [r7, #24]
 800687e:	415b      	adcs	r3, r3
 8006880:	61fb      	str	r3, [r7, #28]
 8006882:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006886:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800688a:	f7fa fa89 	bl	8000da0 <__aeabi_uldivmod>
 800688e:	4602      	mov	r2, r0
 8006890:	460b      	mov	r3, r1
 8006892:	4b6c      	ldr	r3, [pc, #432]	; (8006a44 <UART_SetConfig+0x38c>)
 8006894:	fba3 1302 	umull	r1, r3, r3, r2
 8006898:	095b      	lsrs	r3, r3, #5
 800689a:	2164      	movs	r1, #100	; 0x64
 800689c:	fb01 f303 	mul.w	r3, r1, r3
 80068a0:	1ad3      	subs	r3, r2, r3
 80068a2:	00db      	lsls	r3, r3, #3
 80068a4:	3332      	adds	r3, #50	; 0x32
 80068a6:	4a67      	ldr	r2, [pc, #412]	; (8006a44 <UART_SetConfig+0x38c>)
 80068a8:	fba2 2303 	umull	r2, r3, r2, r3
 80068ac:	095b      	lsrs	r3, r3, #5
 80068ae:	f003 0207 	and.w	r2, r3, #7
 80068b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4432      	add	r2, r6
 80068b8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80068ba:	e0b9      	b.n	8006a30 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80068bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80068be:	461c      	mov	r4, r3
 80068c0:	f04f 0500 	mov.w	r5, #0
 80068c4:	4622      	mov	r2, r4
 80068c6:	462b      	mov	r3, r5
 80068c8:	1891      	adds	r1, r2, r2
 80068ca:	6139      	str	r1, [r7, #16]
 80068cc:	415b      	adcs	r3, r3
 80068ce:	617b      	str	r3, [r7, #20]
 80068d0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80068d4:	1912      	adds	r2, r2, r4
 80068d6:	eb45 0303 	adc.w	r3, r5, r3
 80068da:	f04f 0000 	mov.w	r0, #0
 80068de:	f04f 0100 	mov.w	r1, #0
 80068e2:	00d9      	lsls	r1, r3, #3
 80068e4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80068e8:	00d0      	lsls	r0, r2, #3
 80068ea:	4602      	mov	r2, r0
 80068ec:	460b      	mov	r3, r1
 80068ee:	eb12 0804 	adds.w	r8, r2, r4
 80068f2:	eb43 0905 	adc.w	r9, r3, r5
 80068f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068f8:	685b      	ldr	r3, [r3, #4]
 80068fa:	4618      	mov	r0, r3
 80068fc:	f04f 0100 	mov.w	r1, #0
 8006900:	f04f 0200 	mov.w	r2, #0
 8006904:	f04f 0300 	mov.w	r3, #0
 8006908:	008b      	lsls	r3, r1, #2
 800690a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800690e:	0082      	lsls	r2, r0, #2
 8006910:	4640      	mov	r0, r8
 8006912:	4649      	mov	r1, r9
 8006914:	f7fa fa44 	bl	8000da0 <__aeabi_uldivmod>
 8006918:	4602      	mov	r2, r0
 800691a:	460b      	mov	r3, r1
 800691c:	4b49      	ldr	r3, [pc, #292]	; (8006a44 <UART_SetConfig+0x38c>)
 800691e:	fba3 2302 	umull	r2, r3, r3, r2
 8006922:	095b      	lsrs	r3, r3, #5
 8006924:	011e      	lsls	r6, r3, #4
 8006926:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006928:	4618      	mov	r0, r3
 800692a:	f04f 0100 	mov.w	r1, #0
 800692e:	4602      	mov	r2, r0
 8006930:	460b      	mov	r3, r1
 8006932:	1894      	adds	r4, r2, r2
 8006934:	60bc      	str	r4, [r7, #8]
 8006936:	415b      	adcs	r3, r3
 8006938:	60fb      	str	r3, [r7, #12]
 800693a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800693e:	1812      	adds	r2, r2, r0
 8006940:	eb41 0303 	adc.w	r3, r1, r3
 8006944:	f04f 0400 	mov.w	r4, #0
 8006948:	f04f 0500 	mov.w	r5, #0
 800694c:	00dd      	lsls	r5, r3, #3
 800694e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006952:	00d4      	lsls	r4, r2, #3
 8006954:	4622      	mov	r2, r4
 8006956:	462b      	mov	r3, r5
 8006958:	1814      	adds	r4, r2, r0
 800695a:	64bc      	str	r4, [r7, #72]	; 0x48
 800695c:	414b      	adcs	r3, r1
 800695e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006960:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006962:	685b      	ldr	r3, [r3, #4]
 8006964:	4618      	mov	r0, r3
 8006966:	f04f 0100 	mov.w	r1, #0
 800696a:	f04f 0200 	mov.w	r2, #0
 800696e:	f04f 0300 	mov.w	r3, #0
 8006972:	008b      	lsls	r3, r1, #2
 8006974:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006978:	0082      	lsls	r2, r0, #2
 800697a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800697e:	f7fa fa0f 	bl	8000da0 <__aeabi_uldivmod>
 8006982:	4602      	mov	r2, r0
 8006984:	460b      	mov	r3, r1
 8006986:	4b2f      	ldr	r3, [pc, #188]	; (8006a44 <UART_SetConfig+0x38c>)
 8006988:	fba3 1302 	umull	r1, r3, r3, r2
 800698c:	095b      	lsrs	r3, r3, #5
 800698e:	2164      	movs	r1, #100	; 0x64
 8006990:	fb01 f303 	mul.w	r3, r1, r3
 8006994:	1ad3      	subs	r3, r2, r3
 8006996:	011b      	lsls	r3, r3, #4
 8006998:	3332      	adds	r3, #50	; 0x32
 800699a:	4a2a      	ldr	r2, [pc, #168]	; (8006a44 <UART_SetConfig+0x38c>)
 800699c:	fba2 2303 	umull	r2, r3, r2, r3
 80069a0:	095b      	lsrs	r3, r3, #5
 80069a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80069a6:	441e      	add	r6, r3
 80069a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80069aa:	4618      	mov	r0, r3
 80069ac:	f04f 0100 	mov.w	r1, #0
 80069b0:	4602      	mov	r2, r0
 80069b2:	460b      	mov	r3, r1
 80069b4:	1894      	adds	r4, r2, r2
 80069b6:	603c      	str	r4, [r7, #0]
 80069b8:	415b      	adcs	r3, r3
 80069ba:	607b      	str	r3, [r7, #4]
 80069bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069c0:	1812      	adds	r2, r2, r0
 80069c2:	eb41 0303 	adc.w	r3, r1, r3
 80069c6:	f04f 0400 	mov.w	r4, #0
 80069ca:	f04f 0500 	mov.w	r5, #0
 80069ce:	00dd      	lsls	r5, r3, #3
 80069d0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80069d4:	00d4      	lsls	r4, r2, #3
 80069d6:	4622      	mov	r2, r4
 80069d8:	462b      	mov	r3, r5
 80069da:	eb12 0a00 	adds.w	sl, r2, r0
 80069de:	eb43 0b01 	adc.w	fp, r3, r1
 80069e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069e4:	685b      	ldr	r3, [r3, #4]
 80069e6:	4618      	mov	r0, r3
 80069e8:	f04f 0100 	mov.w	r1, #0
 80069ec:	f04f 0200 	mov.w	r2, #0
 80069f0:	f04f 0300 	mov.w	r3, #0
 80069f4:	008b      	lsls	r3, r1, #2
 80069f6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80069fa:	0082      	lsls	r2, r0, #2
 80069fc:	4650      	mov	r0, sl
 80069fe:	4659      	mov	r1, fp
 8006a00:	f7fa f9ce 	bl	8000da0 <__aeabi_uldivmod>
 8006a04:	4602      	mov	r2, r0
 8006a06:	460b      	mov	r3, r1
 8006a08:	4b0e      	ldr	r3, [pc, #56]	; (8006a44 <UART_SetConfig+0x38c>)
 8006a0a:	fba3 1302 	umull	r1, r3, r3, r2
 8006a0e:	095b      	lsrs	r3, r3, #5
 8006a10:	2164      	movs	r1, #100	; 0x64
 8006a12:	fb01 f303 	mul.w	r3, r1, r3
 8006a16:	1ad3      	subs	r3, r2, r3
 8006a18:	011b      	lsls	r3, r3, #4
 8006a1a:	3332      	adds	r3, #50	; 0x32
 8006a1c:	4a09      	ldr	r2, [pc, #36]	; (8006a44 <UART_SetConfig+0x38c>)
 8006a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8006a22:	095b      	lsrs	r3, r3, #5
 8006a24:	f003 020f 	and.w	r2, r3, #15
 8006a28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4432      	add	r2, r6
 8006a2e:	609a      	str	r2, [r3, #8]
}
 8006a30:	bf00      	nop
 8006a32:	377c      	adds	r7, #124	; 0x7c
 8006a34:	46bd      	mov	sp, r7
 8006a36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a3a:	bf00      	nop
 8006a3c:	40011000 	.word	0x40011000
 8006a40:	40011400 	.word	0x40011400
 8006a44:	51eb851f 	.word	0x51eb851f

08006a48 <__libc_init_array>:
 8006a48:	b570      	push	{r4, r5, r6, lr}
 8006a4a:	4d0d      	ldr	r5, [pc, #52]	; (8006a80 <__libc_init_array+0x38>)
 8006a4c:	4c0d      	ldr	r4, [pc, #52]	; (8006a84 <__libc_init_array+0x3c>)
 8006a4e:	1b64      	subs	r4, r4, r5
 8006a50:	10a4      	asrs	r4, r4, #2
 8006a52:	2600      	movs	r6, #0
 8006a54:	42a6      	cmp	r6, r4
 8006a56:	d109      	bne.n	8006a6c <__libc_init_array+0x24>
 8006a58:	4d0b      	ldr	r5, [pc, #44]	; (8006a88 <__libc_init_array+0x40>)
 8006a5a:	4c0c      	ldr	r4, [pc, #48]	; (8006a8c <__libc_init_array+0x44>)
 8006a5c:	f001 f856 	bl	8007b0c <_init>
 8006a60:	1b64      	subs	r4, r4, r5
 8006a62:	10a4      	asrs	r4, r4, #2
 8006a64:	2600      	movs	r6, #0
 8006a66:	42a6      	cmp	r6, r4
 8006a68:	d105      	bne.n	8006a76 <__libc_init_array+0x2e>
 8006a6a:	bd70      	pop	{r4, r5, r6, pc}
 8006a6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a70:	4798      	blx	r3
 8006a72:	3601      	adds	r6, #1
 8006a74:	e7ee      	b.n	8006a54 <__libc_init_array+0xc>
 8006a76:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a7a:	4798      	blx	r3
 8006a7c:	3601      	adds	r6, #1
 8006a7e:	e7f2      	b.n	8006a66 <__libc_init_array+0x1e>
 8006a80:	08007e18 	.word	0x08007e18
 8006a84:	08007e18 	.word	0x08007e18
 8006a88:	08007e18 	.word	0x08007e18
 8006a8c:	08007e1c 	.word	0x08007e1c

08006a90 <memset>:
 8006a90:	4402      	add	r2, r0
 8006a92:	4603      	mov	r3, r0
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d100      	bne.n	8006a9a <memset+0xa>
 8006a98:	4770      	bx	lr
 8006a9a:	f803 1b01 	strb.w	r1, [r3], #1
 8006a9e:	e7f9      	b.n	8006a94 <memset+0x4>

08006aa0 <sin>:
 8006aa0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006aa2:	ec53 2b10 	vmov	r2, r3, d0
 8006aa6:	4826      	ldr	r0, [pc, #152]	; (8006b40 <sin+0xa0>)
 8006aa8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006aac:	4281      	cmp	r1, r0
 8006aae:	dc07      	bgt.n	8006ac0 <sin+0x20>
 8006ab0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8006b38 <sin+0x98>
 8006ab4:	2000      	movs	r0, #0
 8006ab6:	f000 fe5b 	bl	8007770 <__kernel_sin>
 8006aba:	ec51 0b10 	vmov	r0, r1, d0
 8006abe:	e007      	b.n	8006ad0 <sin+0x30>
 8006ac0:	4820      	ldr	r0, [pc, #128]	; (8006b44 <sin+0xa4>)
 8006ac2:	4281      	cmp	r1, r0
 8006ac4:	dd09      	ble.n	8006ada <sin+0x3a>
 8006ac6:	ee10 0a10 	vmov	r0, s0
 8006aca:	4619      	mov	r1, r3
 8006acc:	f7f9 fb90 	bl	80001f0 <__aeabi_dsub>
 8006ad0:	ec41 0b10 	vmov	d0, r0, r1
 8006ad4:	b005      	add	sp, #20
 8006ad6:	f85d fb04 	ldr.w	pc, [sp], #4
 8006ada:	4668      	mov	r0, sp
 8006adc:	f000 f834 	bl	8006b48 <__ieee754_rem_pio2>
 8006ae0:	f000 0003 	and.w	r0, r0, #3
 8006ae4:	2801      	cmp	r0, #1
 8006ae6:	d008      	beq.n	8006afa <sin+0x5a>
 8006ae8:	2802      	cmp	r0, #2
 8006aea:	d00d      	beq.n	8006b08 <sin+0x68>
 8006aec:	b9d0      	cbnz	r0, 8006b24 <sin+0x84>
 8006aee:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006af2:	ed9d 0b00 	vldr	d0, [sp]
 8006af6:	2001      	movs	r0, #1
 8006af8:	e7dd      	b.n	8006ab6 <sin+0x16>
 8006afa:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006afe:	ed9d 0b00 	vldr	d0, [sp]
 8006b02:	f000 fa2d 	bl	8006f60 <__kernel_cos>
 8006b06:	e7d8      	b.n	8006aba <sin+0x1a>
 8006b08:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006b0c:	ed9d 0b00 	vldr	d0, [sp]
 8006b10:	2001      	movs	r0, #1
 8006b12:	f000 fe2d 	bl	8007770 <__kernel_sin>
 8006b16:	ec53 2b10 	vmov	r2, r3, d0
 8006b1a:	ee10 0a10 	vmov	r0, s0
 8006b1e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006b22:	e7d5      	b.n	8006ad0 <sin+0x30>
 8006b24:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006b28:	ed9d 0b00 	vldr	d0, [sp]
 8006b2c:	f000 fa18 	bl	8006f60 <__kernel_cos>
 8006b30:	e7f1      	b.n	8006b16 <sin+0x76>
 8006b32:	bf00      	nop
 8006b34:	f3af 8000 	nop.w
	...
 8006b40:	3fe921fb 	.word	0x3fe921fb
 8006b44:	7fefffff 	.word	0x7fefffff

08006b48 <__ieee754_rem_pio2>:
 8006b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b4c:	ed2d 8b02 	vpush	{d8}
 8006b50:	ec55 4b10 	vmov	r4, r5, d0
 8006b54:	4bca      	ldr	r3, [pc, #808]	; (8006e80 <__ieee754_rem_pio2+0x338>)
 8006b56:	b08b      	sub	sp, #44	; 0x2c
 8006b58:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8006b5c:	4598      	cmp	r8, r3
 8006b5e:	4682      	mov	sl, r0
 8006b60:	9502      	str	r5, [sp, #8]
 8006b62:	dc08      	bgt.n	8006b76 <__ieee754_rem_pio2+0x2e>
 8006b64:	2200      	movs	r2, #0
 8006b66:	2300      	movs	r3, #0
 8006b68:	ed80 0b00 	vstr	d0, [r0]
 8006b6c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8006b70:	f04f 0b00 	mov.w	fp, #0
 8006b74:	e028      	b.n	8006bc8 <__ieee754_rem_pio2+0x80>
 8006b76:	4bc3      	ldr	r3, [pc, #780]	; (8006e84 <__ieee754_rem_pio2+0x33c>)
 8006b78:	4598      	cmp	r8, r3
 8006b7a:	dc78      	bgt.n	8006c6e <__ieee754_rem_pio2+0x126>
 8006b7c:	9b02      	ldr	r3, [sp, #8]
 8006b7e:	4ec2      	ldr	r6, [pc, #776]	; (8006e88 <__ieee754_rem_pio2+0x340>)
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	ee10 0a10 	vmov	r0, s0
 8006b86:	a3b0      	add	r3, pc, #704	; (adr r3, 8006e48 <__ieee754_rem_pio2+0x300>)
 8006b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b8c:	4629      	mov	r1, r5
 8006b8e:	dd39      	ble.n	8006c04 <__ieee754_rem_pio2+0xbc>
 8006b90:	f7f9 fb2e 	bl	80001f0 <__aeabi_dsub>
 8006b94:	45b0      	cmp	r8, r6
 8006b96:	4604      	mov	r4, r0
 8006b98:	460d      	mov	r5, r1
 8006b9a:	d01b      	beq.n	8006bd4 <__ieee754_rem_pio2+0x8c>
 8006b9c:	a3ac      	add	r3, pc, #688	; (adr r3, 8006e50 <__ieee754_rem_pio2+0x308>)
 8006b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ba2:	f7f9 fb25 	bl	80001f0 <__aeabi_dsub>
 8006ba6:	4602      	mov	r2, r0
 8006ba8:	460b      	mov	r3, r1
 8006baa:	e9ca 2300 	strd	r2, r3, [sl]
 8006bae:	4620      	mov	r0, r4
 8006bb0:	4629      	mov	r1, r5
 8006bb2:	f7f9 fb1d 	bl	80001f0 <__aeabi_dsub>
 8006bb6:	a3a6      	add	r3, pc, #664	; (adr r3, 8006e50 <__ieee754_rem_pio2+0x308>)
 8006bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bbc:	f7f9 fb18 	bl	80001f0 <__aeabi_dsub>
 8006bc0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006bc4:	f04f 0b01 	mov.w	fp, #1
 8006bc8:	4658      	mov	r0, fp
 8006bca:	b00b      	add	sp, #44	; 0x2c
 8006bcc:	ecbd 8b02 	vpop	{d8}
 8006bd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bd4:	a3a0      	add	r3, pc, #640	; (adr r3, 8006e58 <__ieee754_rem_pio2+0x310>)
 8006bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bda:	f7f9 fb09 	bl	80001f0 <__aeabi_dsub>
 8006bde:	a3a0      	add	r3, pc, #640	; (adr r3, 8006e60 <__ieee754_rem_pio2+0x318>)
 8006be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006be4:	4604      	mov	r4, r0
 8006be6:	460d      	mov	r5, r1
 8006be8:	f7f9 fb02 	bl	80001f0 <__aeabi_dsub>
 8006bec:	4602      	mov	r2, r0
 8006bee:	460b      	mov	r3, r1
 8006bf0:	e9ca 2300 	strd	r2, r3, [sl]
 8006bf4:	4620      	mov	r0, r4
 8006bf6:	4629      	mov	r1, r5
 8006bf8:	f7f9 fafa 	bl	80001f0 <__aeabi_dsub>
 8006bfc:	a398      	add	r3, pc, #608	; (adr r3, 8006e60 <__ieee754_rem_pio2+0x318>)
 8006bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c02:	e7db      	b.n	8006bbc <__ieee754_rem_pio2+0x74>
 8006c04:	f7f9 faf6 	bl	80001f4 <__adddf3>
 8006c08:	45b0      	cmp	r8, r6
 8006c0a:	4604      	mov	r4, r0
 8006c0c:	460d      	mov	r5, r1
 8006c0e:	d016      	beq.n	8006c3e <__ieee754_rem_pio2+0xf6>
 8006c10:	a38f      	add	r3, pc, #572	; (adr r3, 8006e50 <__ieee754_rem_pio2+0x308>)
 8006c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c16:	f7f9 faed 	bl	80001f4 <__adddf3>
 8006c1a:	4602      	mov	r2, r0
 8006c1c:	460b      	mov	r3, r1
 8006c1e:	e9ca 2300 	strd	r2, r3, [sl]
 8006c22:	4620      	mov	r0, r4
 8006c24:	4629      	mov	r1, r5
 8006c26:	f7f9 fae3 	bl	80001f0 <__aeabi_dsub>
 8006c2a:	a389      	add	r3, pc, #548	; (adr r3, 8006e50 <__ieee754_rem_pio2+0x308>)
 8006c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c30:	f7f9 fae0 	bl	80001f4 <__adddf3>
 8006c34:	f04f 3bff 	mov.w	fp, #4294967295
 8006c38:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006c3c:	e7c4      	b.n	8006bc8 <__ieee754_rem_pio2+0x80>
 8006c3e:	a386      	add	r3, pc, #536	; (adr r3, 8006e58 <__ieee754_rem_pio2+0x310>)
 8006c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c44:	f7f9 fad6 	bl	80001f4 <__adddf3>
 8006c48:	a385      	add	r3, pc, #532	; (adr r3, 8006e60 <__ieee754_rem_pio2+0x318>)
 8006c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c4e:	4604      	mov	r4, r0
 8006c50:	460d      	mov	r5, r1
 8006c52:	f7f9 facf 	bl	80001f4 <__adddf3>
 8006c56:	4602      	mov	r2, r0
 8006c58:	460b      	mov	r3, r1
 8006c5a:	e9ca 2300 	strd	r2, r3, [sl]
 8006c5e:	4620      	mov	r0, r4
 8006c60:	4629      	mov	r1, r5
 8006c62:	f7f9 fac5 	bl	80001f0 <__aeabi_dsub>
 8006c66:	a37e      	add	r3, pc, #504	; (adr r3, 8006e60 <__ieee754_rem_pio2+0x318>)
 8006c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c6c:	e7e0      	b.n	8006c30 <__ieee754_rem_pio2+0xe8>
 8006c6e:	4b87      	ldr	r3, [pc, #540]	; (8006e8c <__ieee754_rem_pio2+0x344>)
 8006c70:	4598      	cmp	r8, r3
 8006c72:	f300 80d9 	bgt.w	8006e28 <__ieee754_rem_pio2+0x2e0>
 8006c76:	f000 fe39 	bl	80078ec <fabs>
 8006c7a:	ec55 4b10 	vmov	r4, r5, d0
 8006c7e:	ee10 0a10 	vmov	r0, s0
 8006c82:	a379      	add	r3, pc, #484	; (adr r3, 8006e68 <__ieee754_rem_pio2+0x320>)
 8006c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c88:	4629      	mov	r1, r5
 8006c8a:	f7f9 fc69 	bl	8000560 <__aeabi_dmul>
 8006c8e:	4b80      	ldr	r3, [pc, #512]	; (8006e90 <__ieee754_rem_pio2+0x348>)
 8006c90:	2200      	movs	r2, #0
 8006c92:	f7f9 faaf 	bl	80001f4 <__adddf3>
 8006c96:	f7f9 fefd 	bl	8000a94 <__aeabi_d2iz>
 8006c9a:	4683      	mov	fp, r0
 8006c9c:	f7f9 fbf6 	bl	800048c <__aeabi_i2d>
 8006ca0:	4602      	mov	r2, r0
 8006ca2:	460b      	mov	r3, r1
 8006ca4:	ec43 2b18 	vmov	d8, r2, r3
 8006ca8:	a367      	add	r3, pc, #412	; (adr r3, 8006e48 <__ieee754_rem_pio2+0x300>)
 8006caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cae:	f7f9 fc57 	bl	8000560 <__aeabi_dmul>
 8006cb2:	4602      	mov	r2, r0
 8006cb4:	460b      	mov	r3, r1
 8006cb6:	4620      	mov	r0, r4
 8006cb8:	4629      	mov	r1, r5
 8006cba:	f7f9 fa99 	bl	80001f0 <__aeabi_dsub>
 8006cbe:	a364      	add	r3, pc, #400	; (adr r3, 8006e50 <__ieee754_rem_pio2+0x308>)
 8006cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cc4:	4606      	mov	r6, r0
 8006cc6:	460f      	mov	r7, r1
 8006cc8:	ec51 0b18 	vmov	r0, r1, d8
 8006ccc:	f7f9 fc48 	bl	8000560 <__aeabi_dmul>
 8006cd0:	f1bb 0f1f 	cmp.w	fp, #31
 8006cd4:	4604      	mov	r4, r0
 8006cd6:	460d      	mov	r5, r1
 8006cd8:	dc0d      	bgt.n	8006cf6 <__ieee754_rem_pio2+0x1ae>
 8006cda:	4b6e      	ldr	r3, [pc, #440]	; (8006e94 <__ieee754_rem_pio2+0x34c>)
 8006cdc:	f10b 32ff 	add.w	r2, fp, #4294967295
 8006ce0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ce4:	4543      	cmp	r3, r8
 8006ce6:	d006      	beq.n	8006cf6 <__ieee754_rem_pio2+0x1ae>
 8006ce8:	4622      	mov	r2, r4
 8006cea:	462b      	mov	r3, r5
 8006cec:	4630      	mov	r0, r6
 8006cee:	4639      	mov	r1, r7
 8006cf0:	f7f9 fa7e 	bl	80001f0 <__aeabi_dsub>
 8006cf4:	e00f      	b.n	8006d16 <__ieee754_rem_pio2+0x1ce>
 8006cf6:	462b      	mov	r3, r5
 8006cf8:	4622      	mov	r2, r4
 8006cfa:	4630      	mov	r0, r6
 8006cfc:	4639      	mov	r1, r7
 8006cfe:	f7f9 fa77 	bl	80001f0 <__aeabi_dsub>
 8006d02:	ea4f 5328 	mov.w	r3, r8, asr #20
 8006d06:	9303      	str	r3, [sp, #12]
 8006d08:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006d0c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8006d10:	f1b8 0f10 	cmp.w	r8, #16
 8006d14:	dc02      	bgt.n	8006d1c <__ieee754_rem_pio2+0x1d4>
 8006d16:	e9ca 0100 	strd	r0, r1, [sl]
 8006d1a:	e039      	b.n	8006d90 <__ieee754_rem_pio2+0x248>
 8006d1c:	a34e      	add	r3, pc, #312	; (adr r3, 8006e58 <__ieee754_rem_pio2+0x310>)
 8006d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d22:	ec51 0b18 	vmov	r0, r1, d8
 8006d26:	f7f9 fc1b 	bl	8000560 <__aeabi_dmul>
 8006d2a:	4604      	mov	r4, r0
 8006d2c:	460d      	mov	r5, r1
 8006d2e:	4602      	mov	r2, r0
 8006d30:	460b      	mov	r3, r1
 8006d32:	4630      	mov	r0, r6
 8006d34:	4639      	mov	r1, r7
 8006d36:	f7f9 fa5b 	bl	80001f0 <__aeabi_dsub>
 8006d3a:	4602      	mov	r2, r0
 8006d3c:	460b      	mov	r3, r1
 8006d3e:	4680      	mov	r8, r0
 8006d40:	4689      	mov	r9, r1
 8006d42:	4630      	mov	r0, r6
 8006d44:	4639      	mov	r1, r7
 8006d46:	f7f9 fa53 	bl	80001f0 <__aeabi_dsub>
 8006d4a:	4622      	mov	r2, r4
 8006d4c:	462b      	mov	r3, r5
 8006d4e:	f7f9 fa4f 	bl	80001f0 <__aeabi_dsub>
 8006d52:	a343      	add	r3, pc, #268	; (adr r3, 8006e60 <__ieee754_rem_pio2+0x318>)
 8006d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d58:	4604      	mov	r4, r0
 8006d5a:	460d      	mov	r5, r1
 8006d5c:	ec51 0b18 	vmov	r0, r1, d8
 8006d60:	f7f9 fbfe 	bl	8000560 <__aeabi_dmul>
 8006d64:	4622      	mov	r2, r4
 8006d66:	462b      	mov	r3, r5
 8006d68:	f7f9 fa42 	bl	80001f0 <__aeabi_dsub>
 8006d6c:	4602      	mov	r2, r0
 8006d6e:	460b      	mov	r3, r1
 8006d70:	4604      	mov	r4, r0
 8006d72:	460d      	mov	r5, r1
 8006d74:	4640      	mov	r0, r8
 8006d76:	4649      	mov	r1, r9
 8006d78:	f7f9 fa3a 	bl	80001f0 <__aeabi_dsub>
 8006d7c:	9a03      	ldr	r2, [sp, #12]
 8006d7e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006d82:	1ad3      	subs	r3, r2, r3
 8006d84:	2b31      	cmp	r3, #49	; 0x31
 8006d86:	dc24      	bgt.n	8006dd2 <__ieee754_rem_pio2+0x28a>
 8006d88:	e9ca 0100 	strd	r0, r1, [sl]
 8006d8c:	4646      	mov	r6, r8
 8006d8e:	464f      	mov	r7, r9
 8006d90:	e9da 8900 	ldrd	r8, r9, [sl]
 8006d94:	4630      	mov	r0, r6
 8006d96:	4642      	mov	r2, r8
 8006d98:	464b      	mov	r3, r9
 8006d9a:	4639      	mov	r1, r7
 8006d9c:	f7f9 fa28 	bl	80001f0 <__aeabi_dsub>
 8006da0:	462b      	mov	r3, r5
 8006da2:	4622      	mov	r2, r4
 8006da4:	f7f9 fa24 	bl	80001f0 <__aeabi_dsub>
 8006da8:	9b02      	ldr	r3, [sp, #8]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006db0:	f6bf af0a 	bge.w	8006bc8 <__ieee754_rem_pio2+0x80>
 8006db4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006db8:	f8ca 3004 	str.w	r3, [sl, #4]
 8006dbc:	f8ca 8000 	str.w	r8, [sl]
 8006dc0:	f8ca 0008 	str.w	r0, [sl, #8]
 8006dc4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006dc8:	f8ca 300c 	str.w	r3, [sl, #12]
 8006dcc:	f1cb 0b00 	rsb	fp, fp, #0
 8006dd0:	e6fa      	b.n	8006bc8 <__ieee754_rem_pio2+0x80>
 8006dd2:	a327      	add	r3, pc, #156	; (adr r3, 8006e70 <__ieee754_rem_pio2+0x328>)
 8006dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dd8:	ec51 0b18 	vmov	r0, r1, d8
 8006ddc:	f7f9 fbc0 	bl	8000560 <__aeabi_dmul>
 8006de0:	4604      	mov	r4, r0
 8006de2:	460d      	mov	r5, r1
 8006de4:	4602      	mov	r2, r0
 8006de6:	460b      	mov	r3, r1
 8006de8:	4640      	mov	r0, r8
 8006dea:	4649      	mov	r1, r9
 8006dec:	f7f9 fa00 	bl	80001f0 <__aeabi_dsub>
 8006df0:	4602      	mov	r2, r0
 8006df2:	460b      	mov	r3, r1
 8006df4:	4606      	mov	r6, r0
 8006df6:	460f      	mov	r7, r1
 8006df8:	4640      	mov	r0, r8
 8006dfa:	4649      	mov	r1, r9
 8006dfc:	f7f9 f9f8 	bl	80001f0 <__aeabi_dsub>
 8006e00:	4622      	mov	r2, r4
 8006e02:	462b      	mov	r3, r5
 8006e04:	f7f9 f9f4 	bl	80001f0 <__aeabi_dsub>
 8006e08:	a31b      	add	r3, pc, #108	; (adr r3, 8006e78 <__ieee754_rem_pio2+0x330>)
 8006e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e0e:	4604      	mov	r4, r0
 8006e10:	460d      	mov	r5, r1
 8006e12:	ec51 0b18 	vmov	r0, r1, d8
 8006e16:	f7f9 fba3 	bl	8000560 <__aeabi_dmul>
 8006e1a:	4622      	mov	r2, r4
 8006e1c:	462b      	mov	r3, r5
 8006e1e:	f7f9 f9e7 	bl	80001f0 <__aeabi_dsub>
 8006e22:	4604      	mov	r4, r0
 8006e24:	460d      	mov	r5, r1
 8006e26:	e75f      	b.n	8006ce8 <__ieee754_rem_pio2+0x1a0>
 8006e28:	4b1b      	ldr	r3, [pc, #108]	; (8006e98 <__ieee754_rem_pio2+0x350>)
 8006e2a:	4598      	cmp	r8, r3
 8006e2c:	dd36      	ble.n	8006e9c <__ieee754_rem_pio2+0x354>
 8006e2e:	ee10 2a10 	vmov	r2, s0
 8006e32:	462b      	mov	r3, r5
 8006e34:	4620      	mov	r0, r4
 8006e36:	4629      	mov	r1, r5
 8006e38:	f7f9 f9da 	bl	80001f0 <__aeabi_dsub>
 8006e3c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006e40:	e9ca 0100 	strd	r0, r1, [sl]
 8006e44:	e694      	b.n	8006b70 <__ieee754_rem_pio2+0x28>
 8006e46:	bf00      	nop
 8006e48:	54400000 	.word	0x54400000
 8006e4c:	3ff921fb 	.word	0x3ff921fb
 8006e50:	1a626331 	.word	0x1a626331
 8006e54:	3dd0b461 	.word	0x3dd0b461
 8006e58:	1a600000 	.word	0x1a600000
 8006e5c:	3dd0b461 	.word	0x3dd0b461
 8006e60:	2e037073 	.word	0x2e037073
 8006e64:	3ba3198a 	.word	0x3ba3198a
 8006e68:	6dc9c883 	.word	0x6dc9c883
 8006e6c:	3fe45f30 	.word	0x3fe45f30
 8006e70:	2e000000 	.word	0x2e000000
 8006e74:	3ba3198a 	.word	0x3ba3198a
 8006e78:	252049c1 	.word	0x252049c1
 8006e7c:	397b839a 	.word	0x397b839a
 8006e80:	3fe921fb 	.word	0x3fe921fb
 8006e84:	4002d97b 	.word	0x4002d97b
 8006e88:	3ff921fb 	.word	0x3ff921fb
 8006e8c:	413921fb 	.word	0x413921fb
 8006e90:	3fe00000 	.word	0x3fe00000
 8006e94:	08007c38 	.word	0x08007c38
 8006e98:	7fefffff 	.word	0x7fefffff
 8006e9c:	ea4f 5428 	mov.w	r4, r8, asr #20
 8006ea0:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8006ea4:	ee10 0a10 	vmov	r0, s0
 8006ea8:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8006eac:	ee10 6a10 	vmov	r6, s0
 8006eb0:	460f      	mov	r7, r1
 8006eb2:	f7f9 fdef 	bl	8000a94 <__aeabi_d2iz>
 8006eb6:	f7f9 fae9 	bl	800048c <__aeabi_i2d>
 8006eba:	4602      	mov	r2, r0
 8006ebc:	460b      	mov	r3, r1
 8006ebe:	4630      	mov	r0, r6
 8006ec0:	4639      	mov	r1, r7
 8006ec2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006ec6:	f7f9 f993 	bl	80001f0 <__aeabi_dsub>
 8006eca:	4b22      	ldr	r3, [pc, #136]	; (8006f54 <__ieee754_rem_pio2+0x40c>)
 8006ecc:	2200      	movs	r2, #0
 8006ece:	f7f9 fb47 	bl	8000560 <__aeabi_dmul>
 8006ed2:	460f      	mov	r7, r1
 8006ed4:	4606      	mov	r6, r0
 8006ed6:	f7f9 fddd 	bl	8000a94 <__aeabi_d2iz>
 8006eda:	f7f9 fad7 	bl	800048c <__aeabi_i2d>
 8006ede:	4602      	mov	r2, r0
 8006ee0:	460b      	mov	r3, r1
 8006ee2:	4630      	mov	r0, r6
 8006ee4:	4639      	mov	r1, r7
 8006ee6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006eea:	f7f9 f981 	bl	80001f0 <__aeabi_dsub>
 8006eee:	4b19      	ldr	r3, [pc, #100]	; (8006f54 <__ieee754_rem_pio2+0x40c>)
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	f7f9 fb35 	bl	8000560 <__aeabi_dmul>
 8006ef6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006efa:	ad04      	add	r5, sp, #16
 8006efc:	f04f 0803 	mov.w	r8, #3
 8006f00:	46a9      	mov	r9, r5
 8006f02:	2600      	movs	r6, #0
 8006f04:	2700      	movs	r7, #0
 8006f06:	4632      	mov	r2, r6
 8006f08:	463b      	mov	r3, r7
 8006f0a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8006f0e:	46c3      	mov	fp, r8
 8006f10:	3d08      	subs	r5, #8
 8006f12:	f108 38ff 	add.w	r8, r8, #4294967295
 8006f16:	f7f9 fd8b 	bl	8000a30 <__aeabi_dcmpeq>
 8006f1a:	2800      	cmp	r0, #0
 8006f1c:	d1f3      	bne.n	8006f06 <__ieee754_rem_pio2+0x3be>
 8006f1e:	4b0e      	ldr	r3, [pc, #56]	; (8006f58 <__ieee754_rem_pio2+0x410>)
 8006f20:	9301      	str	r3, [sp, #4]
 8006f22:	2302      	movs	r3, #2
 8006f24:	9300      	str	r3, [sp, #0]
 8006f26:	4622      	mov	r2, r4
 8006f28:	465b      	mov	r3, fp
 8006f2a:	4651      	mov	r1, sl
 8006f2c:	4648      	mov	r0, r9
 8006f2e:	f000 f8df 	bl	80070f0 <__kernel_rem_pio2>
 8006f32:	9b02      	ldr	r3, [sp, #8]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	4683      	mov	fp, r0
 8006f38:	f6bf ae46 	bge.w	8006bc8 <__ieee754_rem_pio2+0x80>
 8006f3c:	f8da 3004 	ldr.w	r3, [sl, #4]
 8006f40:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006f44:	f8ca 3004 	str.w	r3, [sl, #4]
 8006f48:	f8da 300c 	ldr.w	r3, [sl, #12]
 8006f4c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006f50:	e73a      	b.n	8006dc8 <__ieee754_rem_pio2+0x280>
 8006f52:	bf00      	nop
 8006f54:	41700000 	.word	0x41700000
 8006f58:	08007cb8 	.word	0x08007cb8
 8006f5c:	00000000 	.word	0x00000000

08006f60 <__kernel_cos>:
 8006f60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f64:	ec57 6b10 	vmov	r6, r7, d0
 8006f68:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8006f6c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8006f70:	ed8d 1b00 	vstr	d1, [sp]
 8006f74:	da07      	bge.n	8006f86 <__kernel_cos+0x26>
 8006f76:	ee10 0a10 	vmov	r0, s0
 8006f7a:	4639      	mov	r1, r7
 8006f7c:	f7f9 fd8a 	bl	8000a94 <__aeabi_d2iz>
 8006f80:	2800      	cmp	r0, #0
 8006f82:	f000 8088 	beq.w	8007096 <__kernel_cos+0x136>
 8006f86:	4632      	mov	r2, r6
 8006f88:	463b      	mov	r3, r7
 8006f8a:	4630      	mov	r0, r6
 8006f8c:	4639      	mov	r1, r7
 8006f8e:	f7f9 fae7 	bl	8000560 <__aeabi_dmul>
 8006f92:	4b51      	ldr	r3, [pc, #324]	; (80070d8 <__kernel_cos+0x178>)
 8006f94:	2200      	movs	r2, #0
 8006f96:	4604      	mov	r4, r0
 8006f98:	460d      	mov	r5, r1
 8006f9a:	f7f9 fae1 	bl	8000560 <__aeabi_dmul>
 8006f9e:	a340      	add	r3, pc, #256	; (adr r3, 80070a0 <__kernel_cos+0x140>)
 8006fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fa4:	4682      	mov	sl, r0
 8006fa6:	468b      	mov	fp, r1
 8006fa8:	4620      	mov	r0, r4
 8006faa:	4629      	mov	r1, r5
 8006fac:	f7f9 fad8 	bl	8000560 <__aeabi_dmul>
 8006fb0:	a33d      	add	r3, pc, #244	; (adr r3, 80070a8 <__kernel_cos+0x148>)
 8006fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fb6:	f7f9 f91d 	bl	80001f4 <__adddf3>
 8006fba:	4622      	mov	r2, r4
 8006fbc:	462b      	mov	r3, r5
 8006fbe:	f7f9 facf 	bl	8000560 <__aeabi_dmul>
 8006fc2:	a33b      	add	r3, pc, #236	; (adr r3, 80070b0 <__kernel_cos+0x150>)
 8006fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fc8:	f7f9 f912 	bl	80001f0 <__aeabi_dsub>
 8006fcc:	4622      	mov	r2, r4
 8006fce:	462b      	mov	r3, r5
 8006fd0:	f7f9 fac6 	bl	8000560 <__aeabi_dmul>
 8006fd4:	a338      	add	r3, pc, #224	; (adr r3, 80070b8 <__kernel_cos+0x158>)
 8006fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fda:	f7f9 f90b 	bl	80001f4 <__adddf3>
 8006fde:	4622      	mov	r2, r4
 8006fe0:	462b      	mov	r3, r5
 8006fe2:	f7f9 fabd 	bl	8000560 <__aeabi_dmul>
 8006fe6:	a336      	add	r3, pc, #216	; (adr r3, 80070c0 <__kernel_cos+0x160>)
 8006fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fec:	f7f9 f900 	bl	80001f0 <__aeabi_dsub>
 8006ff0:	4622      	mov	r2, r4
 8006ff2:	462b      	mov	r3, r5
 8006ff4:	f7f9 fab4 	bl	8000560 <__aeabi_dmul>
 8006ff8:	a333      	add	r3, pc, #204	; (adr r3, 80070c8 <__kernel_cos+0x168>)
 8006ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ffe:	f7f9 f8f9 	bl	80001f4 <__adddf3>
 8007002:	4622      	mov	r2, r4
 8007004:	462b      	mov	r3, r5
 8007006:	f7f9 faab 	bl	8000560 <__aeabi_dmul>
 800700a:	4622      	mov	r2, r4
 800700c:	462b      	mov	r3, r5
 800700e:	f7f9 faa7 	bl	8000560 <__aeabi_dmul>
 8007012:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007016:	4604      	mov	r4, r0
 8007018:	460d      	mov	r5, r1
 800701a:	4630      	mov	r0, r6
 800701c:	4639      	mov	r1, r7
 800701e:	f7f9 fa9f 	bl	8000560 <__aeabi_dmul>
 8007022:	460b      	mov	r3, r1
 8007024:	4602      	mov	r2, r0
 8007026:	4629      	mov	r1, r5
 8007028:	4620      	mov	r0, r4
 800702a:	f7f9 f8e1 	bl	80001f0 <__aeabi_dsub>
 800702e:	4b2b      	ldr	r3, [pc, #172]	; (80070dc <__kernel_cos+0x17c>)
 8007030:	4598      	cmp	r8, r3
 8007032:	4606      	mov	r6, r0
 8007034:	460f      	mov	r7, r1
 8007036:	dc10      	bgt.n	800705a <__kernel_cos+0xfa>
 8007038:	4602      	mov	r2, r0
 800703a:	460b      	mov	r3, r1
 800703c:	4650      	mov	r0, sl
 800703e:	4659      	mov	r1, fp
 8007040:	f7f9 f8d6 	bl	80001f0 <__aeabi_dsub>
 8007044:	460b      	mov	r3, r1
 8007046:	4926      	ldr	r1, [pc, #152]	; (80070e0 <__kernel_cos+0x180>)
 8007048:	4602      	mov	r2, r0
 800704a:	2000      	movs	r0, #0
 800704c:	f7f9 f8d0 	bl	80001f0 <__aeabi_dsub>
 8007050:	ec41 0b10 	vmov	d0, r0, r1
 8007054:	b003      	add	sp, #12
 8007056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800705a:	4b22      	ldr	r3, [pc, #136]	; (80070e4 <__kernel_cos+0x184>)
 800705c:	4920      	ldr	r1, [pc, #128]	; (80070e0 <__kernel_cos+0x180>)
 800705e:	4598      	cmp	r8, r3
 8007060:	bfcc      	ite	gt
 8007062:	4d21      	ldrgt	r5, [pc, #132]	; (80070e8 <__kernel_cos+0x188>)
 8007064:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8007068:	2400      	movs	r4, #0
 800706a:	4622      	mov	r2, r4
 800706c:	462b      	mov	r3, r5
 800706e:	2000      	movs	r0, #0
 8007070:	f7f9 f8be 	bl	80001f0 <__aeabi_dsub>
 8007074:	4622      	mov	r2, r4
 8007076:	4680      	mov	r8, r0
 8007078:	4689      	mov	r9, r1
 800707a:	462b      	mov	r3, r5
 800707c:	4650      	mov	r0, sl
 800707e:	4659      	mov	r1, fp
 8007080:	f7f9 f8b6 	bl	80001f0 <__aeabi_dsub>
 8007084:	4632      	mov	r2, r6
 8007086:	463b      	mov	r3, r7
 8007088:	f7f9 f8b2 	bl	80001f0 <__aeabi_dsub>
 800708c:	4602      	mov	r2, r0
 800708e:	460b      	mov	r3, r1
 8007090:	4640      	mov	r0, r8
 8007092:	4649      	mov	r1, r9
 8007094:	e7da      	b.n	800704c <__kernel_cos+0xec>
 8007096:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80070d0 <__kernel_cos+0x170>
 800709a:	e7db      	b.n	8007054 <__kernel_cos+0xf4>
 800709c:	f3af 8000 	nop.w
 80070a0:	be8838d4 	.word	0xbe8838d4
 80070a4:	bda8fae9 	.word	0xbda8fae9
 80070a8:	bdb4b1c4 	.word	0xbdb4b1c4
 80070ac:	3e21ee9e 	.word	0x3e21ee9e
 80070b0:	809c52ad 	.word	0x809c52ad
 80070b4:	3e927e4f 	.word	0x3e927e4f
 80070b8:	19cb1590 	.word	0x19cb1590
 80070bc:	3efa01a0 	.word	0x3efa01a0
 80070c0:	16c15177 	.word	0x16c15177
 80070c4:	3f56c16c 	.word	0x3f56c16c
 80070c8:	5555554c 	.word	0x5555554c
 80070cc:	3fa55555 	.word	0x3fa55555
 80070d0:	00000000 	.word	0x00000000
 80070d4:	3ff00000 	.word	0x3ff00000
 80070d8:	3fe00000 	.word	0x3fe00000
 80070dc:	3fd33332 	.word	0x3fd33332
 80070e0:	3ff00000 	.word	0x3ff00000
 80070e4:	3fe90000 	.word	0x3fe90000
 80070e8:	3fd20000 	.word	0x3fd20000
 80070ec:	00000000 	.word	0x00000000

080070f0 <__kernel_rem_pio2>:
 80070f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070f4:	ed2d 8b02 	vpush	{d8}
 80070f8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 80070fc:	f112 0f14 	cmn.w	r2, #20
 8007100:	9308      	str	r3, [sp, #32]
 8007102:	9101      	str	r1, [sp, #4]
 8007104:	4bc6      	ldr	r3, [pc, #792]	; (8007420 <__kernel_rem_pio2+0x330>)
 8007106:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8007108:	9009      	str	r0, [sp, #36]	; 0x24
 800710a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800710e:	9304      	str	r3, [sp, #16]
 8007110:	9b08      	ldr	r3, [sp, #32]
 8007112:	f103 33ff 	add.w	r3, r3, #4294967295
 8007116:	bfa8      	it	ge
 8007118:	1ed4      	subge	r4, r2, #3
 800711a:	9306      	str	r3, [sp, #24]
 800711c:	bfb2      	itee	lt
 800711e:	2400      	movlt	r4, #0
 8007120:	2318      	movge	r3, #24
 8007122:	fb94 f4f3 	sdivge	r4, r4, r3
 8007126:	f06f 0317 	mvn.w	r3, #23
 800712a:	fb04 3303 	mla	r3, r4, r3, r3
 800712e:	eb03 0a02 	add.w	sl, r3, r2
 8007132:	9b04      	ldr	r3, [sp, #16]
 8007134:	9a06      	ldr	r2, [sp, #24]
 8007136:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8007410 <__kernel_rem_pio2+0x320>
 800713a:	eb03 0802 	add.w	r8, r3, r2
 800713e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8007140:	1aa7      	subs	r7, r4, r2
 8007142:	ae20      	add	r6, sp, #128	; 0x80
 8007144:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8007148:	2500      	movs	r5, #0
 800714a:	4545      	cmp	r5, r8
 800714c:	dd18      	ble.n	8007180 <__kernel_rem_pio2+0x90>
 800714e:	9b08      	ldr	r3, [sp, #32]
 8007150:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8007154:	aa20      	add	r2, sp, #128	; 0x80
 8007156:	ed9f 8bae 	vldr	d8, [pc, #696]	; 8007410 <__kernel_rem_pio2+0x320>
 800715a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800715e:	f1c3 0301 	rsb	r3, r3, #1
 8007162:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8007166:	9307      	str	r3, [sp, #28]
 8007168:	9b07      	ldr	r3, [sp, #28]
 800716a:	9a04      	ldr	r2, [sp, #16]
 800716c:	4443      	add	r3, r8
 800716e:	429a      	cmp	r2, r3
 8007170:	db2f      	blt.n	80071d2 <__kernel_rem_pio2+0xe2>
 8007172:	ed8d 8b02 	vstr	d8, [sp, #8]
 8007176:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800717a:	462f      	mov	r7, r5
 800717c:	2600      	movs	r6, #0
 800717e:	e01b      	b.n	80071b8 <__kernel_rem_pio2+0xc8>
 8007180:	42ef      	cmn	r7, r5
 8007182:	d407      	bmi.n	8007194 <__kernel_rem_pio2+0xa4>
 8007184:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8007188:	f7f9 f980 	bl	800048c <__aeabi_i2d>
 800718c:	e8e6 0102 	strd	r0, r1, [r6], #8
 8007190:	3501      	adds	r5, #1
 8007192:	e7da      	b.n	800714a <__kernel_rem_pio2+0x5a>
 8007194:	ec51 0b18 	vmov	r0, r1, d8
 8007198:	e7f8      	b.n	800718c <__kernel_rem_pio2+0x9c>
 800719a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800719e:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80071a2:	f7f9 f9dd 	bl	8000560 <__aeabi_dmul>
 80071a6:	4602      	mov	r2, r0
 80071a8:	460b      	mov	r3, r1
 80071aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80071ae:	f7f9 f821 	bl	80001f4 <__adddf3>
 80071b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80071b6:	3601      	adds	r6, #1
 80071b8:	9b06      	ldr	r3, [sp, #24]
 80071ba:	429e      	cmp	r6, r3
 80071bc:	f1a7 0708 	sub.w	r7, r7, #8
 80071c0:	ddeb      	ble.n	800719a <__kernel_rem_pio2+0xaa>
 80071c2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80071c6:	3508      	adds	r5, #8
 80071c8:	ecab 7b02 	vstmia	fp!, {d7}
 80071cc:	f108 0801 	add.w	r8, r8, #1
 80071d0:	e7ca      	b.n	8007168 <__kernel_rem_pio2+0x78>
 80071d2:	9b04      	ldr	r3, [sp, #16]
 80071d4:	aa0c      	add	r2, sp, #48	; 0x30
 80071d6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80071da:	930b      	str	r3, [sp, #44]	; 0x2c
 80071dc:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80071de:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80071e2:	9c04      	ldr	r4, [sp, #16]
 80071e4:	930a      	str	r3, [sp, #40]	; 0x28
 80071e6:	ab98      	add	r3, sp, #608	; 0x260
 80071e8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80071ec:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80071f0:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 80071f4:	f8cd b008 	str.w	fp, [sp, #8]
 80071f8:	4625      	mov	r5, r4
 80071fa:	2d00      	cmp	r5, #0
 80071fc:	dc78      	bgt.n	80072f0 <__kernel_rem_pio2+0x200>
 80071fe:	ec47 6b10 	vmov	d0, r6, r7
 8007202:	4650      	mov	r0, sl
 8007204:	f000 fbfc 	bl	8007a00 <scalbn>
 8007208:	ec57 6b10 	vmov	r6, r7, d0
 800720c:	2200      	movs	r2, #0
 800720e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8007212:	ee10 0a10 	vmov	r0, s0
 8007216:	4639      	mov	r1, r7
 8007218:	f7f9 f9a2 	bl	8000560 <__aeabi_dmul>
 800721c:	ec41 0b10 	vmov	d0, r0, r1
 8007220:	f000 fb6e 	bl	8007900 <floor>
 8007224:	4b7f      	ldr	r3, [pc, #508]	; (8007424 <__kernel_rem_pio2+0x334>)
 8007226:	ec51 0b10 	vmov	r0, r1, d0
 800722a:	2200      	movs	r2, #0
 800722c:	f7f9 f998 	bl	8000560 <__aeabi_dmul>
 8007230:	4602      	mov	r2, r0
 8007232:	460b      	mov	r3, r1
 8007234:	4630      	mov	r0, r6
 8007236:	4639      	mov	r1, r7
 8007238:	f7f8 ffda 	bl	80001f0 <__aeabi_dsub>
 800723c:	460f      	mov	r7, r1
 800723e:	4606      	mov	r6, r0
 8007240:	f7f9 fc28 	bl	8000a94 <__aeabi_d2iz>
 8007244:	9007      	str	r0, [sp, #28]
 8007246:	f7f9 f921 	bl	800048c <__aeabi_i2d>
 800724a:	4602      	mov	r2, r0
 800724c:	460b      	mov	r3, r1
 800724e:	4630      	mov	r0, r6
 8007250:	4639      	mov	r1, r7
 8007252:	f7f8 ffcd 	bl	80001f0 <__aeabi_dsub>
 8007256:	f1ba 0f00 	cmp.w	sl, #0
 800725a:	4606      	mov	r6, r0
 800725c:	460f      	mov	r7, r1
 800725e:	dd70      	ble.n	8007342 <__kernel_rem_pio2+0x252>
 8007260:	1e62      	subs	r2, r4, #1
 8007262:	ab0c      	add	r3, sp, #48	; 0x30
 8007264:	9d07      	ldr	r5, [sp, #28]
 8007266:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800726a:	f1ca 0118 	rsb	r1, sl, #24
 800726e:	fa40 f301 	asr.w	r3, r0, r1
 8007272:	441d      	add	r5, r3
 8007274:	408b      	lsls	r3, r1
 8007276:	1ac0      	subs	r0, r0, r3
 8007278:	ab0c      	add	r3, sp, #48	; 0x30
 800727a:	9507      	str	r5, [sp, #28]
 800727c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8007280:	f1ca 0317 	rsb	r3, sl, #23
 8007284:	fa40 f303 	asr.w	r3, r0, r3
 8007288:	9302      	str	r3, [sp, #8]
 800728a:	9b02      	ldr	r3, [sp, #8]
 800728c:	2b00      	cmp	r3, #0
 800728e:	dd66      	ble.n	800735e <__kernel_rem_pio2+0x26e>
 8007290:	9b07      	ldr	r3, [sp, #28]
 8007292:	2200      	movs	r2, #0
 8007294:	3301      	adds	r3, #1
 8007296:	9307      	str	r3, [sp, #28]
 8007298:	4615      	mov	r5, r2
 800729a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800729e:	4294      	cmp	r4, r2
 80072a0:	f300 8099 	bgt.w	80073d6 <__kernel_rem_pio2+0x2e6>
 80072a4:	f1ba 0f00 	cmp.w	sl, #0
 80072a8:	dd07      	ble.n	80072ba <__kernel_rem_pio2+0x1ca>
 80072aa:	f1ba 0f01 	cmp.w	sl, #1
 80072ae:	f000 80a5 	beq.w	80073fc <__kernel_rem_pio2+0x30c>
 80072b2:	f1ba 0f02 	cmp.w	sl, #2
 80072b6:	f000 80c1 	beq.w	800743c <__kernel_rem_pio2+0x34c>
 80072ba:	9b02      	ldr	r3, [sp, #8]
 80072bc:	2b02      	cmp	r3, #2
 80072be:	d14e      	bne.n	800735e <__kernel_rem_pio2+0x26e>
 80072c0:	4632      	mov	r2, r6
 80072c2:	463b      	mov	r3, r7
 80072c4:	4958      	ldr	r1, [pc, #352]	; (8007428 <__kernel_rem_pio2+0x338>)
 80072c6:	2000      	movs	r0, #0
 80072c8:	f7f8 ff92 	bl	80001f0 <__aeabi_dsub>
 80072cc:	4606      	mov	r6, r0
 80072ce:	460f      	mov	r7, r1
 80072d0:	2d00      	cmp	r5, #0
 80072d2:	d044      	beq.n	800735e <__kernel_rem_pio2+0x26e>
 80072d4:	4650      	mov	r0, sl
 80072d6:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8007418 <__kernel_rem_pio2+0x328>
 80072da:	f000 fb91 	bl	8007a00 <scalbn>
 80072de:	4630      	mov	r0, r6
 80072e0:	4639      	mov	r1, r7
 80072e2:	ec53 2b10 	vmov	r2, r3, d0
 80072e6:	f7f8 ff83 	bl	80001f0 <__aeabi_dsub>
 80072ea:	4606      	mov	r6, r0
 80072ec:	460f      	mov	r7, r1
 80072ee:	e036      	b.n	800735e <__kernel_rem_pio2+0x26e>
 80072f0:	4b4e      	ldr	r3, [pc, #312]	; (800742c <__kernel_rem_pio2+0x33c>)
 80072f2:	2200      	movs	r2, #0
 80072f4:	4630      	mov	r0, r6
 80072f6:	4639      	mov	r1, r7
 80072f8:	f7f9 f932 	bl	8000560 <__aeabi_dmul>
 80072fc:	f7f9 fbca 	bl	8000a94 <__aeabi_d2iz>
 8007300:	f7f9 f8c4 	bl	800048c <__aeabi_i2d>
 8007304:	4b4a      	ldr	r3, [pc, #296]	; (8007430 <__kernel_rem_pio2+0x340>)
 8007306:	2200      	movs	r2, #0
 8007308:	4680      	mov	r8, r0
 800730a:	4689      	mov	r9, r1
 800730c:	f7f9 f928 	bl	8000560 <__aeabi_dmul>
 8007310:	4602      	mov	r2, r0
 8007312:	460b      	mov	r3, r1
 8007314:	4630      	mov	r0, r6
 8007316:	4639      	mov	r1, r7
 8007318:	f7f8 ff6a 	bl	80001f0 <__aeabi_dsub>
 800731c:	f7f9 fbba 	bl	8000a94 <__aeabi_d2iz>
 8007320:	9b02      	ldr	r3, [sp, #8]
 8007322:	f843 0b04 	str.w	r0, [r3], #4
 8007326:	3d01      	subs	r5, #1
 8007328:	9302      	str	r3, [sp, #8]
 800732a:	ab70      	add	r3, sp, #448	; 0x1c0
 800732c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8007330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007334:	4640      	mov	r0, r8
 8007336:	4649      	mov	r1, r9
 8007338:	f7f8 ff5c 	bl	80001f4 <__adddf3>
 800733c:	4606      	mov	r6, r0
 800733e:	460f      	mov	r7, r1
 8007340:	e75b      	b.n	80071fa <__kernel_rem_pio2+0x10a>
 8007342:	d105      	bne.n	8007350 <__kernel_rem_pio2+0x260>
 8007344:	1e63      	subs	r3, r4, #1
 8007346:	aa0c      	add	r2, sp, #48	; 0x30
 8007348:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800734c:	15c3      	asrs	r3, r0, #23
 800734e:	e79b      	b.n	8007288 <__kernel_rem_pio2+0x198>
 8007350:	4b38      	ldr	r3, [pc, #224]	; (8007434 <__kernel_rem_pio2+0x344>)
 8007352:	2200      	movs	r2, #0
 8007354:	f7f9 fb8a 	bl	8000a6c <__aeabi_dcmpge>
 8007358:	2800      	cmp	r0, #0
 800735a:	d139      	bne.n	80073d0 <__kernel_rem_pio2+0x2e0>
 800735c:	9002      	str	r0, [sp, #8]
 800735e:	2200      	movs	r2, #0
 8007360:	2300      	movs	r3, #0
 8007362:	4630      	mov	r0, r6
 8007364:	4639      	mov	r1, r7
 8007366:	f7f9 fb63 	bl	8000a30 <__aeabi_dcmpeq>
 800736a:	2800      	cmp	r0, #0
 800736c:	f000 80b4 	beq.w	80074d8 <__kernel_rem_pio2+0x3e8>
 8007370:	f104 3bff 	add.w	fp, r4, #4294967295
 8007374:	465b      	mov	r3, fp
 8007376:	2200      	movs	r2, #0
 8007378:	9904      	ldr	r1, [sp, #16]
 800737a:	428b      	cmp	r3, r1
 800737c:	da65      	bge.n	800744a <__kernel_rem_pio2+0x35a>
 800737e:	2a00      	cmp	r2, #0
 8007380:	d07b      	beq.n	800747a <__kernel_rem_pio2+0x38a>
 8007382:	ab0c      	add	r3, sp, #48	; 0x30
 8007384:	f1aa 0a18 	sub.w	sl, sl, #24
 8007388:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800738c:	2b00      	cmp	r3, #0
 800738e:	f000 80a0 	beq.w	80074d2 <__kernel_rem_pio2+0x3e2>
 8007392:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8007418 <__kernel_rem_pio2+0x328>
 8007396:	4650      	mov	r0, sl
 8007398:	f000 fb32 	bl	8007a00 <scalbn>
 800739c:	4f23      	ldr	r7, [pc, #140]	; (800742c <__kernel_rem_pio2+0x33c>)
 800739e:	ec55 4b10 	vmov	r4, r5, d0
 80073a2:	46d8      	mov	r8, fp
 80073a4:	2600      	movs	r6, #0
 80073a6:	f1b8 0f00 	cmp.w	r8, #0
 80073aa:	f280 80cf 	bge.w	800754c <__kernel_rem_pio2+0x45c>
 80073ae:	ed9f 8b18 	vldr	d8, [pc, #96]	; 8007410 <__kernel_rem_pio2+0x320>
 80073b2:	465f      	mov	r7, fp
 80073b4:	f04f 0800 	mov.w	r8, #0
 80073b8:	2f00      	cmp	r7, #0
 80073ba:	f2c0 80fd 	blt.w	80075b8 <__kernel_rem_pio2+0x4c8>
 80073be:	ab70      	add	r3, sp, #448	; 0x1c0
 80073c0:	f8df a074 	ldr.w	sl, [pc, #116]	; 8007438 <__kernel_rem_pio2+0x348>
 80073c4:	ec55 4b18 	vmov	r4, r5, d8
 80073c8:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 80073cc:	2600      	movs	r6, #0
 80073ce:	e0e5      	b.n	800759c <__kernel_rem_pio2+0x4ac>
 80073d0:	2302      	movs	r3, #2
 80073d2:	9302      	str	r3, [sp, #8]
 80073d4:	e75c      	b.n	8007290 <__kernel_rem_pio2+0x1a0>
 80073d6:	f8db 3000 	ldr.w	r3, [fp]
 80073da:	b955      	cbnz	r5, 80073f2 <__kernel_rem_pio2+0x302>
 80073dc:	b123      	cbz	r3, 80073e8 <__kernel_rem_pio2+0x2f8>
 80073de:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80073e2:	f8cb 3000 	str.w	r3, [fp]
 80073e6:	2301      	movs	r3, #1
 80073e8:	3201      	adds	r2, #1
 80073ea:	f10b 0b04 	add.w	fp, fp, #4
 80073ee:	461d      	mov	r5, r3
 80073f0:	e755      	b.n	800729e <__kernel_rem_pio2+0x1ae>
 80073f2:	1acb      	subs	r3, r1, r3
 80073f4:	f8cb 3000 	str.w	r3, [fp]
 80073f8:	462b      	mov	r3, r5
 80073fa:	e7f5      	b.n	80073e8 <__kernel_rem_pio2+0x2f8>
 80073fc:	1e62      	subs	r2, r4, #1
 80073fe:	ab0c      	add	r3, sp, #48	; 0x30
 8007400:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007404:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8007408:	a90c      	add	r1, sp, #48	; 0x30
 800740a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800740e:	e754      	b.n	80072ba <__kernel_rem_pio2+0x1ca>
	...
 800741c:	3ff00000 	.word	0x3ff00000
 8007420:	08007e00 	.word	0x08007e00
 8007424:	40200000 	.word	0x40200000
 8007428:	3ff00000 	.word	0x3ff00000
 800742c:	3e700000 	.word	0x3e700000
 8007430:	41700000 	.word	0x41700000
 8007434:	3fe00000 	.word	0x3fe00000
 8007438:	08007dc0 	.word	0x08007dc0
 800743c:	1e62      	subs	r2, r4, #1
 800743e:	ab0c      	add	r3, sp, #48	; 0x30
 8007440:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007444:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8007448:	e7de      	b.n	8007408 <__kernel_rem_pio2+0x318>
 800744a:	a90c      	add	r1, sp, #48	; 0x30
 800744c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8007450:	3b01      	subs	r3, #1
 8007452:	430a      	orrs	r2, r1
 8007454:	e790      	b.n	8007378 <__kernel_rem_pio2+0x288>
 8007456:	3301      	adds	r3, #1
 8007458:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800745c:	2900      	cmp	r1, #0
 800745e:	d0fa      	beq.n	8007456 <__kernel_rem_pio2+0x366>
 8007460:	9a08      	ldr	r2, [sp, #32]
 8007462:	18e3      	adds	r3, r4, r3
 8007464:	18a6      	adds	r6, r4, r2
 8007466:	aa20      	add	r2, sp, #128	; 0x80
 8007468:	1c65      	adds	r5, r4, #1
 800746a:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800746e:	9302      	str	r3, [sp, #8]
 8007470:	9b02      	ldr	r3, [sp, #8]
 8007472:	42ab      	cmp	r3, r5
 8007474:	da04      	bge.n	8007480 <__kernel_rem_pio2+0x390>
 8007476:	461c      	mov	r4, r3
 8007478:	e6b5      	b.n	80071e6 <__kernel_rem_pio2+0xf6>
 800747a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800747c:	2301      	movs	r3, #1
 800747e:	e7eb      	b.n	8007458 <__kernel_rem_pio2+0x368>
 8007480:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007482:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007486:	f7f9 f801 	bl	800048c <__aeabi_i2d>
 800748a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800748e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007490:	46b3      	mov	fp, r6
 8007492:	461c      	mov	r4, r3
 8007494:	2700      	movs	r7, #0
 8007496:	f04f 0800 	mov.w	r8, #0
 800749a:	f04f 0900 	mov.w	r9, #0
 800749e:	9b06      	ldr	r3, [sp, #24]
 80074a0:	429f      	cmp	r7, r3
 80074a2:	dd06      	ble.n	80074b2 <__kernel_rem_pio2+0x3c2>
 80074a4:	ab70      	add	r3, sp, #448	; 0x1c0
 80074a6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80074aa:	e9c3 8900 	strd	r8, r9, [r3]
 80074ae:	3501      	adds	r5, #1
 80074b0:	e7de      	b.n	8007470 <__kernel_rem_pio2+0x380>
 80074b2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80074b6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80074ba:	f7f9 f851 	bl	8000560 <__aeabi_dmul>
 80074be:	4602      	mov	r2, r0
 80074c0:	460b      	mov	r3, r1
 80074c2:	4640      	mov	r0, r8
 80074c4:	4649      	mov	r1, r9
 80074c6:	f7f8 fe95 	bl	80001f4 <__adddf3>
 80074ca:	3701      	adds	r7, #1
 80074cc:	4680      	mov	r8, r0
 80074ce:	4689      	mov	r9, r1
 80074d0:	e7e5      	b.n	800749e <__kernel_rem_pio2+0x3ae>
 80074d2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80074d6:	e754      	b.n	8007382 <__kernel_rem_pio2+0x292>
 80074d8:	ec47 6b10 	vmov	d0, r6, r7
 80074dc:	f1ca 0000 	rsb	r0, sl, #0
 80074e0:	f000 fa8e 	bl	8007a00 <scalbn>
 80074e4:	ec57 6b10 	vmov	r6, r7, d0
 80074e8:	4b9f      	ldr	r3, [pc, #636]	; (8007768 <__kernel_rem_pio2+0x678>)
 80074ea:	ee10 0a10 	vmov	r0, s0
 80074ee:	2200      	movs	r2, #0
 80074f0:	4639      	mov	r1, r7
 80074f2:	f7f9 fabb 	bl	8000a6c <__aeabi_dcmpge>
 80074f6:	b300      	cbz	r0, 800753a <__kernel_rem_pio2+0x44a>
 80074f8:	4b9c      	ldr	r3, [pc, #624]	; (800776c <__kernel_rem_pio2+0x67c>)
 80074fa:	2200      	movs	r2, #0
 80074fc:	4630      	mov	r0, r6
 80074fe:	4639      	mov	r1, r7
 8007500:	f7f9 f82e 	bl	8000560 <__aeabi_dmul>
 8007504:	f7f9 fac6 	bl	8000a94 <__aeabi_d2iz>
 8007508:	4605      	mov	r5, r0
 800750a:	f7f8 ffbf 	bl	800048c <__aeabi_i2d>
 800750e:	4b96      	ldr	r3, [pc, #600]	; (8007768 <__kernel_rem_pio2+0x678>)
 8007510:	2200      	movs	r2, #0
 8007512:	f7f9 f825 	bl	8000560 <__aeabi_dmul>
 8007516:	460b      	mov	r3, r1
 8007518:	4602      	mov	r2, r0
 800751a:	4639      	mov	r1, r7
 800751c:	4630      	mov	r0, r6
 800751e:	f7f8 fe67 	bl	80001f0 <__aeabi_dsub>
 8007522:	f7f9 fab7 	bl	8000a94 <__aeabi_d2iz>
 8007526:	f104 0b01 	add.w	fp, r4, #1
 800752a:	ab0c      	add	r3, sp, #48	; 0x30
 800752c:	f10a 0a18 	add.w	sl, sl, #24
 8007530:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8007534:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 8007538:	e72b      	b.n	8007392 <__kernel_rem_pio2+0x2a2>
 800753a:	4630      	mov	r0, r6
 800753c:	4639      	mov	r1, r7
 800753e:	f7f9 faa9 	bl	8000a94 <__aeabi_d2iz>
 8007542:	ab0c      	add	r3, sp, #48	; 0x30
 8007544:	46a3      	mov	fp, r4
 8007546:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800754a:	e722      	b.n	8007392 <__kernel_rem_pio2+0x2a2>
 800754c:	ab70      	add	r3, sp, #448	; 0x1c0
 800754e:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 8007552:	ab0c      	add	r3, sp, #48	; 0x30
 8007554:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8007558:	f7f8 ff98 	bl	800048c <__aeabi_i2d>
 800755c:	4622      	mov	r2, r4
 800755e:	462b      	mov	r3, r5
 8007560:	f7f8 fffe 	bl	8000560 <__aeabi_dmul>
 8007564:	4632      	mov	r2, r6
 8007566:	e9c9 0100 	strd	r0, r1, [r9]
 800756a:	463b      	mov	r3, r7
 800756c:	4620      	mov	r0, r4
 800756e:	4629      	mov	r1, r5
 8007570:	f7f8 fff6 	bl	8000560 <__aeabi_dmul>
 8007574:	f108 38ff 	add.w	r8, r8, #4294967295
 8007578:	4604      	mov	r4, r0
 800757a:	460d      	mov	r5, r1
 800757c:	e713      	b.n	80073a6 <__kernel_rem_pio2+0x2b6>
 800757e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8007582:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8007586:	f7f8 ffeb 	bl	8000560 <__aeabi_dmul>
 800758a:	4602      	mov	r2, r0
 800758c:	460b      	mov	r3, r1
 800758e:	4620      	mov	r0, r4
 8007590:	4629      	mov	r1, r5
 8007592:	f7f8 fe2f 	bl	80001f4 <__adddf3>
 8007596:	3601      	adds	r6, #1
 8007598:	4604      	mov	r4, r0
 800759a:	460d      	mov	r5, r1
 800759c:	9b04      	ldr	r3, [sp, #16]
 800759e:	429e      	cmp	r6, r3
 80075a0:	dc01      	bgt.n	80075a6 <__kernel_rem_pio2+0x4b6>
 80075a2:	45b0      	cmp	r8, r6
 80075a4:	daeb      	bge.n	800757e <__kernel_rem_pio2+0x48e>
 80075a6:	ab48      	add	r3, sp, #288	; 0x120
 80075a8:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80075ac:	e9c3 4500 	strd	r4, r5, [r3]
 80075b0:	3f01      	subs	r7, #1
 80075b2:	f108 0801 	add.w	r8, r8, #1
 80075b6:	e6ff      	b.n	80073b8 <__kernel_rem_pio2+0x2c8>
 80075b8:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80075ba:	2b02      	cmp	r3, #2
 80075bc:	dc0b      	bgt.n	80075d6 <__kernel_rem_pio2+0x4e6>
 80075be:	2b00      	cmp	r3, #0
 80075c0:	dc6e      	bgt.n	80076a0 <__kernel_rem_pio2+0x5b0>
 80075c2:	d045      	beq.n	8007650 <__kernel_rem_pio2+0x560>
 80075c4:	9b07      	ldr	r3, [sp, #28]
 80075c6:	f003 0007 	and.w	r0, r3, #7
 80075ca:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80075ce:	ecbd 8b02 	vpop	{d8}
 80075d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075d6:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80075d8:	2b03      	cmp	r3, #3
 80075da:	d1f3      	bne.n	80075c4 <__kernel_rem_pio2+0x4d4>
 80075dc:	ab48      	add	r3, sp, #288	; 0x120
 80075de:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 80075e2:	46d0      	mov	r8, sl
 80075e4:	46d9      	mov	r9, fp
 80075e6:	f1b9 0f00 	cmp.w	r9, #0
 80075ea:	f1a8 0808 	sub.w	r8, r8, #8
 80075ee:	dc64      	bgt.n	80076ba <__kernel_rem_pio2+0x5ca>
 80075f0:	465c      	mov	r4, fp
 80075f2:	2c01      	cmp	r4, #1
 80075f4:	f1aa 0a08 	sub.w	sl, sl, #8
 80075f8:	dc7e      	bgt.n	80076f8 <__kernel_rem_pio2+0x608>
 80075fa:	2000      	movs	r0, #0
 80075fc:	2100      	movs	r1, #0
 80075fe:	f1bb 0f01 	cmp.w	fp, #1
 8007602:	f300 8097 	bgt.w	8007734 <__kernel_rem_pio2+0x644>
 8007606:	9b02      	ldr	r3, [sp, #8]
 8007608:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 800760c:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8007610:	2b00      	cmp	r3, #0
 8007612:	f040 8099 	bne.w	8007748 <__kernel_rem_pio2+0x658>
 8007616:	9b01      	ldr	r3, [sp, #4]
 8007618:	e9c3 5600 	strd	r5, r6, [r3]
 800761c:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8007620:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8007624:	e7ce      	b.n	80075c4 <__kernel_rem_pio2+0x4d4>
 8007626:	ab48      	add	r3, sp, #288	; 0x120
 8007628:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800762c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007630:	f7f8 fde0 	bl	80001f4 <__adddf3>
 8007634:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007638:	f1bb 0f00 	cmp.w	fp, #0
 800763c:	daf3      	bge.n	8007626 <__kernel_rem_pio2+0x536>
 800763e:	9b02      	ldr	r3, [sp, #8]
 8007640:	b113      	cbz	r3, 8007648 <__kernel_rem_pio2+0x558>
 8007642:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007646:	4619      	mov	r1, r3
 8007648:	9b01      	ldr	r3, [sp, #4]
 800764a:	e9c3 0100 	strd	r0, r1, [r3]
 800764e:	e7b9      	b.n	80075c4 <__kernel_rem_pio2+0x4d4>
 8007650:	2000      	movs	r0, #0
 8007652:	2100      	movs	r1, #0
 8007654:	e7f0      	b.n	8007638 <__kernel_rem_pio2+0x548>
 8007656:	ab48      	add	r3, sp, #288	; 0x120
 8007658:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800765c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007660:	f7f8 fdc8 	bl	80001f4 <__adddf3>
 8007664:	3c01      	subs	r4, #1
 8007666:	2c00      	cmp	r4, #0
 8007668:	daf5      	bge.n	8007656 <__kernel_rem_pio2+0x566>
 800766a:	9b02      	ldr	r3, [sp, #8]
 800766c:	b1e3      	cbz	r3, 80076a8 <__kernel_rem_pio2+0x5b8>
 800766e:	4602      	mov	r2, r0
 8007670:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007674:	9c01      	ldr	r4, [sp, #4]
 8007676:	e9c4 2300 	strd	r2, r3, [r4]
 800767a:	4602      	mov	r2, r0
 800767c:	460b      	mov	r3, r1
 800767e:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8007682:	f7f8 fdb5 	bl	80001f0 <__aeabi_dsub>
 8007686:	ad4a      	add	r5, sp, #296	; 0x128
 8007688:	2401      	movs	r4, #1
 800768a:	45a3      	cmp	fp, r4
 800768c:	da0f      	bge.n	80076ae <__kernel_rem_pio2+0x5be>
 800768e:	9b02      	ldr	r3, [sp, #8]
 8007690:	b113      	cbz	r3, 8007698 <__kernel_rem_pio2+0x5a8>
 8007692:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007696:	4619      	mov	r1, r3
 8007698:	9b01      	ldr	r3, [sp, #4]
 800769a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800769e:	e791      	b.n	80075c4 <__kernel_rem_pio2+0x4d4>
 80076a0:	465c      	mov	r4, fp
 80076a2:	2000      	movs	r0, #0
 80076a4:	2100      	movs	r1, #0
 80076a6:	e7de      	b.n	8007666 <__kernel_rem_pio2+0x576>
 80076a8:	4602      	mov	r2, r0
 80076aa:	460b      	mov	r3, r1
 80076ac:	e7e2      	b.n	8007674 <__kernel_rem_pio2+0x584>
 80076ae:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 80076b2:	f7f8 fd9f 	bl	80001f4 <__adddf3>
 80076b6:	3401      	adds	r4, #1
 80076b8:	e7e7      	b.n	800768a <__kernel_rem_pio2+0x59a>
 80076ba:	e9d8 4500 	ldrd	r4, r5, [r8]
 80076be:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 80076c2:	4620      	mov	r0, r4
 80076c4:	4632      	mov	r2, r6
 80076c6:	463b      	mov	r3, r7
 80076c8:	4629      	mov	r1, r5
 80076ca:	f7f8 fd93 	bl	80001f4 <__adddf3>
 80076ce:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80076d2:	4602      	mov	r2, r0
 80076d4:	460b      	mov	r3, r1
 80076d6:	4620      	mov	r0, r4
 80076d8:	4629      	mov	r1, r5
 80076da:	f7f8 fd89 	bl	80001f0 <__aeabi_dsub>
 80076de:	4632      	mov	r2, r6
 80076e0:	463b      	mov	r3, r7
 80076e2:	f7f8 fd87 	bl	80001f4 <__adddf3>
 80076e6:	ed9d 7b04 	vldr	d7, [sp, #16]
 80076ea:	e9c8 0102 	strd	r0, r1, [r8, #8]
 80076ee:	ed88 7b00 	vstr	d7, [r8]
 80076f2:	f109 39ff 	add.w	r9, r9, #4294967295
 80076f6:	e776      	b.n	80075e6 <__kernel_rem_pio2+0x4f6>
 80076f8:	e9da 8900 	ldrd	r8, r9, [sl]
 80076fc:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8007700:	4640      	mov	r0, r8
 8007702:	4632      	mov	r2, r6
 8007704:	463b      	mov	r3, r7
 8007706:	4649      	mov	r1, r9
 8007708:	f7f8 fd74 	bl	80001f4 <__adddf3>
 800770c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007710:	4602      	mov	r2, r0
 8007712:	460b      	mov	r3, r1
 8007714:	4640      	mov	r0, r8
 8007716:	4649      	mov	r1, r9
 8007718:	f7f8 fd6a 	bl	80001f0 <__aeabi_dsub>
 800771c:	4632      	mov	r2, r6
 800771e:	463b      	mov	r3, r7
 8007720:	f7f8 fd68 	bl	80001f4 <__adddf3>
 8007724:	ed9d 7b04 	vldr	d7, [sp, #16]
 8007728:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800772c:	ed8a 7b00 	vstr	d7, [sl]
 8007730:	3c01      	subs	r4, #1
 8007732:	e75e      	b.n	80075f2 <__kernel_rem_pio2+0x502>
 8007734:	ab48      	add	r3, sp, #288	; 0x120
 8007736:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800773a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800773e:	f7f8 fd59 	bl	80001f4 <__adddf3>
 8007742:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007746:	e75a      	b.n	80075fe <__kernel_rem_pio2+0x50e>
 8007748:	9b01      	ldr	r3, [sp, #4]
 800774a:	9a01      	ldr	r2, [sp, #4]
 800774c:	601d      	str	r5, [r3, #0]
 800774e:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8007752:	605c      	str	r4, [r3, #4]
 8007754:	609f      	str	r7, [r3, #8]
 8007756:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800775a:	60d3      	str	r3, [r2, #12]
 800775c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007760:	6110      	str	r0, [r2, #16]
 8007762:	6153      	str	r3, [r2, #20]
 8007764:	e72e      	b.n	80075c4 <__kernel_rem_pio2+0x4d4>
 8007766:	bf00      	nop
 8007768:	41700000 	.word	0x41700000
 800776c:	3e700000 	.word	0x3e700000

08007770 <__kernel_sin>:
 8007770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007774:	ed2d 8b04 	vpush	{d8-d9}
 8007778:	eeb0 8a41 	vmov.f32	s16, s2
 800777c:	eef0 8a61 	vmov.f32	s17, s3
 8007780:	ec55 4b10 	vmov	r4, r5, d0
 8007784:	b083      	sub	sp, #12
 8007786:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800778a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800778e:	9001      	str	r0, [sp, #4]
 8007790:	da06      	bge.n	80077a0 <__kernel_sin+0x30>
 8007792:	ee10 0a10 	vmov	r0, s0
 8007796:	4629      	mov	r1, r5
 8007798:	f7f9 f97c 	bl	8000a94 <__aeabi_d2iz>
 800779c:	2800      	cmp	r0, #0
 800779e:	d051      	beq.n	8007844 <__kernel_sin+0xd4>
 80077a0:	4622      	mov	r2, r4
 80077a2:	462b      	mov	r3, r5
 80077a4:	4620      	mov	r0, r4
 80077a6:	4629      	mov	r1, r5
 80077a8:	f7f8 feda 	bl	8000560 <__aeabi_dmul>
 80077ac:	4682      	mov	sl, r0
 80077ae:	468b      	mov	fp, r1
 80077b0:	4602      	mov	r2, r0
 80077b2:	460b      	mov	r3, r1
 80077b4:	4620      	mov	r0, r4
 80077b6:	4629      	mov	r1, r5
 80077b8:	f7f8 fed2 	bl	8000560 <__aeabi_dmul>
 80077bc:	a341      	add	r3, pc, #260	; (adr r3, 80078c4 <__kernel_sin+0x154>)
 80077be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077c2:	4680      	mov	r8, r0
 80077c4:	4689      	mov	r9, r1
 80077c6:	4650      	mov	r0, sl
 80077c8:	4659      	mov	r1, fp
 80077ca:	f7f8 fec9 	bl	8000560 <__aeabi_dmul>
 80077ce:	a33f      	add	r3, pc, #252	; (adr r3, 80078cc <__kernel_sin+0x15c>)
 80077d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077d4:	f7f8 fd0c 	bl	80001f0 <__aeabi_dsub>
 80077d8:	4652      	mov	r2, sl
 80077da:	465b      	mov	r3, fp
 80077dc:	f7f8 fec0 	bl	8000560 <__aeabi_dmul>
 80077e0:	a33c      	add	r3, pc, #240	; (adr r3, 80078d4 <__kernel_sin+0x164>)
 80077e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077e6:	f7f8 fd05 	bl	80001f4 <__adddf3>
 80077ea:	4652      	mov	r2, sl
 80077ec:	465b      	mov	r3, fp
 80077ee:	f7f8 feb7 	bl	8000560 <__aeabi_dmul>
 80077f2:	a33a      	add	r3, pc, #232	; (adr r3, 80078dc <__kernel_sin+0x16c>)
 80077f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077f8:	f7f8 fcfa 	bl	80001f0 <__aeabi_dsub>
 80077fc:	4652      	mov	r2, sl
 80077fe:	465b      	mov	r3, fp
 8007800:	f7f8 feae 	bl	8000560 <__aeabi_dmul>
 8007804:	a337      	add	r3, pc, #220	; (adr r3, 80078e4 <__kernel_sin+0x174>)
 8007806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800780a:	f7f8 fcf3 	bl	80001f4 <__adddf3>
 800780e:	9b01      	ldr	r3, [sp, #4]
 8007810:	4606      	mov	r6, r0
 8007812:	460f      	mov	r7, r1
 8007814:	b9eb      	cbnz	r3, 8007852 <__kernel_sin+0xe2>
 8007816:	4602      	mov	r2, r0
 8007818:	460b      	mov	r3, r1
 800781a:	4650      	mov	r0, sl
 800781c:	4659      	mov	r1, fp
 800781e:	f7f8 fe9f 	bl	8000560 <__aeabi_dmul>
 8007822:	a325      	add	r3, pc, #148	; (adr r3, 80078b8 <__kernel_sin+0x148>)
 8007824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007828:	f7f8 fce2 	bl	80001f0 <__aeabi_dsub>
 800782c:	4642      	mov	r2, r8
 800782e:	464b      	mov	r3, r9
 8007830:	f7f8 fe96 	bl	8000560 <__aeabi_dmul>
 8007834:	4602      	mov	r2, r0
 8007836:	460b      	mov	r3, r1
 8007838:	4620      	mov	r0, r4
 800783a:	4629      	mov	r1, r5
 800783c:	f7f8 fcda 	bl	80001f4 <__adddf3>
 8007840:	4604      	mov	r4, r0
 8007842:	460d      	mov	r5, r1
 8007844:	ec45 4b10 	vmov	d0, r4, r5
 8007848:	b003      	add	sp, #12
 800784a:	ecbd 8b04 	vpop	{d8-d9}
 800784e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007852:	4b1b      	ldr	r3, [pc, #108]	; (80078c0 <__kernel_sin+0x150>)
 8007854:	ec51 0b18 	vmov	r0, r1, d8
 8007858:	2200      	movs	r2, #0
 800785a:	f7f8 fe81 	bl	8000560 <__aeabi_dmul>
 800785e:	4632      	mov	r2, r6
 8007860:	ec41 0b19 	vmov	d9, r0, r1
 8007864:	463b      	mov	r3, r7
 8007866:	4640      	mov	r0, r8
 8007868:	4649      	mov	r1, r9
 800786a:	f7f8 fe79 	bl	8000560 <__aeabi_dmul>
 800786e:	4602      	mov	r2, r0
 8007870:	460b      	mov	r3, r1
 8007872:	ec51 0b19 	vmov	r0, r1, d9
 8007876:	f7f8 fcbb 	bl	80001f0 <__aeabi_dsub>
 800787a:	4652      	mov	r2, sl
 800787c:	465b      	mov	r3, fp
 800787e:	f7f8 fe6f 	bl	8000560 <__aeabi_dmul>
 8007882:	ec53 2b18 	vmov	r2, r3, d8
 8007886:	f7f8 fcb3 	bl	80001f0 <__aeabi_dsub>
 800788a:	a30b      	add	r3, pc, #44	; (adr r3, 80078b8 <__kernel_sin+0x148>)
 800788c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007890:	4606      	mov	r6, r0
 8007892:	460f      	mov	r7, r1
 8007894:	4640      	mov	r0, r8
 8007896:	4649      	mov	r1, r9
 8007898:	f7f8 fe62 	bl	8000560 <__aeabi_dmul>
 800789c:	4602      	mov	r2, r0
 800789e:	460b      	mov	r3, r1
 80078a0:	4630      	mov	r0, r6
 80078a2:	4639      	mov	r1, r7
 80078a4:	f7f8 fca6 	bl	80001f4 <__adddf3>
 80078a8:	4602      	mov	r2, r0
 80078aa:	460b      	mov	r3, r1
 80078ac:	4620      	mov	r0, r4
 80078ae:	4629      	mov	r1, r5
 80078b0:	f7f8 fc9e 	bl	80001f0 <__aeabi_dsub>
 80078b4:	e7c4      	b.n	8007840 <__kernel_sin+0xd0>
 80078b6:	bf00      	nop
 80078b8:	55555549 	.word	0x55555549
 80078bc:	3fc55555 	.word	0x3fc55555
 80078c0:	3fe00000 	.word	0x3fe00000
 80078c4:	5acfd57c 	.word	0x5acfd57c
 80078c8:	3de5d93a 	.word	0x3de5d93a
 80078cc:	8a2b9ceb 	.word	0x8a2b9ceb
 80078d0:	3e5ae5e6 	.word	0x3e5ae5e6
 80078d4:	57b1fe7d 	.word	0x57b1fe7d
 80078d8:	3ec71de3 	.word	0x3ec71de3
 80078dc:	19c161d5 	.word	0x19c161d5
 80078e0:	3f2a01a0 	.word	0x3f2a01a0
 80078e4:	1110f8a6 	.word	0x1110f8a6
 80078e8:	3f811111 	.word	0x3f811111

080078ec <fabs>:
 80078ec:	ec51 0b10 	vmov	r0, r1, d0
 80078f0:	ee10 2a10 	vmov	r2, s0
 80078f4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80078f8:	ec43 2b10 	vmov	d0, r2, r3
 80078fc:	4770      	bx	lr
	...

08007900 <floor>:
 8007900:	ec51 0b10 	vmov	r0, r1, d0
 8007904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007908:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800790c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8007910:	2e13      	cmp	r6, #19
 8007912:	ee10 5a10 	vmov	r5, s0
 8007916:	ee10 8a10 	vmov	r8, s0
 800791a:	460c      	mov	r4, r1
 800791c:	dc32      	bgt.n	8007984 <floor+0x84>
 800791e:	2e00      	cmp	r6, #0
 8007920:	da14      	bge.n	800794c <floor+0x4c>
 8007922:	a333      	add	r3, pc, #204	; (adr r3, 80079f0 <floor+0xf0>)
 8007924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007928:	f7f8 fc64 	bl	80001f4 <__adddf3>
 800792c:	2200      	movs	r2, #0
 800792e:	2300      	movs	r3, #0
 8007930:	f7f9 f8a6 	bl	8000a80 <__aeabi_dcmpgt>
 8007934:	b138      	cbz	r0, 8007946 <floor+0x46>
 8007936:	2c00      	cmp	r4, #0
 8007938:	da57      	bge.n	80079ea <floor+0xea>
 800793a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800793e:	431d      	orrs	r5, r3
 8007940:	d001      	beq.n	8007946 <floor+0x46>
 8007942:	4c2d      	ldr	r4, [pc, #180]	; (80079f8 <floor+0xf8>)
 8007944:	2500      	movs	r5, #0
 8007946:	4621      	mov	r1, r4
 8007948:	4628      	mov	r0, r5
 800794a:	e025      	b.n	8007998 <floor+0x98>
 800794c:	4f2b      	ldr	r7, [pc, #172]	; (80079fc <floor+0xfc>)
 800794e:	4137      	asrs	r7, r6
 8007950:	ea01 0307 	and.w	r3, r1, r7
 8007954:	4303      	orrs	r3, r0
 8007956:	d01f      	beq.n	8007998 <floor+0x98>
 8007958:	a325      	add	r3, pc, #148	; (adr r3, 80079f0 <floor+0xf0>)
 800795a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800795e:	f7f8 fc49 	bl	80001f4 <__adddf3>
 8007962:	2200      	movs	r2, #0
 8007964:	2300      	movs	r3, #0
 8007966:	f7f9 f88b 	bl	8000a80 <__aeabi_dcmpgt>
 800796a:	2800      	cmp	r0, #0
 800796c:	d0eb      	beq.n	8007946 <floor+0x46>
 800796e:	2c00      	cmp	r4, #0
 8007970:	bfbe      	ittt	lt
 8007972:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8007976:	fa43 f606 	asrlt.w	r6, r3, r6
 800797a:	19a4      	addlt	r4, r4, r6
 800797c:	ea24 0407 	bic.w	r4, r4, r7
 8007980:	2500      	movs	r5, #0
 8007982:	e7e0      	b.n	8007946 <floor+0x46>
 8007984:	2e33      	cmp	r6, #51	; 0x33
 8007986:	dd0b      	ble.n	80079a0 <floor+0xa0>
 8007988:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800798c:	d104      	bne.n	8007998 <floor+0x98>
 800798e:	ee10 2a10 	vmov	r2, s0
 8007992:	460b      	mov	r3, r1
 8007994:	f7f8 fc2e 	bl	80001f4 <__adddf3>
 8007998:	ec41 0b10 	vmov	d0, r0, r1
 800799c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079a0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80079a4:	f04f 33ff 	mov.w	r3, #4294967295
 80079a8:	fa23 f707 	lsr.w	r7, r3, r7
 80079ac:	4207      	tst	r7, r0
 80079ae:	d0f3      	beq.n	8007998 <floor+0x98>
 80079b0:	a30f      	add	r3, pc, #60	; (adr r3, 80079f0 <floor+0xf0>)
 80079b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079b6:	f7f8 fc1d 	bl	80001f4 <__adddf3>
 80079ba:	2200      	movs	r2, #0
 80079bc:	2300      	movs	r3, #0
 80079be:	f7f9 f85f 	bl	8000a80 <__aeabi_dcmpgt>
 80079c2:	2800      	cmp	r0, #0
 80079c4:	d0bf      	beq.n	8007946 <floor+0x46>
 80079c6:	2c00      	cmp	r4, #0
 80079c8:	da02      	bge.n	80079d0 <floor+0xd0>
 80079ca:	2e14      	cmp	r6, #20
 80079cc:	d103      	bne.n	80079d6 <floor+0xd6>
 80079ce:	3401      	adds	r4, #1
 80079d0:	ea25 0507 	bic.w	r5, r5, r7
 80079d4:	e7b7      	b.n	8007946 <floor+0x46>
 80079d6:	2301      	movs	r3, #1
 80079d8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80079dc:	fa03 f606 	lsl.w	r6, r3, r6
 80079e0:	4435      	add	r5, r6
 80079e2:	4545      	cmp	r5, r8
 80079e4:	bf38      	it	cc
 80079e6:	18e4      	addcc	r4, r4, r3
 80079e8:	e7f2      	b.n	80079d0 <floor+0xd0>
 80079ea:	2500      	movs	r5, #0
 80079ec:	462c      	mov	r4, r5
 80079ee:	e7aa      	b.n	8007946 <floor+0x46>
 80079f0:	8800759c 	.word	0x8800759c
 80079f4:	7e37e43c 	.word	0x7e37e43c
 80079f8:	bff00000 	.word	0xbff00000
 80079fc:	000fffff 	.word	0x000fffff

08007a00 <scalbn>:
 8007a00:	b570      	push	{r4, r5, r6, lr}
 8007a02:	ec55 4b10 	vmov	r4, r5, d0
 8007a06:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8007a0a:	4606      	mov	r6, r0
 8007a0c:	462b      	mov	r3, r5
 8007a0e:	b99a      	cbnz	r2, 8007a38 <scalbn+0x38>
 8007a10:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007a14:	4323      	orrs	r3, r4
 8007a16:	d036      	beq.n	8007a86 <scalbn+0x86>
 8007a18:	4b39      	ldr	r3, [pc, #228]	; (8007b00 <scalbn+0x100>)
 8007a1a:	4629      	mov	r1, r5
 8007a1c:	ee10 0a10 	vmov	r0, s0
 8007a20:	2200      	movs	r2, #0
 8007a22:	f7f8 fd9d 	bl	8000560 <__aeabi_dmul>
 8007a26:	4b37      	ldr	r3, [pc, #220]	; (8007b04 <scalbn+0x104>)
 8007a28:	429e      	cmp	r6, r3
 8007a2a:	4604      	mov	r4, r0
 8007a2c:	460d      	mov	r5, r1
 8007a2e:	da10      	bge.n	8007a52 <scalbn+0x52>
 8007a30:	a32b      	add	r3, pc, #172	; (adr r3, 8007ae0 <scalbn+0xe0>)
 8007a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a36:	e03a      	b.n	8007aae <scalbn+0xae>
 8007a38:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8007a3c:	428a      	cmp	r2, r1
 8007a3e:	d10c      	bne.n	8007a5a <scalbn+0x5a>
 8007a40:	ee10 2a10 	vmov	r2, s0
 8007a44:	4620      	mov	r0, r4
 8007a46:	4629      	mov	r1, r5
 8007a48:	f7f8 fbd4 	bl	80001f4 <__adddf3>
 8007a4c:	4604      	mov	r4, r0
 8007a4e:	460d      	mov	r5, r1
 8007a50:	e019      	b.n	8007a86 <scalbn+0x86>
 8007a52:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007a56:	460b      	mov	r3, r1
 8007a58:	3a36      	subs	r2, #54	; 0x36
 8007a5a:	4432      	add	r2, r6
 8007a5c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8007a60:	428a      	cmp	r2, r1
 8007a62:	dd08      	ble.n	8007a76 <scalbn+0x76>
 8007a64:	2d00      	cmp	r5, #0
 8007a66:	a120      	add	r1, pc, #128	; (adr r1, 8007ae8 <scalbn+0xe8>)
 8007a68:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a6c:	da1c      	bge.n	8007aa8 <scalbn+0xa8>
 8007a6e:	a120      	add	r1, pc, #128	; (adr r1, 8007af0 <scalbn+0xf0>)
 8007a70:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a74:	e018      	b.n	8007aa8 <scalbn+0xa8>
 8007a76:	2a00      	cmp	r2, #0
 8007a78:	dd08      	ble.n	8007a8c <scalbn+0x8c>
 8007a7a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007a7e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007a82:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007a86:	ec45 4b10 	vmov	d0, r4, r5
 8007a8a:	bd70      	pop	{r4, r5, r6, pc}
 8007a8c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8007a90:	da19      	bge.n	8007ac6 <scalbn+0xc6>
 8007a92:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007a96:	429e      	cmp	r6, r3
 8007a98:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8007a9c:	dd0a      	ble.n	8007ab4 <scalbn+0xb4>
 8007a9e:	a112      	add	r1, pc, #72	; (adr r1, 8007ae8 <scalbn+0xe8>)
 8007aa0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d1e2      	bne.n	8007a6e <scalbn+0x6e>
 8007aa8:	a30f      	add	r3, pc, #60	; (adr r3, 8007ae8 <scalbn+0xe8>)
 8007aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aae:	f7f8 fd57 	bl	8000560 <__aeabi_dmul>
 8007ab2:	e7cb      	b.n	8007a4c <scalbn+0x4c>
 8007ab4:	a10a      	add	r1, pc, #40	; (adr r1, 8007ae0 <scalbn+0xe0>)
 8007ab6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d0b8      	beq.n	8007a30 <scalbn+0x30>
 8007abe:	a10e      	add	r1, pc, #56	; (adr r1, 8007af8 <scalbn+0xf8>)
 8007ac0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007ac4:	e7b4      	b.n	8007a30 <scalbn+0x30>
 8007ac6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007aca:	3236      	adds	r2, #54	; 0x36
 8007acc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007ad0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8007ad4:	4620      	mov	r0, r4
 8007ad6:	4b0c      	ldr	r3, [pc, #48]	; (8007b08 <scalbn+0x108>)
 8007ad8:	2200      	movs	r2, #0
 8007ada:	e7e8      	b.n	8007aae <scalbn+0xae>
 8007adc:	f3af 8000 	nop.w
 8007ae0:	c2f8f359 	.word	0xc2f8f359
 8007ae4:	01a56e1f 	.word	0x01a56e1f
 8007ae8:	8800759c 	.word	0x8800759c
 8007aec:	7e37e43c 	.word	0x7e37e43c
 8007af0:	8800759c 	.word	0x8800759c
 8007af4:	fe37e43c 	.word	0xfe37e43c
 8007af8:	c2f8f359 	.word	0xc2f8f359
 8007afc:	81a56e1f 	.word	0x81a56e1f
 8007b00:	43500000 	.word	0x43500000
 8007b04:	ffff3cb0 	.word	0xffff3cb0
 8007b08:	3c900000 	.word	0x3c900000

08007b0c <_init>:
 8007b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b0e:	bf00      	nop
 8007b10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b12:	bc08      	pop	{r3}
 8007b14:	469e      	mov	lr, r3
 8007b16:	4770      	bx	lr

08007b18 <_fini>:
 8007b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b1a:	bf00      	nop
 8007b1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b1e:	bc08      	pop	{r3}
 8007b20:	469e      	mov	lr, r3
 8007b22:	4770      	bx	lr
